// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shared.proto

package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SystemInformation_SystemType int32

const (
	SystemInformation_SELF_HOSTED_SYSTEM SystemInformation_SystemType = 0
	SystemInformation_AMAZON_RDS_SYSTEM  SystemInformation_SystemType = 1
	SystemInformation_HEROKU_SYSTEM      SystemInformation_SystemType = 2
)

var SystemInformation_SystemType_name = map[int32]string{
	0: "SELF_HOSTED_SYSTEM",
	1: "AMAZON_RDS_SYSTEM",
	2: "HEROKU_SYSTEM",
}
var SystemInformation_SystemType_value = map[string]int32{
	"SELF_HOSTED_SYSTEM": 0,
	"AMAZON_RDS_SYSTEM":  1,
	"HEROKU_SYSTEM":      2,
}

func (x SystemInformation_SystemType) String() string {
	return proto.EnumName(SystemInformation_SystemType_name, int32(x))
}
func (SystemInformation_SystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{11, 0}
}

type NullString struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullString) Reset()                    { *m = NullString{} }
func (m *NullString) String() string            { return proto.CompactTextString(m) }
func (*NullString) ProtoMessage()               {}
func (*NullString) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *NullString) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NullTimestamp struct {
	Valid bool                       `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullTimestamp) Reset()                    { *m = NullTimestamp{} }
func (m *NullTimestamp) String() string            { return proto.CompactTextString(m) }
func (*NullTimestamp) ProtoMessage()               {}
func (*NullTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *NullTimestamp) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullTimestamp) GetValue() *google_protobuf.Timestamp {
	if m != nil {
		return m.Value
	}
	return nil
}

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *PostgresVersion) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func (m *PostgresVersion) GetShort() string {
	if m != nil {
		return m.Short
	}
	return ""
}

func (m *PostgresVersion) GetNumeric() int64 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

type RoleReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RoleReference) Reset()                    { *m = RoleReference{} }
func (m *RoleReference) String() string            { return proto.CompactTextString(m) }
func (*RoleReference) ProtoMessage()               {}
func (*RoleReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *RoleReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DatabaseReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DatabaseReference) Reset()                    { *m = DatabaseReference{} }
func (m *DatabaseReference) String() string            { return proto.CompactTextString(m) }
func (*DatabaseReference) ProtoMessage()               {}
func (*DatabaseReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *DatabaseReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RelationReference struct {
	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	RelationName string `protobuf:"bytes,3,opt,name=relation_name,json=relationName" json:"relation_name,omitempty"`
}

func (m *RelationReference) Reset()                    { *m = RelationReference{} }
func (m *RelationReference) String() string            { return proto.CompactTextString(m) }
func (*RelationReference) ProtoMessage()               {}
func (*RelationReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *RelationReference) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *RelationReference) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *RelationReference) GetRelationName() string {
	if m != nil {
		return m.RelationName
	}
	return ""
}

type IndexReference struct {
	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName  string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	IndexName   string `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *IndexReference) Reset()                    { *m = IndexReference{} }
func (m *IndexReference) String() string            { return proto.CompactTextString(m) }
func (*IndexReference) ProtoMessage()               {}
func (*IndexReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *IndexReference) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *IndexReference) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *IndexReference) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

type FunctionReference struct {
	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Arguments    string `protobuf:"bytes,4,opt,name=arguments" json:"arguments,omitempty"`
}

func (m *FunctionReference) Reset()                    { *m = FunctionReference{} }
func (m *FunctionReference) String() string            { return proto.CompactTextString(m) }
func (*FunctionReference) ProtoMessage()               {}
func (*FunctionReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *FunctionReference) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *FunctionReference) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *FunctionReference) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *FunctionReference) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

type QueryReference struct {
	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	RoleIdx     int32  `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Fingerprint []byte `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *QueryReference) Reset()                    { *m = QueryReference{} }
func (m *QueryReference) String() string            { return proto.CompactTextString(m) }
func (*QueryReference) ProtoMessage()               {}
func (*QueryReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *QueryReference) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *QueryReference) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *QueryReference) GetFingerprint() []byte {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

type QueryInformation struct {
	QueryIdx        int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	NormalizedQuery string  `protobuf:"bytes,2,opt,name=normalized_query,json=normalizedQuery" json:"normalized_query,omitempty"`
	QueryIds        []int64 `protobuf:"varint,3,rep,packed,name=query_ids,json=queryIds" json:"query_ids,omitempty"`
}

func (m *QueryInformation) Reset()                    { *m = QueryInformation{} }
func (m *QueryInformation) String() string            { return proto.CompactTextString(m) }
func (*QueryInformation) ProtoMessage()               {}
func (*QueryInformation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *QueryInformation) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QueryInformation) GetNormalizedQuery() string {
	if m != nil {
		return m.NormalizedQuery
	}
	return ""
}

func (m *QueryInformation) GetQueryIds() []int64 {
	if m != nil {
		return m.QueryIds
	}
	return nil
}

type System struct {
	SystemInformation             *SystemInformation          `protobuf:"bytes,1,opt,name=system_information,json=systemInformation" json:"system_information,omitempty"`
	SystemId                      string                      `protobuf:"bytes,2,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	SystemScope                   string                      `protobuf:"bytes,3,opt,name=system_scope,json=systemScope" json:"system_scope,omitempty"`
	SchedulerStatistic            *SchedulerStatistic         `protobuf:"bytes,10,opt,name=scheduler_statistic,json=schedulerStatistic" json:"scheduler_statistic,omitempty"`
	MemoryStatistic               *MemoryStatistic            `protobuf:"bytes,11,opt,name=memory_statistic,json=memoryStatistic" json:"memory_statistic,omitempty"`
	CpuInformation                *CPUInformation             `protobuf:"bytes,12,opt,name=cpu_information,json=cpuInformation" json:"cpu_information,omitempty"`
	CpuReferences                 []*CPUReference             `protobuf:"bytes,13,rep,name=cpu_references,json=cpuReferences" json:"cpu_references,omitempty"`
	CpuStatistics                 []*CPUStatistic             `protobuf:"bytes,14,rep,name=cpu_statistics,json=cpuStatistics" json:"cpu_statistics,omitempty"`
	NetworkReferences             []*NetworkReference         `protobuf:"bytes,15,rep,name=network_references,json=networkReferences" json:"network_references,omitempty"`
	NetworkStatistics             []*NetworkStatistic         `protobuf:"bytes,16,rep,name=network_statistics,json=networkStatistics" json:"network_statistics,omitempty"`
	DiskReferences                []*DiskReference            `protobuf:"bytes,17,rep,name=disk_references,json=diskReferences" json:"disk_references,omitempty"`
	DiskInformations              []*DiskInformation          `protobuf:"bytes,18,rep,name=disk_informations,json=diskInformations" json:"disk_informations,omitempty"`
	DiskStatistics                []*DiskStatistic            `protobuf:"bytes,19,rep,name=disk_statistics,json=diskStatistics" json:"disk_statistics,omitempty"`
	DiskPartitionReferences       []*DiskPartitionReference   `protobuf:"bytes,20,rep,name=disk_partition_references,json=diskPartitionReferences" json:"disk_partition_references,omitempty"`
	DiskPartitionInformations     []*DiskPartitionInformation `protobuf:"bytes,21,rep,name=disk_partition_informations,json=diskPartitionInformations" json:"disk_partition_informations,omitempty"`
	DiskPartitionStatistics       []*DiskPartitionStatistic   `protobuf:"bytes,22,rep,name=disk_partition_statistics,json=diskPartitionStatistics" json:"disk_partition_statistics,omitempty"`
	DataDirectoryDiskPartitionIdx int32                       `protobuf:"varint,30,opt,name=data_directory_disk_partition_idx,json=dataDirectoryDiskPartitionIdx" json:"data_directory_disk_partition_idx,omitempty"`
	XlogDiskPartitionIdx          int32                       `protobuf:"varint,31,opt,name=xlog_disk_partition_idx,json=xlogDiskPartitionIdx" json:"xlog_disk_partition_idx,omitempty"`
	XlogUsedBytes                 uint64                      `protobuf:"varint,32,opt,name=xlog_used_bytes,json=xlogUsedBytes" json:"xlog_used_bytes,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *System) GetSystemInformation() *SystemInformation {
	if m != nil {
		return m.SystemInformation
	}
	return nil
}

func (m *System) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *System) GetSystemScope() string {
	if m != nil {
		return m.SystemScope
	}
	return ""
}

func (m *System) GetSchedulerStatistic() *SchedulerStatistic {
	if m != nil {
		return m.SchedulerStatistic
	}
	return nil
}

func (m *System) GetMemoryStatistic() *MemoryStatistic {
	if m != nil {
		return m.MemoryStatistic
	}
	return nil
}

func (m *System) GetCpuInformation() *CPUInformation {
	if m != nil {
		return m.CpuInformation
	}
	return nil
}

func (m *System) GetCpuReferences() []*CPUReference {
	if m != nil {
		return m.CpuReferences
	}
	return nil
}

func (m *System) GetCpuStatistics() []*CPUStatistic {
	if m != nil {
		return m.CpuStatistics
	}
	return nil
}

func (m *System) GetNetworkReferences() []*NetworkReference {
	if m != nil {
		return m.NetworkReferences
	}
	return nil
}

func (m *System) GetNetworkStatistics() []*NetworkStatistic {
	if m != nil {
		return m.NetworkStatistics
	}
	return nil
}

func (m *System) GetDiskReferences() []*DiskReference {
	if m != nil {
		return m.DiskReferences
	}
	return nil
}

func (m *System) GetDiskInformations() []*DiskInformation {
	if m != nil {
		return m.DiskInformations
	}
	return nil
}

func (m *System) GetDiskStatistics() []*DiskStatistic {
	if m != nil {
		return m.DiskStatistics
	}
	return nil
}

func (m *System) GetDiskPartitionReferences() []*DiskPartitionReference {
	if m != nil {
		return m.DiskPartitionReferences
	}
	return nil
}

func (m *System) GetDiskPartitionInformations() []*DiskPartitionInformation {
	if m != nil {
		return m.DiskPartitionInformations
	}
	return nil
}

func (m *System) GetDiskPartitionStatistics() []*DiskPartitionStatistic {
	if m != nil {
		return m.DiskPartitionStatistics
	}
	return nil
}

func (m *System) GetDataDirectoryDiskPartitionIdx() int32 {
	if m != nil {
		return m.DataDirectoryDiskPartitionIdx
	}
	return 0
}

func (m *System) GetXlogDiskPartitionIdx() int32 {
	if m != nil {
		return m.XlogDiskPartitionIdx
	}
	return 0
}

func (m *System) GetXlogUsedBytes() uint64 {
	if m != nil {
		return m.XlogUsedBytes
	}
	return 0
}

type SystemInformation struct {
	Type SystemInformation_SystemType `protobuf:"varint,1,opt,name=type,enum=pganalyze.collector.SystemInformation_SystemType" json:"type,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*SystemInformation_SelfHosted
	//	*SystemInformation_AmazonRds
	Info     isSystemInformation_Info   `protobuf_oneof:"info"`
	BootTime *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
}

func (m *SystemInformation) Reset()                    { *m = SystemInformation{} }
func (m *SystemInformation) String() string            { return proto.CompactTextString(m) }
func (*SystemInformation) ProtoMessage()               {}
func (*SystemInformation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

type isSystemInformation_Info interface {
	isSystemInformation_Info()
}

type SystemInformation_SelfHosted struct {
	SelfHosted *SystemInformationSelfHosted `protobuf:"bytes,2,opt,name=self_hosted,json=selfHosted,oneof"`
}
type SystemInformation_AmazonRds struct {
	AmazonRds *SystemInformationAmazonRDS `protobuf:"bytes,3,opt,name=amazon_rds,json=amazonRds,oneof"`
}

func (*SystemInformation_SelfHosted) isSystemInformation_Info() {}
func (*SystemInformation_AmazonRds) isSystemInformation_Info()  {}

func (m *SystemInformation) GetInfo() isSystemInformation_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SystemInformation) GetType() SystemInformation_SystemType {
	if m != nil {
		return m.Type
	}
	return SystemInformation_SELF_HOSTED_SYSTEM
}

func (m *SystemInformation) GetSelfHosted() *SystemInformationSelfHosted {
	if x, ok := m.GetInfo().(*SystemInformation_SelfHosted); ok {
		return x.SelfHosted
	}
	return nil
}

func (m *SystemInformation) GetAmazonRds() *SystemInformationAmazonRDS {
	if x, ok := m.GetInfo().(*SystemInformation_AmazonRds); ok {
		return x.AmazonRds
	}
	return nil
}

func (m *SystemInformation) GetBootTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SystemInformation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SystemInformation_OneofMarshaler, _SystemInformation_OneofUnmarshaler, _SystemInformation_OneofSizer, []interface{}{
		(*SystemInformation_SelfHosted)(nil),
		(*SystemInformation_AmazonRds)(nil),
	}
}

func _SystemInformation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelfHosted); err != nil {
			return err
		}
	case *SystemInformation_AmazonRds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmazonRds); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SystemInformation.Info has unexpected type %T", x)
	}
	return nil
}

func _SystemInformation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SystemInformation)
	switch tag {
	case 2: // info.self_hosted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationSelfHosted)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_SelfHosted{msg}
		return true, err
	case 3: // info.amazon_rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationAmazonRDS)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_AmazonRds{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SystemInformation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		s := proto.Size(x.SelfHosted)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SystemInformation_AmazonRds:
		s := proto.Size(x.AmazonRds)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SystemInformationSelfHosted struct {
	Hostname                 string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Architecture             string `protobuf:"bytes,2,opt,name=architecture" json:"architecture,omitempty"`
	OperatingSystem          string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Platform                 string `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	PlatformFamily           string `protobuf:"bytes,5,opt,name=platform_family,json=platformFamily" json:"platform_family,omitempty"`
	PlatformVersion          string `protobuf:"bytes,6,opt,name=platform_version,json=platformVersion" json:"platform_version,omitempty"`
	VirtualizationSystem     string `protobuf:"bytes,7,opt,name=virtualization_system,json=virtualizationSystem" json:"virtualization_system,omitempty"`
	KernelVersion            string `protobuf:"bytes,8,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	DatabaseSystemIdentifier string `protobuf:"bytes,9,opt,name=database_system_identifier,json=databaseSystemIdentifier" json:"database_system_identifier,omitempty"`
}

func (m *SystemInformationSelfHosted) Reset()                    { *m = SystemInformationSelfHosted{} }
func (m *SystemInformationSelfHosted) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationSelfHosted) ProtoMessage()               {}
func (*SystemInformationSelfHosted) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *SystemInformationSelfHosted) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetVirtualizationSystem() string {
	if m != nil {
		return m.VirtualizationSystem
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetDatabaseSystemIdentifier() string {
	if m != nil {
		return m.DatabaseSystemIdentifier
	}
	return ""
}

type SystemInformationAmazonRDS struct {
	Region                     string                     `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	InstanceClass              string                     `protobuf:"bytes,2,opt,name=instance_class,json=instanceClass" json:"instance_class,omitempty"`
	InstanceId                 string                     `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status                     string                     `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	AvailabilityZone           string                     `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone" json:"availability_zone,omitempty"`
	PubliclyAccessible         bool                       `protobuf:"varint,6,opt,name=publicly_accessible,json=publiclyAccessible" json:"publicly_accessible,omitempty"`
	MultiAz                    bool                       `protobuf:"varint,7,opt,name=multi_az,json=multiAz" json:"multi_az,omitempty"`
	SecondaryAvailabilityZone  string                     `protobuf:"bytes,8,opt,name=secondary_availability_zone,json=secondaryAvailabilityZone" json:"secondary_availability_zone,omitempty"`
	CaCertificate              string                     `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate" json:"ca_certificate,omitempty"`
	AutoMinorVersionUpgrade    bool                       `protobuf:"varint,10,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade" json:"auto_minor_version_upgrade,omitempty"`
	AutoMajorVersionUpgrade    bool                       `protobuf:"varint,11,opt,name=auto_major_version_upgrade,json=autoMajorVersionUpgrade" json:"auto_major_version_upgrade,omitempty"`
	PreferredMaintenanceWindow string                     `protobuf:"bytes,12,opt,name=preferred_maintenance_window,json=preferredMaintenanceWindow" json:"preferred_maintenance_window,omitempty"`
	PreferredBackupWindow      string                     `protobuf:"bytes,14,opt,name=preferred_backup_window,json=preferredBackupWindow" json:"preferred_backup_window,omitempty"`
	LatestRestorableTime       *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=latest_restorable_time,json=latestRestorableTime" json:"latest_restorable_time,omitempty"`
	BackupRetentionPeriodDays  int32                      `protobuf:"varint,15,opt,name=backup_retention_period_days,json=backupRetentionPeriodDays" json:"backup_retention_period_days,omitempty"`
	MasterUsername             string                     `protobuf:"bytes,16,opt,name=master_username,json=masterUsername" json:"master_username,omitempty"`
	InitialDbName              string                     `protobuf:"bytes,17,opt,name=initial_db_name,json=initialDbName" json:"initial_db_name,omitempty"`
	CreatedAt                  *google_protobuf.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	EnhancedMonitoring         bool                       `protobuf:"varint,19,opt,name=enhanced_monitoring,json=enhancedMonitoring" json:"enhanced_monitoring,omitempty"`
	ParameterApplyStatus       string                     `protobuf:"bytes,40,opt,name=parameter_apply_status,json=parameterApplyStatus" json:"parameter_apply_status,omitempty"`
	ParameterPgssEnabled       bool                       `protobuf:"varint,41,opt,name=parameter_pgss_enabled,json=parameterPgssEnabled" json:"parameter_pgss_enabled,omitempty"`
}

func (m *SystemInformationAmazonRDS) Reset()                    { *m = SystemInformationAmazonRDS{} }
func (m *SystemInformationAmazonRDS) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationAmazonRDS) ProtoMessage()               {}
func (*SystemInformationAmazonRDS) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *SystemInformationAmazonRDS) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInstanceClass() string {
	if m != nil {
		return m.InstanceClass
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetPubliclyAccessible() bool {
	if m != nil {
		return m.PubliclyAccessible
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetMultiAz() bool {
	if m != nil {
		return m.MultiAz
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetSecondaryAvailabilityZone() string {
	if m != nil {
		return m.SecondaryAvailabilityZone
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetAutoMinorVersionUpgrade() bool {
	if m != nil {
		return m.AutoMinorVersionUpgrade
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetAutoMajorVersionUpgrade() bool {
	if m != nil {
		return m.AutoMajorVersionUpgrade
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetPreferredMaintenanceWindow() string {
	if m != nil {
		return m.PreferredMaintenanceWindow
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetPreferredBackupWindow() string {
	if m != nil {
		return m.PreferredBackupWindow
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetLatestRestorableTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LatestRestorableTime
	}
	return nil
}

func (m *SystemInformationAmazonRDS) GetBackupRetentionPeriodDays() int32 {
	if m != nil {
		return m.BackupRetentionPeriodDays
	}
	return 0
}

func (m *SystemInformationAmazonRDS) GetMasterUsername() string {
	if m != nil {
		return m.MasterUsername
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInitialDbName() string {
	if m != nil {
		return m.InitialDbName
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SystemInformationAmazonRDS) GetEnhancedMonitoring() bool {
	if m != nil {
		return m.EnhancedMonitoring
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetParameterApplyStatus() string {
	if m != nil {
		return m.ParameterApplyStatus
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetParameterPgssEnabled() bool {
	if m != nil {
		return m.ParameterPgssEnabled
	}
	return false
}

type SchedulerStatistic struct {
	LoadAverage_1Min  float64 `protobuf:"fixed64,1,opt,name=load_average_1min,json=loadAverage1min" json:"load_average_1min,omitempty"`
	LoadAverage_5Min  float64 `protobuf:"fixed64,2,opt,name=load_average_5min,json=loadAverage5min" json:"load_average_5min,omitempty"`
	LoadAverage_15Min float64 `protobuf:"fixed64,3,opt,name=load_average_15min,json=loadAverage15min" json:"load_average_15min,omitempty"`
}

func (m *SchedulerStatistic) Reset()                    { *m = SchedulerStatistic{} }
func (m *SchedulerStatistic) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStatistic) ProtoMessage()               {}
func (*SchedulerStatistic) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *SchedulerStatistic) GetLoadAverage_1Min() float64 {
	if m != nil {
		return m.LoadAverage_1Min
	}
	return 0
}

func (m *SchedulerStatistic) GetLoadAverage_5Min() float64 {
	if m != nil {
		return m.LoadAverage_5Min
	}
	return 0
}

func (m *SchedulerStatistic) GetLoadAverage_15Min() float64 {
	if m != nil {
		return m.LoadAverage_15Min
	}
	return 0
}

type MemoryStatistic struct {
	TotalBytes         uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	CachedBytes        uint64 `protobuf:"varint,2,opt,name=cached_bytes,json=cachedBytes" json:"cached_bytes,omitempty"`
	BuffersBytes       uint64 `protobuf:"varint,3,opt,name=buffers_bytes,json=buffersBytes" json:"buffers_bytes,omitempty"`
	FreeBytes          uint64 `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes" json:"free_bytes,omitempty"`
	WritebackBytes     uint64 `protobuf:"varint,5,opt,name=writeback_bytes,json=writebackBytes" json:"writeback_bytes,omitempty"`
	DirtyBytes         uint64 `protobuf:"varint,6,opt,name=dirty_bytes,json=dirtyBytes" json:"dirty_bytes,omitempty"`
	SlabBytes          uint64 `protobuf:"varint,7,opt,name=slab_bytes,json=slabBytes" json:"slab_bytes,omitempty"`
	MappedBytes        uint64 `protobuf:"varint,8,opt,name=mapped_bytes,json=mappedBytes" json:"mapped_bytes,omitempty"`
	PageTablesBytes    uint64 `protobuf:"varint,9,opt,name=page_tables_bytes,json=pageTablesBytes" json:"page_tables_bytes,omitempty"`
	ActiveBytes        uint64 `protobuf:"varint,10,opt,name=active_bytes,json=activeBytes" json:"active_bytes,omitempty"`
	InactiveBytes      uint64 `protobuf:"varint,11,opt,name=inactive_bytes,json=inactiveBytes" json:"inactive_bytes,omitempty"`
	AvailableBytes     uint64 `protobuf:"varint,12,opt,name=available_bytes,json=availableBytes" json:"available_bytes,omitempty"`
	SwapUsedBytes      uint64 `protobuf:"varint,13,opt,name=swap_used_bytes,json=swapUsedBytes" json:"swap_used_bytes,omitempty"`
	SwapTotalBytes     uint64 `protobuf:"varint,14,opt,name=swap_total_bytes,json=swapTotalBytes" json:"swap_total_bytes,omitempty"`
	HugePagesSizeBytes uint64 `protobuf:"varint,20,opt,name=huge_pages_size_bytes,json=hugePagesSizeBytes" json:"huge_pages_size_bytes,omitempty"`
	HugePagesFree      uint64 `protobuf:"varint,21,opt,name=huge_pages_free,json=hugePagesFree" json:"huge_pages_free,omitempty"`
	HugePagesTotal     uint64 `protobuf:"varint,22,opt,name=huge_pages_total,json=hugePagesTotal" json:"huge_pages_total,omitempty"`
	HugePagesReserved  uint64 `protobuf:"varint,23,opt,name=huge_pages_reserved,json=hugePagesReserved" json:"huge_pages_reserved,omitempty"`
	HugePagesSurplus   uint64 `protobuf:"varint,24,opt,name=huge_pages_surplus,json=hugePagesSurplus" json:"huge_pages_surplus,omitempty"`
	ApplicationBytes   uint64 `protobuf:"varint,30,opt,name=application_bytes,json=applicationBytes" json:"application_bytes,omitempty"`
}

func (m *MemoryStatistic) Reset()                    { *m = MemoryStatistic{} }
func (m *MemoryStatistic) String() string            { return proto.CompactTextString(m) }
func (*MemoryStatistic) ProtoMessage()               {}
func (*MemoryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

func (m *MemoryStatistic) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *MemoryStatistic) GetCachedBytes() uint64 {
	if m != nil {
		return m.CachedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetBuffersBytes() uint64 {
	if m != nil {
		return m.BuffersBytes
	}
	return 0
}

func (m *MemoryStatistic) GetFreeBytes() uint64 {
	if m != nil {
		return m.FreeBytes
	}
	return 0
}

func (m *MemoryStatistic) GetWritebackBytes() uint64 {
	if m != nil {
		return m.WritebackBytes
	}
	return 0
}

func (m *MemoryStatistic) GetDirtyBytes() uint64 {
	if m != nil {
		return m.DirtyBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSlabBytes() uint64 {
	if m != nil {
		return m.SlabBytes
	}
	return 0
}

func (m *MemoryStatistic) GetMappedBytes() uint64 {
	if m != nil {
		return m.MappedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetPageTablesBytes() uint64 {
	if m != nil {
		return m.PageTablesBytes
	}
	return 0
}

func (m *MemoryStatistic) GetActiveBytes() uint64 {
	if m != nil {
		return m.ActiveBytes
	}
	return 0
}

func (m *MemoryStatistic) GetInactiveBytes() uint64 {
	if m != nil {
		return m.InactiveBytes
	}
	return 0
}

func (m *MemoryStatistic) GetAvailableBytes() uint64 {
	if m != nil {
		return m.AvailableBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSwapUsedBytes() uint64 {
	if m != nil {
		return m.SwapUsedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSwapTotalBytes() uint64 {
	if m != nil {
		return m.SwapTotalBytes
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesSizeBytes() uint64 {
	if m != nil {
		return m.HugePagesSizeBytes
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesFree() uint64 {
	if m != nil {
		return m.HugePagesFree
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesTotal() uint64 {
	if m != nil {
		return m.HugePagesTotal
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesReserved() uint64 {
	if m != nil {
		return m.HugePagesReserved
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesSurplus() uint64 {
	if m != nil {
		return m.HugePagesSurplus
	}
	return 0
}

func (m *MemoryStatistic) GetApplicationBytes() uint64 {
	if m != nil {
		return m.ApplicationBytes
	}
	return 0
}

type CPUInformation struct {
	Model             string  `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	CacheSizeBytes    int32   `protobuf:"varint,2,opt,name=cache_size_bytes,json=cacheSizeBytes" json:"cache_size_bytes,omitempty"`
	SpeedMhz          float64 `protobuf:"fixed64,3,opt,name=speed_mhz,json=speedMhz" json:"speed_mhz,omitempty"`
	SocketCount       int32   `protobuf:"varint,4,opt,name=socket_count,json=socketCount" json:"socket_count,omitempty"`
	PhysicalCoreCount int32   `protobuf:"varint,5,opt,name=physical_core_count,json=physicalCoreCount" json:"physical_core_count,omitempty"`
	LogicalCoreCount  int32   `protobuf:"varint,6,opt,name=logical_core_count,json=logicalCoreCount" json:"logical_core_count,omitempty"`
}

func (m *CPUInformation) Reset()                    { *m = CPUInformation{} }
func (m *CPUInformation) String() string            { return proto.CompactTextString(m) }
func (*CPUInformation) ProtoMessage()               {}
func (*CPUInformation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{16} }

func (m *CPUInformation) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CPUInformation) GetCacheSizeBytes() int32 {
	if m != nil {
		return m.CacheSizeBytes
	}
	return 0
}

func (m *CPUInformation) GetSpeedMhz() float64 {
	if m != nil {
		return m.SpeedMhz
	}
	return 0
}

func (m *CPUInformation) GetSocketCount() int32 {
	if m != nil {
		return m.SocketCount
	}
	return 0
}

func (m *CPUInformation) GetPhysicalCoreCount() int32 {
	if m != nil {
		return m.PhysicalCoreCount
	}
	return 0
}

func (m *CPUInformation) GetLogicalCoreCount() int32 {
	if m != nil {
		return m.LogicalCoreCount
	}
	return 0
}

type CPUReference struct {
	CoreId string `protobuf:"bytes,1,opt,name=core_id,json=coreId" json:"core_id,omitempty"`
}

func (m *CPUReference) Reset()                    { *m = CPUReference{} }
func (m *CPUReference) String() string            { return proto.CompactTextString(m) }
func (*CPUReference) ProtoMessage()               {}
func (*CPUReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{17} }

func (m *CPUReference) GetCoreId() string {
	if m != nil {
		return m.CoreId
	}
	return ""
}

type CPUStatistic struct {
	CpuIdx           int32   `protobuf:"varint,1,opt,name=cpu_idx,json=cpuIdx" json:"cpu_idx,omitempty"`
	UserPercent      float64 `protobuf:"fixed64,2,opt,name=user_percent,json=userPercent" json:"user_percent,omitempty"`
	SystemPercent    float64 `protobuf:"fixed64,3,opt,name=system_percent,json=systemPercent" json:"system_percent,omitempty"`
	IdlePercent      float64 `protobuf:"fixed64,4,opt,name=idle_percent,json=idlePercent" json:"idle_percent,omitempty"`
	NicePercent      float64 `protobuf:"fixed64,5,opt,name=nice_percent,json=nicePercent" json:"nice_percent,omitempty"`
	IowaitPercent    float64 `protobuf:"fixed64,6,opt,name=iowait_percent,json=iowaitPercent" json:"iowait_percent,omitempty"`
	IrqPercent       float64 `protobuf:"fixed64,7,opt,name=irq_percent,json=irqPercent" json:"irq_percent,omitempty"`
	SoftIrqPercent   float64 `protobuf:"fixed64,8,opt,name=soft_irq_percent,json=softIrqPercent" json:"soft_irq_percent,omitempty"`
	StealPercent     float64 `protobuf:"fixed64,9,opt,name=steal_percent,json=stealPercent" json:"steal_percent,omitempty"`
	GuestPercent     float64 `protobuf:"fixed64,10,opt,name=guest_percent,json=guestPercent" json:"guest_percent,omitempty"`
	GuestNicePercent float64 `protobuf:"fixed64,11,opt,name=guest_nice_percent,json=guestNicePercent" json:"guest_nice_percent,omitempty"`
}

func (m *CPUStatistic) Reset()                    { *m = CPUStatistic{} }
func (m *CPUStatistic) String() string            { return proto.CompactTextString(m) }
func (*CPUStatistic) ProtoMessage()               {}
func (*CPUStatistic) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{18} }

func (m *CPUStatistic) GetCpuIdx() int32 {
	if m != nil {
		return m.CpuIdx
	}
	return 0
}

func (m *CPUStatistic) GetUserPercent() float64 {
	if m != nil {
		return m.UserPercent
	}
	return 0
}

func (m *CPUStatistic) GetSystemPercent() float64 {
	if m != nil {
		return m.SystemPercent
	}
	return 0
}

func (m *CPUStatistic) GetIdlePercent() float64 {
	if m != nil {
		return m.IdlePercent
	}
	return 0
}

func (m *CPUStatistic) GetNicePercent() float64 {
	if m != nil {
		return m.NicePercent
	}
	return 0
}

func (m *CPUStatistic) GetIowaitPercent() float64 {
	if m != nil {
		return m.IowaitPercent
	}
	return 0
}

func (m *CPUStatistic) GetIrqPercent() float64 {
	if m != nil {
		return m.IrqPercent
	}
	return 0
}

func (m *CPUStatistic) GetSoftIrqPercent() float64 {
	if m != nil {
		return m.SoftIrqPercent
	}
	return 0
}

func (m *CPUStatistic) GetStealPercent() float64 {
	if m != nil {
		return m.StealPercent
	}
	return 0
}

func (m *CPUStatistic) GetGuestPercent() float64 {
	if m != nil {
		return m.GuestPercent
	}
	return 0
}

func (m *CPUStatistic) GetGuestNicePercent() float64 {
	if m != nil {
		return m.GuestNicePercent
	}
	return 0
}

type NetworkReference struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *NetworkReference) Reset()                    { *m = NetworkReference{} }
func (m *NetworkReference) String() string            { return proto.CompactTextString(m) }
func (*NetworkReference) ProtoMessage()               {}
func (*NetworkReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{19} }

func (m *NetworkReference) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type NetworkStatistic struct {
	NetworkIdx                       int32  `protobuf:"varint,1,opt,name=network_idx,json=networkIdx" json:"network_idx,omitempty"`
	TransmitThroughputBytesPerSecond uint64 `protobuf:"varint,2,opt,name=transmit_throughput_bytes_per_second,json=transmitThroughputBytesPerSecond" json:"transmit_throughput_bytes_per_second,omitempty"`
	ReceiveThroughputBytesPerSecond  uint64 `protobuf:"varint,3,opt,name=receive_throughput_bytes_per_second,json=receiveThroughputBytesPerSecond" json:"receive_throughput_bytes_per_second,omitempty"`
}

func (m *NetworkStatistic) Reset()                    { *m = NetworkStatistic{} }
func (m *NetworkStatistic) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatistic) ProtoMessage()               {}
func (*NetworkStatistic) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{20} }

func (m *NetworkStatistic) GetNetworkIdx() int32 {
	if m != nil {
		return m.NetworkIdx
	}
	return 0
}

func (m *NetworkStatistic) GetTransmitThroughputBytesPerSecond() uint64 {
	if m != nil {
		return m.TransmitThroughputBytesPerSecond
	}
	return 0
}

func (m *NetworkStatistic) GetReceiveThroughputBytesPerSecond() uint64 {
	if m != nil {
		return m.ReceiveThroughputBytesPerSecond
	}
	return 0
}

type DiskReference struct {
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
}

func (m *DiskReference) Reset()                    { *m = DiskReference{} }
func (m *DiskReference) String() string            { return proto.CompactTextString(m) }
func (*DiskReference) ProtoMessage()               {}
func (*DiskReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{21} }

func (m *DiskReference) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type DiskInformation struct {
	DiskIdx         int32  `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	DiskType        string `protobuf:"bytes,2,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	Scheduler       string `protobuf:"bytes,3,opt,name=scheduler" json:"scheduler,omitempty"`
	ProvisionedIops uint32 `protobuf:"varint,4,opt,name=provisioned_iops,json=provisionedIops" json:"provisioned_iops,omitempty"`
	Encrypted       bool   `protobuf:"varint,5,opt,name=encrypted" json:"encrypted,omitempty"`
}

func (m *DiskInformation) Reset()                    { *m = DiskInformation{} }
func (m *DiskInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskInformation) ProtoMessage()               {}
func (*DiskInformation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{22} }

func (m *DiskInformation) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskInformation) GetDiskType() string {
	if m != nil {
		return m.DiskType
	}
	return ""
}

func (m *DiskInformation) GetScheduler() string {
	if m != nil {
		return m.Scheduler
	}
	return ""
}

func (m *DiskInformation) GetProvisionedIops() uint32 {
	if m != nil {
		return m.ProvisionedIops
	}
	return 0
}

func (m *DiskInformation) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

type DiskStatistic struct {
	DiskIdx                  int32   `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	ReadOperationsPerSecond  float64 `protobuf:"fixed64,2,opt,name=read_operations_per_second,json=readOperationsPerSecond" json:"read_operations_per_second,omitempty"`
	ReadsMergedPerSecond     float64 `protobuf:"fixed64,3,opt,name=reads_merged_per_second,json=readsMergedPerSecond" json:"reads_merged_per_second,omitempty"`
	BytesReadPerSecond       float64 `protobuf:"fixed64,4,opt,name=bytes_read_per_second,json=bytesReadPerSecond" json:"bytes_read_per_second,omitempty"`
	AvgReadLatency           float64 `protobuf:"fixed64,5,opt,name=avg_read_latency,json=avgReadLatency" json:"avg_read_latency,omitempty"`
	WriteOperationsPerSecond float64 `protobuf:"fixed64,6,opt,name=write_operations_per_second,json=writeOperationsPerSecond" json:"write_operations_per_second,omitempty"`
	WritesMergedPerSecond    float64 `protobuf:"fixed64,7,opt,name=writes_merged_per_second,json=writesMergedPerSecond" json:"writes_merged_per_second,omitempty"`
	BytesWrittenPerSecond    float64 `protobuf:"fixed64,8,opt,name=bytes_written_per_second,json=bytesWrittenPerSecond" json:"bytes_written_per_second,omitempty"`
	AvgWriteLatency          float64 `protobuf:"fixed64,9,opt,name=avg_write_latency,json=avgWriteLatency" json:"avg_write_latency,omitempty"`
	AvgQueueSize             int32   `protobuf:"varint,10,opt,name=avg_queue_size,json=avgQueueSize" json:"avg_queue_size,omitempty"`
	UtilizationPercent       float64 `protobuf:"fixed64,12,opt,name=utilization_percent,json=utilizationPercent" json:"utilization_percent,omitempty"`
}

func (m *DiskStatistic) Reset()                    { *m = DiskStatistic{} }
func (m *DiskStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskStatistic) ProtoMessage()               {}
func (*DiskStatistic) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{23} }

func (m *DiskStatistic) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskStatistic) GetReadOperationsPerSecond() float64 {
	if m != nil {
		return m.ReadOperationsPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetReadsMergedPerSecond() float64 {
	if m != nil {
		return m.ReadsMergedPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetBytesReadPerSecond() float64 {
	if m != nil {
		return m.BytesReadPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetAvgReadLatency() float64 {
	if m != nil {
		return m.AvgReadLatency
	}
	return 0
}

func (m *DiskStatistic) GetWriteOperationsPerSecond() float64 {
	if m != nil {
		return m.WriteOperationsPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetWritesMergedPerSecond() float64 {
	if m != nil {
		return m.WritesMergedPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetBytesWrittenPerSecond() float64 {
	if m != nil {
		return m.BytesWrittenPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetAvgWriteLatency() float64 {
	if m != nil {
		return m.AvgWriteLatency
	}
	return 0
}

func (m *DiskStatistic) GetAvgQueueSize() int32 {
	if m != nil {
		return m.AvgQueueSize
	}
	return 0
}

func (m *DiskStatistic) GetUtilizationPercent() float64 {
	if m != nil {
		return m.UtilizationPercent
	}
	return 0
}

type DiskPartitionReference struct {
	Mountpoint string `protobuf:"bytes,1,opt,name=mountpoint" json:"mountpoint,omitempty"`
}

func (m *DiskPartitionReference) Reset()                    { *m = DiskPartitionReference{} }
func (m *DiskPartitionReference) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionReference) ProtoMessage()               {}
func (*DiskPartitionReference) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{24} }

func (m *DiskPartitionReference) GetMountpoint() string {
	if m != nil {
		return m.Mountpoint
	}
	return ""
}

type DiskPartitionInformation struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	DiskIdx          int32  `protobuf:"varint,2,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	FilesystemType   string `protobuf:"bytes,3,opt,name=filesystem_type,json=filesystemType" json:"filesystem_type,omitempty"`
	FilesystemOpts   string `protobuf:"bytes,4,opt,name=filesystem_opts,json=filesystemOpts" json:"filesystem_opts,omitempty"`
	PartitionName    string `protobuf:"bytes,5,opt,name=partition_name,json=partitionName" json:"partition_name,omitempty"`
}

func (m *DiskPartitionInformation) Reset()                    { *m = DiskPartitionInformation{} }
func (m *DiskPartitionInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionInformation) ProtoMessage()               {}
func (*DiskPartitionInformation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{25} }

func (m *DiskPartitionInformation) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *DiskPartitionInformation) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskPartitionInformation) GetFilesystemType() string {
	if m != nil {
		return m.FilesystemType
	}
	return ""
}

func (m *DiskPartitionInformation) GetFilesystemOpts() string {
	if m != nil {
		return m.FilesystemOpts
	}
	return ""
}

func (m *DiskPartitionInformation) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

type DiskPartitionStatistic struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	UsedBytes        uint64 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes" json:"used_bytes,omitempty"`
	TotalBytes       uint64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
}

func (m *DiskPartitionStatistic) Reset()                    { *m = DiskPartitionStatistic{} }
func (m *DiskPartitionStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionStatistic) ProtoMessage()               {}
func (*DiskPartitionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{26} }

func (m *DiskPartitionStatistic) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *DiskPartitionStatistic) GetUsedBytes() uint64 {
	if m != nil {
		return m.UsedBytes
	}
	return 0
}

func (m *DiskPartitionStatistic) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func init() {
	proto.RegisterType((*NullString)(nil), "pganalyze.collector.NullString")
	proto.RegisterType((*NullTimestamp)(nil), "pganalyze.collector.NullTimestamp")
	proto.RegisterType((*PostgresVersion)(nil), "pganalyze.collector.PostgresVersion")
	proto.RegisterType((*RoleReference)(nil), "pganalyze.collector.RoleReference")
	proto.RegisterType((*DatabaseReference)(nil), "pganalyze.collector.DatabaseReference")
	proto.RegisterType((*RelationReference)(nil), "pganalyze.collector.RelationReference")
	proto.RegisterType((*IndexReference)(nil), "pganalyze.collector.IndexReference")
	proto.RegisterType((*FunctionReference)(nil), "pganalyze.collector.FunctionReference")
	proto.RegisterType((*QueryReference)(nil), "pganalyze.collector.QueryReference")
	proto.RegisterType((*QueryInformation)(nil), "pganalyze.collector.QueryInformation")
	proto.RegisterType((*System)(nil), "pganalyze.collector.System")
	proto.RegisterType((*SystemInformation)(nil), "pganalyze.collector.SystemInformation")
	proto.RegisterType((*SystemInformationSelfHosted)(nil), "pganalyze.collector.SystemInformationSelfHosted")
	proto.RegisterType((*SystemInformationAmazonRDS)(nil), "pganalyze.collector.SystemInformationAmazonRDS")
	proto.RegisterType((*SchedulerStatistic)(nil), "pganalyze.collector.SchedulerStatistic")
	proto.RegisterType((*MemoryStatistic)(nil), "pganalyze.collector.MemoryStatistic")
	proto.RegisterType((*CPUInformation)(nil), "pganalyze.collector.CPUInformation")
	proto.RegisterType((*CPUReference)(nil), "pganalyze.collector.CPUReference")
	proto.RegisterType((*CPUStatistic)(nil), "pganalyze.collector.CPUStatistic")
	proto.RegisterType((*NetworkReference)(nil), "pganalyze.collector.NetworkReference")
	proto.RegisterType((*NetworkStatistic)(nil), "pganalyze.collector.NetworkStatistic")
	proto.RegisterType((*DiskReference)(nil), "pganalyze.collector.DiskReference")
	proto.RegisterType((*DiskInformation)(nil), "pganalyze.collector.DiskInformation")
	proto.RegisterType((*DiskStatistic)(nil), "pganalyze.collector.DiskStatistic")
	proto.RegisterType((*DiskPartitionReference)(nil), "pganalyze.collector.DiskPartitionReference")
	proto.RegisterType((*DiskPartitionInformation)(nil), "pganalyze.collector.DiskPartitionInformation")
	proto.RegisterType((*DiskPartitionStatistic)(nil), "pganalyze.collector.DiskPartitionStatistic")
	proto.RegisterEnum("pganalyze.collector.SystemInformation_SystemType", SystemInformation_SystemType_name, SystemInformation_SystemType_value)
}

func init() { proto.RegisterFile("shared.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 2787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xdb, 0x72, 0x1b, 0xc7,
	0xd1, 0x36, 0xc4, 0x13, 0xd0, 0x20, 0x4e, 0x2b, 0x52, 0x5a, 0x51, 0x92, 0x45, 0x41, 0xb2, 0x45,
	0x1f, 0x7e, 0xca, 0x92, 0x7f, 0xff, 0xb6, 0xcb, 0x7f, 0x0e, 0xb4, 0x28, 0x95, 0x54, 0x16, 0x25,
	0x7a, 0x41, 0xc5, 0x89, 0x6f, 0xb6, 0x86, 0xbb, 0x03, 0x70, 0xa2, 0xc5, 0xee, 0x6a, 0x66, 0x96,
	0x22, 0x58, 0xb9, 0xce, 0x03, 0xe4, 0x32, 0x77, 0xa9, 0x4a, 0xe5, 0xd6, 0x79, 0x95, 0xdc, 0xe7,
	0x19, 0xf2, 0x0c, 0xa9, 0xee, 0xd9, 0xd9, 0x5d, 0x80, 0xa0, 0x24, 0x57, 0x25, 0x77, 0x98, 0xaf,
	0xbf, 0xee, 0xe9, 0xee, 0xd9, 0xe9, 0xe9, 0x19, 0xc0, 0xaa, 0x3a, 0x62, 0x92, 0x87, 0xdb, 0xa9,
	0x4c, 0x74, 0xe2, 0x5c, 0x4c, 0x47, 0x2c, 0x66, 0xd1, 0xe4, 0x94, 0x6f, 0x07, 0x49, 0x14, 0xf1,
	0x40, 0x27, 0x72, 0xe3, 0xc6, 0x28, 0x49, 0x46, 0x11, 0xbf, 0x4b, 0x94, 0xc3, 0x6c, 0x78, 0x57,
	0x8b, 0x31, 0x57, 0x9a, 0x8d, 0x53, 0xa3, 0xd5, 0xff, 0x0a, 0xe0, 0x59, 0x16, 0x45, 0x03, 0x2d,
	0x45, 0x3c, 0x72, 0xd6, 0x60, 0xe9, 0x98, 0x45, 0x22, 0x74, 0x6b, 0x9b, 0xb5, 0xad, 0xba, 0x67,
	0x06, 0x39, 0x9a, 0x71, 0xf7, 0xc2, 0x66, 0x6d, 0xab, 0xe1, 0x99, 0x41, 0xff, 0x07, 0x68, 0xa1,
	0xe6, 0x81, 0x35, 0x78, 0x8e, 0xf2, 0x67, 0x55, 0xe5, 0xe6, 0xfd, 0x8d, 0x6d, 0xe3, 0xd1, 0xb6,
	0xf5, 0x68, 0xbb, 0x30, 0x60, 0x0d, 0xbf, 0x80, 0xce, 0x7e, 0xa2, 0xf4, 0x48, 0x72, 0xf5, 0x1b,
	0x2e, 0x95, 0x48, 0x62, 0xc7, 0x81, 0xc5, 0x61, 0x16, 0x45, 0x64, 0xb9, 0xe1, 0xd1, 0x6f, 0x9c,
	0x4e, 0x1d, 0x25, 0x52, 0x5b, 0xaf, 0x68, 0xe0, 0xb8, 0xb0, 0x12, 0x67, 0x63, 0x2e, 0x45, 0xe0,
	0x2e, 0x6c, 0xd6, 0xb6, 0x16, 0x3c, 0x3b, 0xec, 0xdf, 0x82, 0x96, 0x97, 0x44, 0xdc, 0xe3, 0x43,
	0x2e, 0x79, 0x1c, 0x70, 0x34, 0x1a, 0xb3, 0x31, 0xb7, 0x46, 0xf1, 0x77, 0xff, 0x0e, 0xf4, 0x76,
	0x99, 0x66, 0x87, 0x4c, 0xbd, 0x85, 0xf8, 0x07, 0xe8, 0x79, 0x3c, 0x62, 0x5a, 0x24, 0x71, 0x49,
	0xbc, 0x09, 0xab, 0x61, 0xae, 0xed, 0x8b, 0xf0, 0x84, 0x14, 0x96, 0xbc, 0xa6, 0xc5, 0x9e, 0x84,
	0x27, 0xce, 0x0d, 0x68, 0xaa, 0xe0, 0x88, 0x8f, 0x99, 0x4f, 0x26, 0x8d, 0xef, 0x60, 0xa0, 0x67,
	0x6c, 0xcc, 0x9d, 0x5b, 0xd0, 0x92, 0xb9, 0x61, 0x43, 0x59, 0x20, 0xca, 0xaa, 0x05, 0x91, 0xd4,
	0x57, 0xd0, 0x7e, 0x12, 0x87, 0xfc, 0xe4, 0x3f, 0x3b, 0xf5, 0x75, 0x00, 0x81, 0x56, 0xab, 0xf3,
	0x36, 0x08, 0xa1, 0x49, 0xff, 0x5c, 0x83, 0xde, 0xa3, 0x2c, 0x0e, 0xfe, 0x2b, 0x31, 0x0f, 0x73,
	0xc3, 0x53, 0x31, 0x5b, 0x90, 0x48, 0xd7, 0xa0, 0xc1, 0xe4, 0x28, 0x1b, 0xf3, 0x58, 0x2b, 0x77,
	0xd1, 0x38, 0x57, 0x00, 0xfd, 0x14, 0xda, 0xdf, 0x67, 0x5c, 0x4e, 0x7e, 0x96, 0x63, 0x57, 0xa0,
	0x2e, 0x93, 0xc8, 0x88, 0x2f, 0x90, 0x78, 0x05, 0xc7, 0x28, 0xda, 0x84, 0xe6, 0x50, 0xc4, 0x23,
	0x2e, 0x53, 0x29, 0x62, 0x4d, 0x0e, 0xad, 0x7a, 0x55, 0xa8, 0xff, 0x1a, 0xba, 0x34, 0xe3, 0x93,
	0x78, 0x98, 0xc8, 0x31, 0xad, 0x8d, 0x73, 0x15, 0x1a, 0xaf, 0x10, 0xab, 0x4c, 0x58, 0x27, 0x00,
	0x4d, 0x7e, 0x04, 0xdd, 0x18, 0x99, 0x91, 0x38, 0xe5, 0xa1, 0x4f, 0x70, 0x9e, 0x8b, 0x4e, 0x89,
	0x93, 0xc9, 0xaa, 0x1d, 0xe5, 0x2e, 0x6c, 0x2e, 0x6c, 0x2d, 0x14, 0x76, 0x54, 0xff, 0xa7, 0x26,
	0x2c, 0x0f, 0x26, 0x4a, 0xf3, 0xb1, 0xf3, 0x02, 0x1c, 0x45, 0xbf, 0x7c, 0x51, 0x7a, 0x41, 0x13,
	0x37, 0xef, 0x7f, 0xb8, 0x3d, 0xa7, 0x20, 0x6c, 0x1b, 0xc5, 0x8a, 0xcf, 0x5e, 0x4f, 0xcd, 0x42,
	0x38, 0xbd, 0x35, 0x1b, 0xe6, 0x2e, 0xd6, 0x73, 0x56, 0x88, 0x79, 0xcd, 0x85, 0x2a, 0x48, 0x52,
	0xbb, 0x56, 0x4d, 0x83, 0x0d, 0x10, 0x72, 0x7e, 0x0b, 0x17, 0x71, 0x75, 0xc3, 0x2c, 0xe2, 0xd2,
	0x57, 0x9a, 0x69, 0xa1, 0xb4, 0x08, 0x5c, 0x20, 0xbf, 0xee, 0xcc, 0xf7, 0xcb, 0xf2, 0x07, 0x96,
	0xee, 0x39, 0xea, 0x0c, 0xe6, 0x3c, 0x87, 0xee, 0x98, 0x8f, 0x13, 0x39, 0xa9, 0x98, 0x6d, 0x92,
	0xd9, 0xdb, 0x73, 0xcd, 0xee, 0x11, 0xb9, 0xb4, 0xd9, 0x19, 0x4f, 0x03, 0xce, 0x53, 0xe8, 0x04,
	0x69, 0x36, 0x95, 0xbe, 0x55, 0xb2, 0x77, 0x6b, 0xae, 0xbd, 0x07, 0xfb, 0x2f, 0xaa, 0xb9, 0x6b,
	0x07, 0x69, 0x56, 0x4d, 0xdc, 0x63, 0x40, 0xc4, 0x97, 0xf6, 0x23, 0x54, 0x6e, 0x6b, 0x73, 0x61,
	0xab, 0x79, 0xff, 0xe6, 0x79, 0xc6, 0x8a, 0xcf, 0xd5, 0x6b, 0x05, 0x69, 0x56, 0x8c, 0x94, 0xb5,
	0x54, 0x44, 0xa9, 0xdc, 0xf6, 0x9b, 0x2d, 0x95, 0x31, 0xa2, 0xa5, 0x62, 0xa4, 0x9c, 0x03, 0x70,
	0x62, 0xae, 0x5f, 0x27, 0xf2, 0x65, 0xd5, 0xaf, 0x0e, 0x59, 0xfb, 0x60, 0xae, 0xb5, 0x67, 0x86,
	0x5e, 0xfa, 0xd6, 0x8b, 0x67, 0x90, 0x29, 0xab, 0x15, 0x1f, 0xbb, 0x6f, 0xb7, 0x5a, 0xfa, 0x69,
	0xad, 0x56, 0x7c, 0xfd, 0x0e, 0x3a, 0xa1, 0x50, 0x53, 0x8e, 0xf6, 0xc8, 0x64, 0x7f, 0xae, 0xc9,
	0x5d, 0xa1, 0x2a, 0x5e, 0xb6, 0xc3, 0xea, 0x50, 0x39, 0xdf, 0x43, 0x8f, 0x8c, 0x55, 0xd6, 0x56,
	0xb9, 0x0e, 0x99, 0xbb, 0x7d, 0xae, 0xb9, 0xea, 0xea, 0x76, 0xc3, 0x69, 0xa0, 0xf4, 0xaf, 0x12,
	0xf2, 0xc5, 0xb7, 0xf8, 0x57, 0xc6, 0x4b, 0xfe, 0x55, 0x82, 0x1d, 0xc1, 0x15, 0x32, 0x96, 0x32,
	0xa9, 0x05, 0xd5, 0xbe, 0x4a, 0xd8, 0x6b, 0x64, 0xf6, 0x93, 0x73, 0xcd, 0xee, 0x5b, 0xa5, 0x32,
	0xfe, 0xcb, 0xe1, 0x5c, 0x5c, 0x39, 0x63, 0xb8, 0x3a, 0x33, 0xd1, 0x54, 0x4a, 0xd6, 0x69, 0xaa,
	0xff, 0x79, 0xfb, 0x54, 0xd5, 0xdc, 0x5c, 0x09, 0xcf, 0x91, 0xcc, 0x8b, 0xab, 0x92, 0xae, 0x4b,
	0xef, 0x1a, 0x57, 0x99, 0xb7, 0xe9, 0xb8, 0x2a, 0x09, 0x7c, 0x0c, 0x37, 0xb1, 0x9a, 0xfb, 0xa1,
	0x90, 0x64, 0x60, 0xe2, 0xcf, 0x86, 0x19, 0x9e, 0xb8, 0xef, 0x53, 0x15, 0xbe, 0x8e, 0xc4, 0x5d,
	0xcb, 0x9b, 0x8e, 0x2a, 0x3c, 0x71, 0xbe, 0x80, 0xcb, 0x27, 0x51, 0x32, 0x9a, 0xa7, 0x7f, 0x83,
	0xf4, 0xd7, 0x50, 0x7c, 0x46, 0xed, 0x43, 0xe8, 0x90, 0x5a, 0xa6, 0x78, 0xe8, 0x1f, 0x4e, 0x34,
	0x57, 0xee, 0xe6, 0x66, 0x6d, 0x6b, 0xd1, 0x6b, 0x21, 0xfc, 0x42, 0xf1, 0xf0, 0x5b, 0x04, 0xfb,
	0x7f, 0x5a, 0x80, 0xde, 0x99, 0xc2, 0xeb, 0x3c, 0x84, 0x45, 0x3d, 0x49, 0x4d, 0x5b, 0xd1, 0xbe,
	0x7f, 0xef, 0xdd, 0xca, 0x75, 0x8e, 0x1c, 0x4c, 0x52, 0xee, 0x91, 0xba, 0x33, 0x80, 0xa6, 0xe2,
	0xd1, 0xd0, 0x3f, 0x4a, 0x94, 0xe6, 0x61, 0xde, 0x66, 0x7d, 0xf6, 0x6e, 0xd6, 0x06, 0x3c, 0x1a,
	0x3e, 0x26, 0xbd, 0xc7, 0xef, 0x79, 0xa0, 0x8a, 0x91, 0xb3, 0x0f, 0xc0, 0xc6, 0xec, 0x14, 0xbf,
	0x49, 0x3a, 0x81, 0xd0, 0xe6, 0xdd, 0x77, 0xb3, 0xb9, 0x43, 0x7a, 0xde, 0xee, 0xe0, 0xf1, 0x7b,
	0x5e, 0xc3, 0x18, 0xf1, 0x42, 0xe5, 0x7c, 0x09, 0x8d, 0xc3, 0x24, 0xd1, 0x3e, 0x36, 0xa0, 0xf9,
	0x49, 0xf0, 0xa6, 0x5e, 0xb0, 0x8e, 0x64, 0x1c, 0xf6, 0x9f, 0x01, 0x94, 0x31, 0x3b, 0x97, 0xc0,
	0x19, 0x3c, 0x7c, 0xfa, 0xc8, 0x7f, 0xfc, 0x7c, 0x70, 0xf0, 0x70, 0xd7, 0x1f, 0xfc, 0x6e, 0x70,
	0xf0, 0x70, 0xaf, 0xfb, 0x9e, 0xb3, 0x0e, 0xbd, 0x9d, 0xbd, 0x9d, 0x1f, 0x9f, 0x3f, 0xf3, 0xbd,
	0xdd, 0x81, 0x85, 0x6b, 0x4e, 0x0f, 0x5a, 0x8f, 0x1f, 0x7a, 0xcf, 0xbf, 0x7b, 0x61, 0xa1, 0x0b,
	0xdf, 0x2e, 0xc3, 0x22, 0x7e, 0xfe, 0xb8, 0x28, 0x57, 0xdf, 0x90, 0x10, 0x67, 0x03, 0xea, 0x98,
	0xd2, 0x4a, 0xe7, 0x57, 0x8c, 0x9d, 0x3e, 0xac, 0x32, 0x19, 0x1c, 0x09, 0xcd, 0x03, 0x9d, 0x49,
	0xdb, 0xd2, 0x4c, 0x61, 0x78, 0xdc, 0x27, 0x29, 0x97, 0x4c, 0x8b, 0x78, 0xe4, 0x9b, 0xd3, 0x31,
	0x3f, 0x2b, 0x3b, 0x05, 0x9e, 0x1f, 0xe3, 0x1b, 0x50, 0x4f, 0x23, 0xa6, 0xd1, 0x8b, 0xbc, 0xb3,
	0x29, 0xc6, 0xce, 0x1d, 0xe8, 0xd8, 0xdf, 0xfe, 0x90, 0x8d, 0x45, 0x34, 0x71, 0x97, 0x88, 0xd2,
	0xb6, 0xf0, 0x23, 0x42, 0x71, 0xbe, 0x82, 0x78, 0x6c, 0xfa, 0x66, 0x77, 0xd9, 0xcc, 0x67, 0x71,
	0xdb, 0x4e, 0x7f, 0x0e, 0xeb, 0xc7, 0x42, 0xea, 0x0c, 0x5b, 0x0e, 0xd3, 0x69, 0xe6, 0xfe, 0xad,
	0x10, 0x7f, 0x6d, 0x5a, 0x98, 0x3b, 0xf9, 0x01, 0xb4, 0x5f, 0x72, 0x19, 0xf3, 0xa8, 0xb0, 0x5e,
	0x27, 0x76, 0xcb, 0xa0, 0xd6, 0xf6, 0xff, 0xc3, 0x46, 0xd1, 0x76, 0x15, 0x4d, 0x04, 0x8f, 0xb5,
	0x18, 0x0a, 0x2e, 0xdd, 0x06, 0xa9, 0xb8, 0x96, 0x91, 0xe7, 0xbf, 0x90, 0xf7, 0xff, 0x5a, 0x87,
	0x8d, 0xf3, 0xbf, 0x28, 0xe7, 0x12, 0x2c, 0x4b, 0x3e, 0xb2, 0x3d, 0x4e, 0xc3, 0xcb, 0x47, 0xe8,
	0x9b, 0x88, 0x95, 0x66, 0x71, 0xc0, 0xfd, 0x20, 0x62, 0x4a, 0xe5, 0x2b, 0xd2, 0xb2, 0xe8, 0x03,
	0x04, 0xb1, 0x11, 0x2d, 0x68, 0x22, 0xcc, 0x57, 0x03, 0x2c, 0xf4, 0x24, 0x44, 0xfb, 0x58, 0xab,
	0x32, 0xdb, 0x60, 0xe6, 0x23, 0xe7, 0x13, 0xe8, 0xb1, 0x63, 0x26, 0x22, 0x76, 0x28, 0x22, 0xa1,
	0x27, 0xfe, 0x69, 0x12, 0xf3, 0x7c, 0x19, 0xba, 0x55, 0xc1, 0x8f, 0x49, 0xcc, 0x9d, 0xbb, 0x70,
	0x31, 0xcd, 0x0e, 0x23, 0x11, 0x44, 0x13, 0x9f, 0x05, 0x01, 0x57, 0x4a, 0x1c, 0x46, 0x9c, 0xd6,
	0xa2, 0xee, 0x39, 0x56, 0xb4, 0x53, 0x48, 0xb0, 0x0d, 0x1d, 0x67, 0x91, 0x16, 0x3e, 0x3b, 0xa5,
	0x15, 0xa8, 0x7b, 0x2b, 0x34, 0xde, 0x39, 0x75, 0x7e, 0x09, 0x57, 0x15, 0x0f, 0x92, 0x38, 0x64,
	0x72, 0xe2, 0x9f, 0x75, 0xc1, 0xac, 0xc0, 0x95, 0x82, 0xb2, 0x33, 0xeb, 0xcb, 0x07, 0xd0, 0x0e,
	0x98, 0x1f, 0x70, 0x89, 0xf9, 0x0d, 0x98, 0xe6, 0xf9, 0x0a, 0xb4, 0x02, 0xf6, 0xa0, 0x04, 0x9d,
	0x6f, 0x60, 0x83, 0x65, 0x3a, 0xf1, 0xc7, 0x22, 0x4e, 0xa4, 0x5d, 0x5f, 0x3f, 0x4b, 0x47, 0x92,
	0x85, 0x66, 0xb7, 0xd6, 0xbd, 0xcb, 0xc8, 0xd8, 0x43, 0x42, 0xbe, 0xd4, 0x2f, 0x8c, 0xb8, 0x54,
	0x66, 0xbf, 0x9f, 0xa3, 0xdc, 0xac, 0x28, 0x23, 0x61, 0x46, 0xf9, 0xd7, 0x70, 0x2d, 0xa5, 0x63,
	0x4f, 0xf2, 0xd0, 0x1f, 0x33, 0x11, 0x6b, 0x1e, 0xd3, 0xfa, 0xbc, 0x16, 0x71, 0x98, 0xbc, 0xa6,
	0x66, 0xac, 0xe1, 0x6d, 0x14, 0x9c, 0xbd, 0x92, 0xf2, 0x03, 0x31, 0x9c, 0xff, 0x83, 0xcb, 0xa5,
	0x85, 0x43, 0x16, 0xbc, 0xcc, 0x52, 0xab, 0xdc, 0x26, 0xe5, 0xf5, 0x42, 0xfc, 0x2d, 0x49, 0x73,
	0xbd, 0x7d, 0xb8, 0x14, 0x31, 0xcd, 0x95, 0xf6, 0x25, 0x57, 0x3a, 0x91, 0xec, 0x30, 0xe2, 0xa6,
	0x3a, 0xb5, 0xde, 0x5a, 0x9d, 0xd6, 0x8c, 0xa6, 0x57, 0x28, 0xa2, 0xc8, 0xf9, 0x15, 0x5c, 0xcb,
	0xe7, 0x97, 0x5c, 0xe3, 0x27, 0x9d, 0xc4, 0x7e, 0xca, 0xa5, 0x48, 0x42, 0x3f, 0x64, 0x13, 0xec,
	0xb9, 0xf0, 0x28, 0xb9, 0x62, 0x38, 0x9e, 0xa5, 0xec, 0x13, 0x63, 0x97, 0x4d, 0x14, 0xee, 0xf5,
	0x31, 0x53, 0x9a, 0x4b, 0x3c, 0x51, 0x24, 0x55, 0x9e, 0xae, 0xd9, 0xeb, 0x06, 0x7e, 0x91, 0xa3,
	0x78, 0xf0, 0x88, 0x58, 0x68, 0xc1, 0x22, 0x3f, 0x3c, 0x34, 0x57, 0xa6, 0x9e, 0xfd, 0xe0, 0x09,
	0xde, 0x3d, 0xa4, 0x3b, 0xd3, 0xd7, 0x00, 0x81, 0xe4, 0x4c, 0xf3, 0xd0, 0x67, 0xda, 0x75, 0xde,
	0x1a, 0x57, 0x23, 0x67, 0xef, 0x68, 0xfc, 0x8a, 0x79, 0x7c, 0x84, 0x79, 0x0e, 0xfd, 0x71, 0x12,
	0x0b, 0x9d, 0x48, 0x11, 0x8f, 0xdc, 0x8b, 0xe6, 0x2b, 0xb6, 0xa2, 0xbd, 0x42, 0xe2, 0xfc, 0x2f,
	0x5c, 0x4a, 0x99, 0x64, 0x63, 0x8e, 0xfe, 0xb3, 0x34, 0x8d, 0x4c, 0x8f, 0x9e, 0x29, 0x77, 0xcb,
	0x54, 0x95, 0x42, 0xba, 0x83, 0xc2, 0x81, 0xd9, 0x59, 0x53, 0x5a, 0xe9, 0x48, 0x29, 0x9f, 0xc7,
	0x98, 0xd0, 0xd0, 0xfd, 0x88, 0x66, 0x2a, 0xb5, 0xf6, 0x47, 0x4a, 0x3d, 0x34, 0x32, 0xbc, 0x8a,
	0x3a, 0x67, 0x6f, 0x0c, 0xce, 0xc7, 0xd0, 0x8b, 0x12, 0x16, 0xfa, 0xec, 0x98, 0x4b, 0x36, 0xe2,
	0xfe, 0xbd, 0xb1, 0x30, 0x95, 0xa2, 0xe6, 0x75, 0x50, 0xb0, 0x63, 0x70, 0x84, 0xcf, 0x70, 0xbf,
	0x40, 0xee, 0x85, 0x33, 0x5c, 0x84, 0x9d, 0x4f, 0xc1, 0x99, 0xb6, 0x4b, 0xe4, 0x05, 0x22, 0x77,
	0xab, 0x86, 0x11, 0xef, 0xff, 0x6d, 0x19, 0x3a, 0x33, 0xf7, 0x0e, 0xac, 0x3c, 0x3a, 0xd1, 0x2c,
	0xca, 0xbb, 0x84, 0x1a, 0x75, 0x09, 0x40, 0x10, 0xb5, 0x08, 0x78, 0xab, 0x0a, 0x18, 0x46, 0x94,
	0x33, 0x2e, 0x10, 0xa3, 0x69, 0x30, 0x43, 0xb9, 0x05, 0xad, 0xc3, 0x6c, 0x38, 0xe4, 0x52, 0xe5,
	0x9c, 0x05, 0xe2, 0xac, 0xe6, 0xa0, 0x21, 0x5d, 0x07, 0x18, 0x4a, 0xce, 0x73, 0xc6, 0x22, 0x31,
	0x1a, 0x88, 0x18, 0xf1, 0x1d, 0xe8, 0xbc, 0x96, 0x42, 0x73, 0xfc, 0x06, 0x73, 0xce, 0x12, 0x71,
	0xda, 0x05, 0x6c, 0x88, 0x37, 0xa0, 0x19, 0x0a, 0xa9, 0x27, 0x39, 0x69, 0xd9, 0x38, 0x4c, 0x50,
	0x31, 0x91, 0x8a, 0xd8, 0x61, 0x2e, 0x5f, 0x31, 0x13, 0x21, 0x52, 0xc4, 0x33, 0x66, 0x69, 0x5a,
	0xc4, 0x53, 0x37, 0xf1, 0x18, 0xcc, 0x50, 0x3e, 0x86, 0x5e, 0x8a, 0xd9, 0xd4, 0xb8, 0xa6, 0x36,
	0xa6, 0x06, 0xf1, 0x3a, 0x28, 0x38, 0x20, 0xbc, 0x30, 0xc7, 0x02, 0x2d, 0x8e, 0x6d, 0x60, 0x60,
	0xcc, 0x19, 0xcc, 0x50, 0xe8, 0x0c, 0x98, 0x22, 0x35, 0x4d, 0x2f, 0x66, 0xd1, 0x22, 0x03, 0x79,
	0x1d, 0x8d, 0x2c, 0x6f, 0xd5, 0x64, 0xa0, 0x80, 0x0d, 0xf1, 0x43, 0xe8, 0xa8, 0xd7, 0x2c, 0xad,
	0x36, 0x77, 0x2d, 0x63, 0x10, 0xe1, 0xa2, 0xb9, 0x73, 0xb6, 0xa0, 0x4b, 0xbc, 0xea, 0xfa, 0xb6,
	0x8d, 0x45, 0xc4, 0x0f, 0xca, 0x35, 0xbe, 0x07, 0xeb, 0x47, 0xd9, 0x88, 0xfb, 0x18, 0x9c, 0xf2,
	0x95, 0x38, 0xb5, 0x0e, 0xac, 0x11, 0xdd, 0x41, 0xe1, 0x3e, 0xca, 0x06, 0xe2, 0xb4, 0x74, 0xa2,
	0xa2, 0x82, 0xeb, 0xe8, 0xae, 0x1b, 0x27, 0x0a, 0xf2, 0x23, 0xc9, 0x39, 0x3a, 0x51, 0xe1, 0x91,
	0x2b, 0xee, 0x25, 0xe3, 0x44, 0x41, 0x24, 0x4f, 0x9c, 0x6d, 0xb8, 0x58, 0x61, 0x4a, 0xae, 0xb8,
	0x3c, 0xe6, 0xa1, 0x7b, 0x99, 0xc8, 0xbd, 0x82, 0xec, 0xe5, 0x02, 0xfc, 0xf6, 0xab, 0x4e, 0x67,
	0x32, 0x8d, 0x32, 0xe5, 0xba, 0x44, 0xef, 0x96, 0x1e, 0x1b, 0x9c, 0x0e, 0xca, 0x34, 0x8d, 0xf0,
	0x54, 0xc1, 0xea, 0x67, 0xc2, 0x7b, 0xdf, 0x90, 0x2b, 0x02, 0xd3, 0x16, 0xff, 0xab, 0x06, 0xed,
	0xe9, 0x0b, 0xb5, 0xb3, 0x06, 0x4b, 0xe3, 0x24, 0xe4, 0xf6, 0xa5, 0xcf, 0x0c, 0x30, 0x3a, 0xda,
	0x08, 0xd5, 0x9c, 0x99, 0xf7, 0x9a, 0x36, 0xe1, 0x65, 0xbe, 0xae, 0x42, 0x43, 0xa5, 0x1c, 0x4b,
	0xd6, 0xd1, 0x69, 0xbe, 0x41, 0xeb, 0x04, 0xec, 0x1d, 0x9d, 0xd2, 0xcb, 0x45, 0x12, 0xbc, 0xe4,
	0xda, 0x0f, 0x92, 0x2c, 0xd6, 0xb4, 0x3b, 0x96, 0xbc, 0xa6, 0xc1, 0x1e, 0x20, 0x84, 0xd9, 0x49,
	0x8f, 0x26, 0x4a, 0x04, 0x2c, 0xf2, 0x83, 0x44, 0xf2, 0x9c, 0xb9, 0x44, 0xcc, 0x9e, 0x15, 0x3d,
	0x48, 0x24, 0x37, 0x7c, 0xaa, 0x0c, 0xa3, 0x59, 0xfa, 0x32, 0xd1, 0xbb, 0xb9, 0xa4, 0x60, 0xf7,
	0xef, 0xc0, 0x6a, 0xf5, 0xce, 0xef, 0x5c, 0x86, 0x15, 0xd2, 0xca, 0xdf, 0x4c, 0x1b, 0xde, 0x32,
	0x0e, 0x9f, 0x84, 0xfd, 0xbf, 0x2c, 0x10, 0xb3, 0xac, 0x1f, 0xc8, 0x4c, 0xb3, 0xca, 0xb3, 0xd2,
	0x72, 0x90, 0x66, 0x78, 0x05, 0xb9, 0x09, 0xab, 0x78, 0x56, 0xe0, 0x39, 0x13, 0xf0, 0x58, 0xe7,
	0x15, 0xac, 0x89, 0xd8, 0xbe, 0x81, 0x70, 0x63, 0xe4, 0x8d, 0x98, 0x25, 0x99, 0xc4, 0xb4, 0x0c,
	0x6a, 0x69, 0x37, 0x61, 0x55, 0x84, 0x11, 0x2f, 0x48, 0x8b, 0xc6, 0x12, 0x62, 0x15, 0x4a, 0x2c,
	0x82, 0x92, 0xb2, 0x64, 0x28, 0x88, 0x55, 0x26, 0x13, 0xc9, 0x6b, 0x26, 0x74, 0x41, 0x5a, 0x36,
	0x93, 0x19, 0xd4, 0xd2, 0xb0, 0x13, 0x93, 0xaf, 0x0a, 0xce, 0x0a, 0x71, 0x40, 0xc8, 0x57, 0x96,
	0x80, 0xbb, 0x2a, 0x19, 0x6a, 0xbf, 0xca, 0xaa, 0x13, 0xab, 0x8d, 0xf8, 0x93, 0x92, 0x79, 0x0b,
	0x5a, 0x4a, 0x73, 0x16, 0x15, 0xb4, 0x06, 0xd1, 0x56, 0x09, 0xac, 0x90, 0x46, 0x19, 0x9e, 0xf5,
	0x96, 0x04, 0x86, 0x44, 0xa0, 0x25, 0x7d, 0x0a, 0x8e, 0x21, 0x4d, 0x05, 0xd9, 0x34, 0x65, 0x9e,
	0x24, 0xcf, 0xca, 0x48, 0xfb, 0x5f, 0x43, 0x77, 0xf6, 0xa1, 0xc4, 0xd4, 0x20, 0xcd, 0xe5, 0x90,
	0x05, 0xdc, 0xaf, 0xdc, 0x1c, 0x5a, 0x05, 0x4a, 0x2f, 0xa9, 0xff, 0xa8, 0x15, 0xba, 0x53, 0x47,
	0x84, 0x7d, 0x51, 0x29, 0x97, 0x19, 0x72, 0x08, 0x97, 0xfa, 0x19, 0xdc, 0xd6, 0x92, 0xc5, 0x6a,
	0x2c, 0xb4, 0xaf, 0x8f, 0x64, 0x92, 0x8d, 0x8e, 0xd2, 0x4c, 0x9b, 0xed, 0x80, 0xde, 0xfa, 0xa6,
	0x0d, 0xcc, 0x8f, 0x8e, 0x4d, 0xcb, 0x3d, 0x28, 0xa8, 0xb4, 0x45, 0xf6, 0xb9, 0x1c, 0x10, 0xcf,
	0x79, 0x0a, 0xb7, 0x24, 0x0f, 0x38, 0xd6, 0xcb, 0x37, 0x99, 0x33, 0xa7, 0xcc, 0x8d, 0x9c, 0x7a,
	0x9e, 0xb5, 0xfe, 0x67, 0xd0, 0x9a, 0x7a, 0x8e, 0xa1, 0x13, 0x84, 0x1f, 0x8b, 0xe9, 0x44, 0x80,
	0x81, 0x28, 0x0b, 0x7f, 0xaf, 0x41, 0x67, 0xe6, 0xc9, 0x05, 0x5b, 0x61, 0xf3, 0x66, 0x53, 0x64,
	0x60, 0x85, 0x1e, 0x61, 0xc2, 0x13, 0xdc, 0xda, 0x24, 0xa2, 0x3b, 0x73, 0xfe, 0x28, 0x89, 0x00,
	0x5d, 0x0b, 0xaf, 0x41, 0xa3, 0x78, 0x2d, 0xb4, 0x2f, 0xd7, 0x05, 0x40, 0x57, 0x23, 0x99, 0x1c,
	0x0b, 0x6c, 0x3c, 0x79, 0xe8, 0x8b, 0x24, 0x35, 0x47, 0x63, 0xcb, 0xeb, 0x54, 0xf0, 0x27, 0x49,
	0xaa, 0xd0, 0x10, 0x8f, 0x03, 0x39, 0x49, 0xf1, 0x2e, 0xbd, 0x44, 0x2d, 0x48, 0x09, 0xf4, 0x7f,
	0x5a, 0x34, 0x51, 0x96, 0xab, 0xf6, 0x06, 0x87, 0xbf, 0x81, 0x0d, 0xc9, 0x59, 0xe8, 0xe7, 0xb7,
	0xbd, 0x24, 0x3e, 0xb3, 0x4a, 0x35, 0xef, 0x32, 0x32, 0x9e, 0x17, 0x84, 0x72, 0x71, 0xbe, 0x00,
	0x12, 0x29, 0x7f, 0xcc, 0xe5, 0x88, 0x87, 0xb3, 0x0b, 0x52, 0xf3, 0xd6, 0x48, 0xbc, 0x47, 0xd2,
	0x52, 0xed, 0x1e, 0xac, 0x9b, 0x05, 0xa4, 0x99, 0x2b, 0x4a, 0x66, 0x37, 0x3b, 0x24, 0xf4, 0x38,
	0xab, 0xa8, 0x6c, 0x41, 0x97, 0x1d, 0x8f, 0x8c, 0x02, 0xb6, 0xb5, 0x71, 0x30, 0xc9, 0x37, 0x76,
	0x9b, 0x1d, 0x8f, 0x90, 0xfb, 0xd4, 0xa0, 0xce, 0x2f, 0xe0, 0x2a, 0x75, 0x09, 0xe7, 0x44, 0x64,
	0x36, 0xba, 0x4b, 0x94, 0x79, 0x21, 0x7d, 0x09, 0x46, 0x36, 0x2f, 0x26, 0x53, 0x00, 0xd6, 0x8d,
	0x7c, 0x36, 0xa8, 0x2f, 0xc1, 0x35, 0x41, 0xa1, 0x58, 0xf3, 0xb8, 0xaa, 0x68, 0x6a, 0x82, 0x09,
	0xfa, 0x07, 0x23, 0x2e, 0x15, 0x3f, 0xc6, 0x6b, 0xdb, 0xc8, 0x37, 0x4e, 0xdb, 0xd8, 0x4c, 0x79,
	0xe8, 0xb0, 0xe3, 0x11, 0xf2, 0xb9, 0x0d, 0xee, 0x36, 0x60, 0xb8, 0xfe, 0xab, 0x8c, 0x67, 0xe6,
	0x9c, 0xa1, 0x12, 0xb1, 0xe4, 0xad, 0xb2, 0xe3, 0xd1, 0xf7, 0x08, 0xe2, 0x21, 0x83, 0x5d, 0x71,
	0xa6, 0x45, 0x71, 0x6d, 0xb6, 0x35, 0x62, 0xd5, 0x64, 0xb7, 0x22, 0xb2, 0x55, 0xe2, 0x2b, 0xb8,
	0x34, 0xff, 0xb9, 0xce, 0x79, 0x1f, 0x60, 0x8c, 0xa7, 0x42, 0x9a, 0x88, 0x58, 0xdb, 0xed, 0x51,
	0x22, 0xfd, 0x7f, 0xd6, 0xc0, 0x3d, 0xef, 0xf9, 0x0d, 0x4b, 0xd5, 0x9c, 0xb7, 0x2a, 0xf3, 0x01,
	0x76, 0xc3, 0xd9, 0x77, 0xaa, 0xea, 0x47, 0x7a, 0x61, 0xfa, 0x23, 0xbd, 0x03, 0x9d, 0xa1, 0x88,
	0x78, 0x7e, 0x40, 0xd0, 0xde, 0x32, 0xdb, 0xa7, 0x5d, 0xc2, 0xb4, 0xc3, 0xa6, 0x89, 0x49, 0x5a,
	0xfc, 0x09, 0x53, 0x21, 0x3e, 0x4f, 0x35, 0xf5, 0x61, 0xa5, 0x57, 0xb4, 0xf5, 0xcd, 0x45, 0xb9,
	0x55, 0xa0, 0xb4, 0xfb, 0xff, 0x58, 0x9b, 0xc9, 0x4c, 0xb9, 0xa7, 0x7e, 0x5e, 0x70, 0xd7, 0x01,
	0x2a, 0x2d, 0x9a, 0x29, 0x7e, 0x8d, 0xac, 0x68, 0xcf, 0x66, 0x3a, 0xef, 0x85, 0xd9, 0xce, 0xfb,
	0x70, 0x99, 0xee, 0x41, 0x9f, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x9a, 0x2d, 0x29, 0x4e,
	0x1d, 0x00, 0x00,
}
