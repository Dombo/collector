// Code generated by protoc-gen-go.
// source: full_snapshot.proto
// DO NOT EDIT!

package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RelationEvent_EventType int32

const (
	RelationEvent_MANUAL_VACUUM  RelationEvent_EventType = 0
	RelationEvent_AUTO_VACUUM    RelationEvent_EventType = 1
	RelationEvent_MANUAL_ANALYZE RelationEvent_EventType = 2
	RelationEvent_AUTO_ANALYZE   RelationEvent_EventType = 3
)

var RelationEvent_EventType_name = map[int32]string{
	0: "MANUAL_VACUUM",
	1: "AUTO_VACUUM",
	2: "MANUAL_ANALYZE",
	3: "AUTO_ANALYZE",
}
var RelationEvent_EventType_value = map[string]int32{
	"MANUAL_VACUUM":  0,
	"AUTO_VACUUM":    1,
	"MANUAL_ANALYZE": 2,
	"AUTO_ANALYZE":   3,
}

func (x RelationEvent_EventType) String() string {
	return proto.EnumName(RelationEvent_EventType_name, int32(x))
}
func (RelationEvent_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{17, 0} }

type FullSnapshot struct {
	// Basic information about this snapshot
	SnapshotVersionMajor  int32                      `protobuf:"varint,1,opt,name=snapshot_version_major,json=snapshotVersionMajor" json:"snapshot_version_major,omitempty"`
	SnapshotVersionMinor  int32                      `protobuf:"varint,2,opt,name=snapshot_version_minor,json=snapshotVersionMinor" json:"snapshot_version_minor,omitempty"`
	CollectorVersion      string                     `protobuf:"bytes,3,opt,name=collector_version,json=collectorVersion" json:"collector_version,omitempty"`
	FailedRun             bool                       `protobuf:"varint,4,opt,name=failed_run,json=failedRun" json:"failed_run,omitempty"`
	SnapshotUuid          string                     `protobuf:"bytes,10,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,12,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	CollectorStatistic    *CollectorStatistic        `protobuf:"bytes,20,opt,name=collector_statistic,json=collectorStatistic" json:"collector_statistic,omitempty"`
	CollectorErrors       []string                   `protobuf:"bytes,21,rep,name=collector_errors,json=collectorErrors" json:"collector_errors,omitempty"`
	// Per server (and hence snapshot)
	System                 *System                  `protobuf:"bytes,100,opt,name=system" json:"system,omitempty"`
	PostgresVersion        *PostgresVersion         `protobuf:"bytes,101,opt,name=postgres_version,json=postgresVersion" json:"postgres_version,omitempty"`
	RoleReferences         []*RoleReference         `protobuf:"bytes,102,rep,name=role_references,json=roleReferences" json:"role_references,omitempty"`
	DatabaseReferences     []*DatabaseReference     `protobuf:"bytes,103,rep,name=database_references,json=databaseReferences" json:"database_references,omitempty"`
	RoleInformations       []*RoleInformation       `protobuf:"bytes,110,rep,name=role_informations,json=roleInformations" json:"role_informations,omitempty"`
	DatabaseInformations   []*DatabaseInformation   `protobuf:"bytes,111,rep,name=database_informations,json=databaseInformations" json:"database_informations,omitempty"`
	Backends               []*Backend               `protobuf:"bytes,121,rep,name=backends" json:"backends,omitempty"`
	Settings               []*Setting               `protobuf:"bytes,122,rep,name=settings" json:"settings,omitempty"`
	Replication            *Replication             `protobuf:"bytes,123,opt,name=replication" json:"replication,omitempty"`
	TablespaceReferences   []*TablespaceReference   `protobuf:"bytes,130,rep,name=tablespace_references,json=tablespaceReferences" json:"tablespace_references,omitempty"`
	TablespaceInformations []*TablespaceInformation `protobuf:"bytes,131,rep,name=tablespace_informations,json=tablespaceInformations" json:"tablespace_informations,omitempty"`
	// Per database
	QueryReferences         []*QueryReference          `protobuf:"bytes,200,rep,name=query_references,json=queryReferences" json:"query_references,omitempty"`
	RelationReferences      []*RelationReference       `protobuf:"bytes,201,rep,name=relation_references,json=relationReferences" json:"relation_references,omitempty"`
	IndexReferences         []*IndexReference          `protobuf:"bytes,202,rep,name=index_references,json=indexReferences" json:"index_references,omitempty"`
	FunctionReferences      []*FunctionReference       `protobuf:"bytes,203,rep,name=function_references,json=functionReferences" json:"function_references,omitempty"`
	QueryInformations       []*QueryInformation        `protobuf:"bytes,210,rep,name=query_informations,json=queryInformations" json:"query_informations,omitempty"`
	QueryStatistics         []*QueryStatistic          `protobuf:"bytes,211,rep,name=query_statistics,json=queryStatistics" json:"query_statistics,omitempty"`
	HistoricQueryStatistics []*HistoricQueryStatistics `protobuf:"bytes,213,rep,name=historic_query_statistics,json=historicQueryStatistics" json:"historic_query_statistics,omitempty"`
	RelationInformations    []*RelationInformation     `protobuf:"bytes,220,rep,name=relation_informations,json=relationInformations" json:"relation_informations,omitempty"`
	RelationStatistics      []*RelationStatistic       `protobuf:"bytes,221,rep,name=relation_statistics,json=relationStatistics" json:"relation_statistics,omitempty"`
	RelationEvents          []*RelationEvent           `protobuf:"bytes,223,rep,name=relation_events,json=relationEvents" json:"relation_events,omitempty"`
	IndexInformations       []*IndexInformation        `protobuf:"bytes,224,rep,name=index_informations,json=indexInformations" json:"index_informations,omitempty"`
	IndexStatistics         []*IndexStatistic          `protobuf:"bytes,225,rep,name=index_statistics,json=indexStatistics" json:"index_statistics,omitempty"`
	FunctionInformations    []*FunctionInformation     `protobuf:"bytes,227,rep,name=function_informations,json=functionInformations" json:"function_informations,omitempty"`
	FunctionStatistics      []*FunctionStatistic       `protobuf:"bytes,228,rep,name=function_statistics,json=functionStatistics" json:"function_statistics,omitempty"`
}

func (m *FullSnapshot) Reset()                    { *m = FullSnapshot{} }
func (m *FullSnapshot) String() string            { return proto.CompactTextString(m) }
func (*FullSnapshot) ProtoMessage()               {}
func (*FullSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *FullSnapshot) GetSnapshotVersionMajor() int32 {
	if m != nil {
		return m.SnapshotVersionMajor
	}
	return 0
}

func (m *FullSnapshot) GetSnapshotVersionMinor() int32 {
	if m != nil {
		return m.SnapshotVersionMinor
	}
	return 0
}

func (m *FullSnapshot) GetCollectorVersion() string {
	if m != nil {
		return m.CollectorVersion
	}
	return ""
}

func (m *FullSnapshot) GetFailedRun() bool {
	if m != nil {
		return m.FailedRun
	}
	return false
}

func (m *FullSnapshot) GetSnapshotUuid() string {
	if m != nil {
		return m.SnapshotUuid
	}
	return ""
}

func (m *FullSnapshot) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *FullSnapshot) GetCollectedIntervalSecs() uint32 {
	if m != nil {
		return m.CollectedIntervalSecs
	}
	return 0
}

func (m *FullSnapshot) GetCollectorStatistic() *CollectorStatistic {
	if m != nil {
		return m.CollectorStatistic
	}
	return nil
}

func (m *FullSnapshot) GetCollectorErrors() []string {
	if m != nil {
		return m.CollectorErrors
	}
	return nil
}

func (m *FullSnapshot) GetSystem() *System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *FullSnapshot) GetPostgresVersion() *PostgresVersion {
	if m != nil {
		return m.PostgresVersion
	}
	return nil
}

func (m *FullSnapshot) GetRoleReferences() []*RoleReference {
	if m != nil {
		return m.RoleReferences
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseReferences() []*DatabaseReference {
	if m != nil {
		return m.DatabaseReferences
	}
	return nil
}

func (m *FullSnapshot) GetRoleInformations() []*RoleInformation {
	if m != nil {
		return m.RoleInformations
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseInformations() []*DatabaseInformation {
	if m != nil {
		return m.DatabaseInformations
	}
	return nil
}

func (m *FullSnapshot) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *FullSnapshot) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *FullSnapshot) GetReplication() *Replication {
	if m != nil {
		return m.Replication
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceReferences() []*TablespaceReference {
	if m != nil {
		return m.TablespaceReferences
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceInformations() []*TablespaceInformation {
	if m != nil {
		return m.TablespaceInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryReferences() []*QueryReference {
	if m != nil {
		return m.QueryReferences
	}
	return nil
}

func (m *FullSnapshot) GetRelationReferences() []*RelationReference {
	if m != nil {
		return m.RelationReferences
	}
	return nil
}

func (m *FullSnapshot) GetIndexReferences() []*IndexReference {
	if m != nil {
		return m.IndexReferences
	}
	return nil
}

func (m *FullSnapshot) GetFunctionReferences() []*FunctionReference {
	if m != nil {
		return m.FunctionReferences
	}
	return nil
}

func (m *FullSnapshot) GetQueryInformations() []*QueryInformation {
	if m != nil {
		return m.QueryInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryStatistics() []*QueryStatistic {
	if m != nil {
		return m.QueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetHistoricQueryStatistics() []*HistoricQueryStatistics {
	if m != nil {
		return m.HistoricQueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationInformations() []*RelationInformation {
	if m != nil {
		return m.RelationInformations
	}
	return nil
}

func (m *FullSnapshot) GetRelationStatistics() []*RelationStatistic {
	if m != nil {
		return m.RelationStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationEvents() []*RelationEvent {
	if m != nil {
		return m.RelationEvents
	}
	return nil
}

func (m *FullSnapshot) GetIndexInformations() []*IndexInformation {
	if m != nil {
		return m.IndexInformations
	}
	return nil
}

func (m *FullSnapshot) GetIndexStatistics() []*IndexStatistic {
	if m != nil {
		return m.IndexStatistics
	}
	return nil
}

func (m *FullSnapshot) GetFunctionInformations() []*FunctionInformation {
	if m != nil {
		return m.FunctionInformations
	}
	return nil
}

func (m *FullSnapshot) GetFunctionStatistics() []*FunctionStatistic {
	if m != nil {
		return m.FunctionStatistics
	}
	return nil
}

type CollectorStatistic struct {
	GoVersion string `protobuf:"bytes,10,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	// Statistics from after the collection input step
	MemoryHeapAllocatedBytes uint64 `protobuf:"varint,13,opt,name=memory_heap_allocated_bytes,json=memoryHeapAllocatedBytes" json:"memory_heap_allocated_bytes,omitempty"`
	MemoryHeapObjects        uint64 `protobuf:"varint,14,opt,name=memory_heap_objects,json=memoryHeapObjects" json:"memory_heap_objects,omitempty"`
	MemorySystemBytes        uint64 `protobuf:"varint,15,opt,name=memory_system_bytes,json=memorySystemBytes" json:"memory_system_bytes,omitempty"`
	MemoryRssBytes           uint64 `protobuf:"varint,16,opt,name=memory_rss_bytes,json=memoryRssBytes" json:"memory_rss_bytes,omitempty"`
	ActiveGoroutines         int32  `protobuf:"varint,20,opt,name=active_goroutines,json=activeGoroutines" json:"active_goroutines,omitempty"`
	// Diff-ed statistics between two runs
	CgoCalls int64 `protobuf:"varint,30,opt,name=cgo_calls,json=cgoCalls" json:"cgo_calls,omitempty"`
}

func (m *CollectorStatistic) Reset()                    { *m = CollectorStatistic{} }
func (m *CollectorStatistic) String() string            { return proto.CompactTextString(m) }
func (*CollectorStatistic) ProtoMessage()               {}
func (*CollectorStatistic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CollectorStatistic) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *CollectorStatistic) GetMemoryHeapAllocatedBytes() uint64 {
	if m != nil {
		return m.MemoryHeapAllocatedBytes
	}
	return 0
}

func (m *CollectorStatistic) GetMemoryHeapObjects() uint64 {
	if m != nil {
		return m.MemoryHeapObjects
	}
	return 0
}

func (m *CollectorStatistic) GetMemorySystemBytes() uint64 {
	if m != nil {
		return m.MemorySystemBytes
	}
	return 0
}

func (m *CollectorStatistic) GetMemoryRssBytes() uint64 {
	if m != nil {
		return m.MemoryRssBytes
	}
	return 0
}

func (m *CollectorStatistic) GetActiveGoroutines() int32 {
	if m != nil {
		return m.ActiveGoroutines
	}
	return 0
}

func (m *CollectorStatistic) GetCgoCalls() int64 {
	if m != nil {
		return m.CgoCalls
	}
	return 0
}

type RoleInformation struct {
	RoleIdx            int32          `protobuf:"varint,1,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Inherit            bool           `protobuf:"varint,2,opt,name=inherit" json:"inherit,omitempty"`
	Login              bool           `protobuf:"varint,3,opt,name=login" json:"login,omitempty"`
	CreateDb           bool           `protobuf:"varint,4,opt,name=create_db,json=createDb" json:"create_db,omitempty"`
	CreateRole         bool           `protobuf:"varint,5,opt,name=create_role,json=createRole" json:"create_role,omitempty"`
	SuperUser          bool           `protobuf:"varint,6,opt,name=super_user,json=superUser" json:"super_user,omitempty"`
	Replication        bool           `protobuf:"varint,7,opt,name=replication" json:"replication,omitempty"`
	BypassRls          bool           `protobuf:"varint,8,opt,name=bypass_rls,json=bypassRls" json:"bypass_rls,omitempty"`
	ConnectionLimit    int32          `protobuf:"varint,9,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	PasswordValidUntil *NullTimestamp `protobuf:"bytes,10,opt,name=password_valid_until,json=passwordValidUntil" json:"password_valid_until,omitempty"`
	Config             []string       `protobuf:"bytes,11,rep,name=config" json:"config,omitempty"`
	MemberOf           []int32        `protobuf:"varint,12,rep,packed,name=member_of,json=memberOf" json:"member_of,omitempty"`
}

func (m *RoleInformation) Reset()                    { *m = RoleInformation{} }
func (m *RoleInformation) String() string            { return proto.CompactTextString(m) }
func (*RoleInformation) ProtoMessage()               {}
func (*RoleInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RoleInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *RoleInformation) GetInherit() bool {
	if m != nil {
		return m.Inherit
	}
	return false
}

func (m *RoleInformation) GetLogin() bool {
	if m != nil {
		return m.Login
	}
	return false
}

func (m *RoleInformation) GetCreateDb() bool {
	if m != nil {
		return m.CreateDb
	}
	return false
}

func (m *RoleInformation) GetCreateRole() bool {
	if m != nil {
		return m.CreateRole
	}
	return false
}

func (m *RoleInformation) GetSuperUser() bool {
	if m != nil {
		return m.SuperUser
	}
	return false
}

func (m *RoleInformation) GetReplication() bool {
	if m != nil {
		return m.Replication
	}
	return false
}

func (m *RoleInformation) GetBypassRls() bool {
	if m != nil {
		return m.BypassRls
	}
	return false
}

func (m *RoleInformation) GetConnectionLimit() int32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *RoleInformation) GetPasswordValidUntil() *NullTimestamp {
	if m != nil {
		return m.PasswordValidUntil
	}
	return nil
}

func (m *RoleInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RoleInformation) GetMemberOf() []int32 {
	if m != nil {
		return m.MemberOf
	}
	return nil
}

type DatabaseInformation struct {
	DatabaseIdx      int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	OwnerRoleIdx     int32  `protobuf:"varint,2,opt,name=owner_role_idx,json=ownerRoleIdx" json:"owner_role_idx,omitempty"`
	Encoding         string `protobuf:"bytes,3,opt,name=encoding" json:"encoding,omitempty"`
	Collate          string `protobuf:"bytes,4,opt,name=collate" json:"collate,omitempty"`
	CType            string `protobuf:"bytes,5,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	IsTemplate       bool   `protobuf:"varint,6,opt,name=is_template,json=isTemplate" json:"is_template,omitempty"`
	AllowConnections bool   `protobuf:"varint,7,opt,name=allow_connections,json=allowConnections" json:"allow_connections,omitempty"`
	ConnectionLimit  int32  `protobuf:"varint,8,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	// All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent transaction ID wraparound or to
	// allow pg_clog to be shrunk. It is the minimum of the per-table pg_class.relfrozenxid values.
	FrozenXid uint32 `protobuf:"varint,9,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	// All multixact IDs before this one have been replaced with a transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent multixact ID wraparound or to
	// allow pg_multixact to be shrunk. It is the minimum of the per-table pg_class.relminmxid values.
	MinimumMultixactXid uint32 `protobuf:"varint,10,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
	// Whether the collector was able to connect to this database and fetch local catalog data (e.g. schema)
	CollectedLocalCatalogData bool `protobuf:"varint,11,opt,name=collected_local_catalog_data,json=collectedLocalCatalogData" json:"collected_local_catalog_data,omitempty"`
}

func (m *DatabaseInformation) Reset()                    { *m = DatabaseInformation{} }
func (m *DatabaseInformation) String() string            { return proto.CompactTextString(m) }
func (*DatabaseInformation) ProtoMessage()               {}
func (*DatabaseInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *DatabaseInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *DatabaseInformation) GetOwnerRoleIdx() int32 {
	if m != nil {
		return m.OwnerRoleIdx
	}
	return 0
}

func (m *DatabaseInformation) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *DatabaseInformation) GetCollate() string {
	if m != nil {
		return m.Collate
	}
	return ""
}

func (m *DatabaseInformation) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *DatabaseInformation) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

func (m *DatabaseInformation) GetAllowConnections() bool {
	if m != nil {
		return m.AllowConnections
	}
	return false
}

func (m *DatabaseInformation) GetConnectionLimit() int32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *DatabaseInformation) GetFrozenXid() uint32 {
	if m != nil {
		return m.FrozenXid
	}
	return 0
}

func (m *DatabaseInformation) GetMinimumMultixactXid() uint32 {
	if m != nil {
		return m.MinimumMultixactXid
	}
	return 0
}

func (m *DatabaseInformation) GetCollectedLocalCatalogData() bool {
	if m != nil {
		return m.CollectedLocalCatalogData
	}
	return false
}

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *PostgresVersion) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func (m *PostgresVersion) GetShort() string {
	if m != nil {
		return m.Short
	}
	return ""
}

func (m *PostgresVersion) GetNumeric() int64 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

type Setting struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *Setting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Setting) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func (m *Setting) GetUnit() *NullString {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Setting) GetBootValue() *NullString {
	if m != nil {
		return m.BootValue
	}
	return nil
}

func (m *Setting) GetResetValue() *NullString {
	if m != nil {
		return m.ResetValue
	}
	return nil
}

func (m *Setting) GetSource() *NullString {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Setting) GetSourceFile() *NullString {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Setting) GetSourceLine() *NullString {
	if m != nil {
		return m.SourceLine
	}
	return nil
}

type Replication struct {
	// Are we the primary, or a standby?
	InRecovery bool `protobuf:"varint,1,opt,name=in_recovery,json=inRecovery" json:"in_recovery,omitempty"`
	// Primary information
	CurrentXlogLocation string                `protobuf:"bytes,10,opt,name=current_xlog_location,json=currentXlogLocation" json:"current_xlog_location,omitempty"`
	StandbyReferences   []*StandbyReference   `protobuf:"bytes,11,rep,name=standby_references,json=standbyReferences" json:"standby_references,omitempty"`
	StandbyInformations []*StandbyInformation `protobuf:"bytes,12,rep,name=standby_informations,json=standbyInformations" json:"standby_informations,omitempty"`
	StandbyStatistics   []*StandbyStatistic   `protobuf:"bytes,13,rep,name=standby_statistics,json=standbyStatistics" json:"standby_statistics,omitempty"`
	// Standby information
	IsStreaming        bool                       `protobuf:"varint,20,opt,name=is_streaming,json=isStreaming" json:"is_streaming,omitempty"`
	ReceiveLocation    string                     `protobuf:"bytes,21,opt,name=receive_location,json=receiveLocation" json:"receive_location,omitempty"`
	ReplayLocation     string                     `protobuf:"bytes,22,opt,name=replay_location,json=replayLocation" json:"replay_location,omitempty"`
	ApplyByteLag       int64                      `protobuf:"varint,23,opt,name=apply_byte_lag,json=applyByteLag" json:"apply_byte_lag,omitempty"`
	ReplayTimestamp    *google_protobuf.Timestamp `protobuf:"bytes,24,opt,name=replay_timestamp,json=replayTimestamp" json:"replay_timestamp,omitempty"`
	ReplayTimestampAge int64                      `protobuf:"varint,25,opt,name=replay_timestamp_age,json=replayTimestampAge" json:"replay_timestamp_age,omitempty"`
}

func (m *Replication) Reset()                    { *m = Replication{} }
func (m *Replication) String() string            { return proto.CompactTextString(m) }
func (*Replication) ProtoMessage()               {}
func (*Replication) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *Replication) GetInRecovery() bool {
	if m != nil {
		return m.InRecovery
	}
	return false
}

func (m *Replication) GetCurrentXlogLocation() string {
	if m != nil {
		return m.CurrentXlogLocation
	}
	return ""
}

func (m *Replication) GetStandbyReferences() []*StandbyReference {
	if m != nil {
		return m.StandbyReferences
	}
	return nil
}

func (m *Replication) GetStandbyInformations() []*StandbyInformation {
	if m != nil {
		return m.StandbyInformations
	}
	return nil
}

func (m *Replication) GetStandbyStatistics() []*StandbyStatistic {
	if m != nil {
		return m.StandbyStatistics
	}
	return nil
}

func (m *Replication) GetIsStreaming() bool {
	if m != nil {
		return m.IsStreaming
	}
	return false
}

func (m *Replication) GetReceiveLocation() string {
	if m != nil {
		return m.ReceiveLocation
	}
	return ""
}

func (m *Replication) GetReplayLocation() string {
	if m != nil {
		return m.ReplayLocation
	}
	return ""
}

func (m *Replication) GetApplyByteLag() int64 {
	if m != nil {
		return m.ApplyByteLag
	}
	return 0
}

func (m *Replication) GetReplayTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.ReplayTimestamp
	}
	return nil
}

func (m *Replication) GetReplayTimestampAge() int64 {
	if m != nil {
		return m.ReplayTimestampAge
	}
	return 0
}

type StandbyReference struct {
	ClientAddr string `protobuf:"bytes,1,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
}

func (m *StandbyReference) Reset()                    { *m = StandbyReference{} }
func (m *StandbyReference) String() string            { return proto.CompactTextString(m) }
func (*StandbyReference) ProtoMessage()               {}
func (*StandbyReference) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *StandbyReference) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

type StandbyInformation struct {
	StandbyIdx      int32                      `protobuf:"varint,1,opt,name=standby_idx,json=standbyIdx" json:"standby_idx,omitempty"`
	RoleIdx         int32                      `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Pid             int64                      `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	ApplicationName string                     `protobuf:"bytes,4,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientHostname  string                     `protobuf:"bytes,5,opt,name=client_hostname,json=clientHostname" json:"client_hostname,omitempty"`
	ClientPort      int32                      `protobuf:"varint,6,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	SyncPriority    int32                      `protobuf:"varint,8,opt,name=sync_priority,json=syncPriority" json:"sync_priority,omitempty"`
	SyncState       string                     `protobuf:"bytes,9,opt,name=sync_state,json=syncState" json:"sync_state,omitempty"`
}

func (m *StandbyInformation) Reset()                    { *m = StandbyInformation{} }
func (m *StandbyInformation) String() string            { return proto.CompactTextString(m) }
func (*StandbyInformation) ProtoMessage()               {}
func (*StandbyInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *StandbyInformation) GetStandbyIdx() int32 {
	if m != nil {
		return m.StandbyIdx
	}
	return 0
}

func (m *StandbyInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *StandbyInformation) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *StandbyInformation) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *StandbyInformation) GetClientHostname() string {
	if m != nil {
		return m.ClientHostname
	}
	return ""
}

func (m *StandbyInformation) GetClientPort() int32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *StandbyInformation) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *StandbyInformation) GetSyncPriority() int32 {
	if m != nil {
		return m.SyncPriority
	}
	return 0
}

func (m *StandbyInformation) GetSyncState() string {
	if m != nil {
		return m.SyncState
	}
	return ""
}

type StandbyStatistic struct {
	StandbyIdx     int32  `protobuf:"varint,1,opt,name=standby_idx,json=standbyIdx" json:"standby_idx,omitempty"`
	State          string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	SentLocation   string `protobuf:"bytes,3,opt,name=sent_location,json=sentLocation" json:"sent_location,omitempty"`
	WriteLocation  string `protobuf:"bytes,4,opt,name=write_location,json=writeLocation" json:"write_location,omitempty"`
	FlushLocation  string `protobuf:"bytes,5,opt,name=flush_location,json=flushLocation" json:"flush_location,omitempty"`
	ReplayLocation string `protobuf:"bytes,6,opt,name=replay_location,json=replayLocation" json:"replay_location,omitempty"`
	ByteLag        int64  `protobuf:"varint,7,opt,name=byte_lag,json=byteLag" json:"byte_lag,omitempty"`
}

func (m *StandbyStatistic) Reset()                    { *m = StandbyStatistic{} }
func (m *StandbyStatistic) String() string            { return proto.CompactTextString(m) }
func (*StandbyStatistic) ProtoMessage()               {}
func (*StandbyStatistic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *StandbyStatistic) GetStandbyIdx() int32 {
	if m != nil {
		return m.StandbyIdx
	}
	return 0
}

func (m *StandbyStatistic) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *StandbyStatistic) GetSentLocation() string {
	if m != nil {
		return m.SentLocation
	}
	return ""
}

func (m *StandbyStatistic) GetWriteLocation() string {
	if m != nil {
		return m.WriteLocation
	}
	return ""
}

func (m *StandbyStatistic) GetFlushLocation() string {
	if m != nil {
		return m.FlushLocation
	}
	return ""
}

func (m *StandbyStatistic) GetReplayLocation() string {
	if m != nil {
		return m.ReplayLocation
	}
	return ""
}

func (m *StandbyStatistic) GetByteLag() int64 {
	if m != nil {
		return m.ByteLag
	}
	return 0
}

type Backend struct {
	DatabaseIdx     int32                      `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	RoleIdx         int32                      `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	QueryIdx        int32                      `protobuf:"varint,3,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Pid             int32                      `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	ApplicationName string                     `protobuf:"bytes,5,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientAddr      string                     `protobuf:"bytes,6,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	XactStart       *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=xact_start,json=xactStart" json:"xact_start,omitempty"`
	QueryStart      *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=query_start,json=queryStart" json:"query_start,omitempty"`
	StateChange     *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=state_change,json=stateChange" json:"state_change,omitempty"`
	Waiting         bool                       `protobuf:"varint,11,opt,name=waiting" json:"waiting,omitempty"`
	State           string                     `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	WaitEventType   string                     `protobuf:"bytes,13,opt,name=wait_event_type,json=waitEventType" json:"wait_event_type,omitempty"`
	WaitEvent       string                     `protobuf:"bytes,14,opt,name=wait_event,json=waitEvent" json:"wait_event,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *Backend) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *Backend) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *Backend) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *Backend) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Backend) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *Backend) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *Backend) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *Backend) GetXactStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.XactStart
	}
	return nil
}

func (m *Backend) GetQueryStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.QueryStart
	}
	return nil
}

func (m *Backend) GetStateChange() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateChange
	}
	return nil
}

func (m *Backend) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

func (m *Backend) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Backend) GetWaitEventType() string {
	if m != nil {
		return m.WaitEventType
	}
	return ""
}

func (m *Backend) GetWaitEvent() string {
	if m != nil {
		return m.WaitEvent
	}
	return ""
}

type TablespaceReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TablespaceReference) Reset()                    { *m = TablespaceReference{} }
func (m *TablespaceReference) String() string            { return proto.CompactTextString(m) }
func (*TablespaceReference) ProtoMessage()               {}
func (*TablespaceReference) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *TablespaceReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TablespaceInformation struct {
	TablespaceIdx    int32    `protobuf:"varint,1,opt,name=tablespace_idx,json=tablespaceIdx" json:"tablespace_idx,omitempty"`
	DiskPartitionIdx int32    `protobuf:"varint,2,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	RoleIdx          int32    `protobuf:"varint,3,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Config           []string `protobuf:"bytes,4,rep,name=config" json:"config,omitempty"`
}

func (m *TablespaceInformation) Reset()                    { *m = TablespaceInformation{} }
func (m *TablespaceInformation) String() string            { return proto.CompactTextString(m) }
func (*TablespaceInformation) ProtoMessage()               {}
func (*TablespaceInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *TablespaceInformation) GetTablespaceIdx() int32 {
	if m != nil {
		return m.TablespaceIdx
	}
	return 0
}

func (m *TablespaceInformation) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *TablespaceInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *TablespaceInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

type QueryStatistic struct {
	QueryIdx          int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Calls             int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime         float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	Rows              int64   `protobuf:"varint,4,opt,name=rows" json:"rows,omitempty"`
	SharedBlksHit     int64   `protobuf:"varint,5,opt,name=shared_blks_hit,json=sharedBlksHit" json:"shared_blks_hit,omitempty"`
	SharedBlksRead    int64   `protobuf:"varint,6,opt,name=shared_blks_read,json=sharedBlksRead" json:"shared_blks_read,omitempty"`
	SharedBlksDirtied int64   `protobuf:"varint,7,opt,name=shared_blks_dirtied,json=sharedBlksDirtied" json:"shared_blks_dirtied,omitempty"`
	SharedBlksWritten int64   `protobuf:"varint,8,opt,name=shared_blks_written,json=sharedBlksWritten" json:"shared_blks_written,omitempty"`
	LocalBlksHit      int64   `protobuf:"varint,9,opt,name=local_blks_hit,json=localBlksHit" json:"local_blks_hit,omitempty"`
	LocalBlksRead     int64   `protobuf:"varint,10,opt,name=local_blks_read,json=localBlksRead" json:"local_blks_read,omitempty"`
	LocalBlksDirtied  int64   `protobuf:"varint,11,opt,name=local_blks_dirtied,json=localBlksDirtied" json:"local_blks_dirtied,omitempty"`
	LocalBlksWritten  int64   `protobuf:"varint,12,opt,name=local_blks_written,json=localBlksWritten" json:"local_blks_written,omitempty"`
	TempBlksRead      int64   `protobuf:"varint,13,opt,name=temp_blks_read,json=tempBlksRead" json:"temp_blks_read,omitempty"`
	TempBlksWritten   int64   `protobuf:"varint,14,opt,name=temp_blks_written,json=tempBlksWritten" json:"temp_blks_written,omitempty"`
	BlkReadTime       float64 `protobuf:"fixed64,15,opt,name=blk_read_time,json=blkReadTime" json:"blk_read_time,omitempty"`
	BlkWriteTime      float64 `protobuf:"fixed64,16,opt,name=blk_write_time,json=blkWriteTime" json:"blk_write_time,omitempty"`
}

func (m *QueryStatistic) Reset()                    { *m = QueryStatistic{} }
func (m *QueryStatistic) String() string            { return proto.CompactTextString(m) }
func (*QueryStatistic) ProtoMessage()               {}
func (*QueryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *QueryStatistic) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QueryStatistic) GetCalls() int64 {
	if m != nil {
		return m.Calls
	}
	return 0
}

func (m *QueryStatistic) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *QueryStatistic) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksHit() int64 {
	if m != nil {
		return m.SharedBlksHit
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksRead() int64 {
	if m != nil {
		return m.SharedBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksDirtied() int64 {
	if m != nil {
		return m.SharedBlksDirtied
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksWritten() int64 {
	if m != nil {
		return m.SharedBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksHit() int64 {
	if m != nil {
		return m.LocalBlksHit
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksRead() int64 {
	if m != nil {
		return m.LocalBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksDirtied() int64 {
	if m != nil {
		return m.LocalBlksDirtied
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksWritten() int64 {
	if m != nil {
		return m.LocalBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetTempBlksRead() int64 {
	if m != nil {
		return m.TempBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetTempBlksWritten() int64 {
	if m != nil {
		return m.TempBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetBlkReadTime() float64 {
	if m != nil {
		return m.BlkReadTime
	}
	return 0
}

func (m *QueryStatistic) GetBlkWriteTime() float64 {
	if m != nil {
		return m.BlkWriteTime
	}
	return 0
}

type HistoricQueryStatistics struct {
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,2,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	Statistics            []*QueryStatistic          `protobuf:"bytes,3,rep,name=statistics" json:"statistics,omitempty"`
}

func (m *HistoricQueryStatistics) Reset()                    { *m = HistoricQueryStatistics{} }
func (m *HistoricQueryStatistics) String() string            { return proto.CompactTextString(m) }
func (*HistoricQueryStatistics) ProtoMessage()               {}
func (*HistoricQueryStatistics) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *HistoricQueryStatistics) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *HistoricQueryStatistics) GetCollectedIntervalSecs() uint32 {
	if m != nil {
		return m.CollectedIntervalSecs
	}
	return 0
}

func (m *HistoricQueryStatistics) GetStatistics() []*QueryStatistic {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type RelationInformation struct {
	RelationIdx            int32                             `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	RelationType           string                            `protobuf:"bytes,2,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	ViewDefinition         *NullString                       `protobuf:"bytes,3,opt,name=view_definition,json=viewDefinition" json:"view_definition,omitempty"`
	Columns                []*RelationInformation_Column     `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	Constraints            []*RelationInformation_Constraint `protobuf:"bytes,5,rep,name=constraints" json:"constraints,omitempty"`
	PersistenceType        string                            `protobuf:"bytes,6,opt,name=persistence_type,json=persistenceType" json:"persistence_type,omitempty"`
	Fillfactor             int32                             `protobuf:"varint,7,opt,name=fillfactor" json:"fillfactor,omitempty"`
	HasOids                bool                              `protobuf:"varint,8,opt,name=has_oids,json=hasOids" json:"has_oids,omitempty"`
	HasInheritanceChildren bool                              `protobuf:"varint,9,opt,name=has_inheritance_children,json=hasInheritanceChildren" json:"has_inheritance_children,omitempty"`
	HasToast               bool                              `protobuf:"varint,10,opt,name=has_toast,json=hasToast" json:"has_toast,omitempty"`
	FrozenXid              uint32                            `protobuf:"varint,11,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	MinimumMultixactXid    uint32                            `protobuf:"varint,12,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
	// True if another process is currently holding an AccessExclusiveLock on this
	// relation, this also means we won't have columns/index/constraints information
	ExclusivelyLocked bool `protobuf:"varint,13,opt,name=exclusively_locked,json=exclusivelyLocked" json:"exclusively_locked,omitempty"`
}

func (m *RelationInformation) Reset()                    { *m = RelationInformation{} }
func (m *RelationInformation) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation) ProtoMessage()               {}
func (*RelationInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *RelationInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationInformation) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *RelationInformation) GetViewDefinition() *NullString {
	if m != nil {
		return m.ViewDefinition
	}
	return nil
}

func (m *RelationInformation) GetColumns() []*RelationInformation_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation) GetConstraints() []*RelationInformation_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *RelationInformation) GetPersistenceType() string {
	if m != nil {
		return m.PersistenceType
	}
	return ""
}

func (m *RelationInformation) GetFillfactor() int32 {
	if m != nil {
		return m.Fillfactor
	}
	return 0
}

func (m *RelationInformation) GetHasOids() bool {
	if m != nil {
		return m.HasOids
	}
	return false
}

func (m *RelationInformation) GetHasInheritanceChildren() bool {
	if m != nil {
		return m.HasInheritanceChildren
	}
	return false
}

func (m *RelationInformation) GetHasToast() bool {
	if m != nil {
		return m.HasToast
	}
	return false
}

func (m *RelationInformation) GetFrozenXid() uint32 {
	if m != nil {
		return m.FrozenXid
	}
	return 0
}

func (m *RelationInformation) GetMinimumMultixactXid() uint32 {
	if m != nil {
		return m.MinimumMultixactXid
	}
	return 0
}

func (m *RelationInformation) GetExclusivelyLocked() bool {
	if m != nil {
		return m.ExclusivelyLocked
	}
	return false
}

type RelationInformation_Column struct {
	Name         string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DataType     string      `protobuf:"bytes,3,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	DefaultValue *NullString `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	NotNull      bool        `protobuf:"varint,5,opt,name=not_null,json=notNull" json:"not_null,omitempty"`
	Position     int32       `protobuf:"varint,6,opt,name=position" json:"position,omitempty"`
}

func (m *RelationInformation_Column) Reset()                    { *m = RelationInformation_Column{} }
func (m *RelationInformation_Column) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation_Column) ProtoMessage()               {}
func (*RelationInformation_Column) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15, 0} }

func (m *RelationInformation_Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationInformation_Column) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *RelationInformation_Column) GetDefaultValue() *NullString {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *RelationInformation_Column) GetNotNull() bool {
	if m != nil {
		return m.NotNull
	}
	return false
}

func (m *RelationInformation_Column) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type RelationInformation_Constraint struct {
	ForeignRelationIdx int32   `protobuf:"varint,1,opt,name=foreign_relation_idx,json=foreignRelationIdx" json:"foreign_relation_idx,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ConstraintDef      string  `protobuf:"bytes,4,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	Columns            []int32 `protobuf:"varint,5,rep,packed,name=columns" json:"columns,omitempty"`
	ForeignColumns     []int32 `protobuf:"varint,6,rep,packed,name=foreign_columns,json=foreignColumns" json:"foreign_columns,omitempty"`
	ForeignUpdateType  string  `protobuf:"bytes,7,opt,name=foreign_update_type,json=foreignUpdateType" json:"foreign_update_type,omitempty"`
	ForeignDeleteType  string  `protobuf:"bytes,8,opt,name=foreign_delete_type,json=foreignDeleteType" json:"foreign_delete_type,omitempty"`
	ForeignMatchType   string  `protobuf:"bytes,9,opt,name=foreign_match_type,json=foreignMatchType" json:"foreign_match_type,omitempty"`
}

func (m *RelationInformation_Constraint) Reset()         { *m = RelationInformation_Constraint{} }
func (m *RelationInformation_Constraint) String() string { return proto.CompactTextString(m) }
func (*RelationInformation_Constraint) ProtoMessage()    {}
func (*RelationInformation_Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{15, 1}
}

func (m *RelationInformation_Constraint) GetForeignRelationIdx() int32 {
	if m != nil {
		return m.ForeignRelationIdx
	}
	return 0
}

func (m *RelationInformation_Constraint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationInformation_Constraint) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RelationInformation_Constraint) GetConstraintDef() string {
	if m != nil {
		return m.ConstraintDef
	}
	return ""
}

func (m *RelationInformation_Constraint) GetColumns() []int32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation_Constraint) GetForeignColumns() []int32 {
	if m != nil {
		return m.ForeignColumns
	}
	return nil
}

func (m *RelationInformation_Constraint) GetForeignUpdateType() string {
	if m != nil {
		return m.ForeignUpdateType
	}
	return ""
}

func (m *RelationInformation_Constraint) GetForeignDeleteType() string {
	if m != nil {
		return m.ForeignDeleteType
	}
	return ""
}

func (m *RelationInformation_Constraint) GetForeignMatchType() string {
	if m != nil {
		return m.ForeignMatchType
	}
	return ""
}

type RelationStatistic struct {
	RelationIdx      int32 `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	SizeBytes        int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	SeqScan          int64 `protobuf:"varint,3,opt,name=seq_scan,json=seqScan" json:"seq_scan,omitempty"`
	SeqTupRead       int64 `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead" json:"seq_tup_read,omitempty"`
	IdxScan          int64 `protobuf:"varint,5,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupFetch      int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	NTupIns          int64 `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns" json:"n_tup_ins,omitempty"`
	NTupUpd          int64 `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd" json:"n_tup_upd,omitempty"`
	NTupDel          int64 `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel" json:"n_tup_del,omitempty"`
	NTupHotUpd       int64 `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd" json:"n_tup_hot_upd,omitempty"`
	NLiveTup         int64 `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup" json:"n_live_tup,omitempty"`
	NDeadTup         int64 `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup" json:"n_dead_tup,omitempty"`
	NModSinceAnalyze int64 `protobuf:"varint,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze" json:"n_mod_since_analyze,omitempty"`
	HeapBlksRead     int64 `protobuf:"varint,18,opt,name=heap_blks_read,json=heapBlksRead" json:"heap_blks_read,omitempty"`
	HeapBlksHit      int64 `protobuf:"varint,19,opt,name=heap_blks_hit,json=heapBlksHit" json:"heap_blks_hit,omitempty"`
	IdxBlksRead      int64 `protobuf:"varint,20,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit       int64 `protobuf:"varint,21,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
	ToastBlksRead    int64 `protobuf:"varint,22,opt,name=toast_blks_read,json=toastBlksRead" json:"toast_blks_read,omitempty"`
	ToastBlksHit     int64 `protobuf:"varint,23,opt,name=toast_blks_hit,json=toastBlksHit" json:"toast_blks_hit,omitempty"`
	TidxBlksRead     int64 `protobuf:"varint,24,opt,name=tidx_blks_read,json=tidxBlksRead" json:"tidx_blks_read,omitempty"`
	TidxBlksHit      int64 `protobuf:"varint,25,opt,name=tidx_blks_hit,json=tidxBlksHit" json:"tidx_blks_hit,omitempty"`
}

func (m *RelationStatistic) Reset()                    { *m = RelationStatistic{} }
func (m *RelationStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationStatistic) ProtoMessage()               {}
func (*RelationStatistic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *RelationStatistic) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationStatistic) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *RelationStatistic) GetSeqScan() int64 {
	if m != nil {
		return m.SeqScan
	}
	return 0
}

func (m *RelationStatistic) GetSeqTupRead() int64 {
	if m != nil {
		return m.SeqTupRead
	}
	return 0
}

func (m *RelationStatistic) GetIdxScan() int64 {
	if m != nil {
		return m.IdxScan
	}
	return 0
}

func (m *RelationStatistic) GetIdxTupFetch() int64 {
	if m != nil {
		return m.IdxTupFetch
	}
	return 0
}

func (m *RelationStatistic) GetNTupIns() int64 {
	if m != nil {
		return m.NTupIns
	}
	return 0
}

func (m *RelationStatistic) GetNTupUpd() int64 {
	if m != nil {
		return m.NTupUpd
	}
	return 0
}

func (m *RelationStatistic) GetNTupDel() int64 {
	if m != nil {
		return m.NTupDel
	}
	return 0
}

func (m *RelationStatistic) GetNTupHotUpd() int64 {
	if m != nil {
		return m.NTupHotUpd
	}
	return 0
}

func (m *RelationStatistic) GetNLiveTup() int64 {
	if m != nil {
		return m.NLiveTup
	}
	return 0
}

func (m *RelationStatistic) GetNDeadTup() int64 {
	if m != nil {
		return m.NDeadTup
	}
	return 0
}

func (m *RelationStatistic) GetNModSinceAnalyze() int64 {
	if m != nil {
		return m.NModSinceAnalyze
	}
	return 0
}

func (m *RelationStatistic) GetHeapBlksRead() int64 {
	if m != nil {
		return m.HeapBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetHeapBlksHit() int64 {
	if m != nil {
		return m.HeapBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetIdxBlksRead() int64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetIdxBlksHit() int64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetToastBlksRead() int64 {
	if m != nil {
		return m.ToastBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetToastBlksHit() int64 {
	if m != nil {
		return m.ToastBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetTidxBlksRead() int64 {
	if m != nil {
		return m.TidxBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetTidxBlksHit() int64 {
	if m != nil {
		return m.TidxBlksHit
	}
	return 0
}

type RelationEvent struct {
	RelationIdx           int32                      `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Type                  RelationEvent_EventType    `protobuf:"varint,2,opt,name=type,enum=pganalyze.collector.RelationEvent_EventType" json:"type,omitempty"`
	OccurredAt            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	ApproximateOccurredAt bool                       `protobuf:"varint,4,opt,name=approximate_occurred_at,json=approximateOccurredAt" json:"approximate_occurred_at,omitempty"`
}

func (m *RelationEvent) Reset()                    { *m = RelationEvent{} }
func (m *RelationEvent) String() string            { return proto.CompactTextString(m) }
func (*RelationEvent) ProtoMessage()               {}
func (*RelationEvent) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *RelationEvent) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationEvent) GetType() RelationEvent_EventType {
	if m != nil {
		return m.Type
	}
	return RelationEvent_MANUAL_VACUUM
}

func (m *RelationEvent) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *RelationEvent) GetApproximateOccurredAt() bool {
	if m != nil {
		return m.ApproximateOccurredAt
	}
	return false
}

type IndexInformation struct {
	IndexIdx      int32       `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	RelationIdx   int32       `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Columns       []int32     `protobuf:"varint,3,rep,packed,name=columns" json:"columns,omitempty"`
	IndexDef      string      `protobuf:"bytes,4,opt,name=index_def,json=indexDef" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,5,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	IsPrimary     bool        `protobuf:"varint,6,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,7,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,8,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	Fillfactor    int32       `protobuf:"varint,9,opt,name=fillfactor" json:"fillfactor,omitempty"`
	IndexType     string      `protobuf:"bytes,10,opt,name=index_type,json=indexType" json:"index_type,omitempty"`
}

func (m *IndexInformation) Reset()                    { *m = IndexInformation{} }
func (m *IndexInformation) String() string            { return proto.CompactTextString(m) }
func (*IndexInformation) ProtoMessage()               {}
func (*IndexInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *IndexInformation) GetIndexIdx() int32 {
	if m != nil {
		return m.IndexIdx
	}
	return 0
}

func (m *IndexInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *IndexInformation) GetColumns() []int32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *IndexInformation) GetIndexDef() string {
	if m != nil {
		return m.IndexDef
	}
	return ""
}

func (m *IndexInformation) GetConstraintDef() *NullString {
	if m != nil {
		return m.ConstraintDef
	}
	return nil
}

func (m *IndexInformation) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *IndexInformation) GetIsUnique() bool {
	if m != nil {
		return m.IsUnique
	}
	return false
}

func (m *IndexInformation) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *IndexInformation) GetFillfactor() int32 {
	if m != nil {
		return m.Fillfactor
	}
	return 0
}

func (m *IndexInformation) GetIndexType() string {
	if m != nil {
		return m.IndexType
	}
	return ""
}

type IndexStatistic struct {
	IndexIdx    int32 `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	SizeBytes   int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IdxScan     int64 `protobuf:"varint,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupRead  int64 `protobuf:"varint,4,opt,name=idx_tup_read,json=idxTupRead" json:"idx_tup_read,omitempty"`
	IdxTupFetch int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead int64 `protobuf:"varint,7,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit  int64 `protobuf:"varint,8,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
}

func (m *IndexStatistic) Reset()                    { *m = IndexStatistic{} }
func (m *IndexStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexStatistic) ProtoMessage()               {}
func (*IndexStatistic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *IndexStatistic) GetIndexIdx() int32 {
	if m != nil {
		return m.IndexIdx
	}
	return 0
}

func (m *IndexStatistic) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *IndexStatistic) GetIdxScan() int64 {
	if m != nil {
		return m.IdxScan
	}
	return 0
}

func (m *IndexStatistic) GetIdxTupRead() int64 {
	if m != nil {
		return m.IdxTupRead
	}
	return 0
}

func (m *IndexStatistic) GetIdxTupFetch() int64 {
	if m != nil {
		return m.IdxTupFetch
	}
	return 0
}

func (m *IndexStatistic) GetIdxBlksRead() int64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return 0
}

func (m *IndexStatistic) GetIdxBlksHit() int64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return 0
}

type FunctionInformation struct {
	FunctionIdx     int32    `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Language        string   `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Source          string   `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	SourceBin       string   `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin" json:"source_bin,omitempty"`
	Config          []string `protobuf:"bytes,6,rep,name=config" json:"config,omitempty"`
	Result          string   `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Aggregate       bool     `protobuf:"varint,9,opt,name=aggregate" json:"aggregate,omitempty"`
	Window          bool     `protobuf:"varint,10,opt,name=window" json:"window,omitempty"`
	SecurityDefiner bool     `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner" json:"security_definer,omitempty"`
	Leakproof       bool     `protobuf:"varint,12,opt,name=leakproof" json:"leakproof,omitempty"`
	Strict          bool     `protobuf:"varint,13,opt,name=strict" json:"strict,omitempty"`
	ReturnsSet      bool     `protobuf:"varint,14,opt,name=returns_set,json=returnsSet" json:"returns_set,omitempty"`
	Volatile        string   `protobuf:"bytes,15,opt,name=volatile" json:"volatile,omitempty"`
}

func (m *FunctionInformation) Reset()                    { *m = FunctionInformation{} }
func (m *FunctionInformation) String() string            { return proto.CompactTextString(m) }
func (*FunctionInformation) ProtoMessage()               {}
func (*FunctionInformation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *FunctionInformation) GetFunctionIdx() int32 {
	if m != nil {
		return m.FunctionIdx
	}
	return 0
}

func (m *FunctionInformation) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *FunctionInformation) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *FunctionInformation) GetSourceBin() string {
	if m != nil {
		return m.SourceBin
	}
	return ""
}

func (m *FunctionInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *FunctionInformation) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *FunctionInformation) GetAggregate() bool {
	if m != nil {
		return m.Aggregate
	}
	return false
}

func (m *FunctionInformation) GetWindow() bool {
	if m != nil {
		return m.Window
	}
	return false
}

func (m *FunctionInformation) GetSecurityDefiner() bool {
	if m != nil {
		return m.SecurityDefiner
	}
	return false
}

func (m *FunctionInformation) GetLeakproof() bool {
	if m != nil {
		return m.Leakproof
	}
	return false
}

func (m *FunctionInformation) GetStrict() bool {
	if m != nil {
		return m.Strict
	}
	return false
}

func (m *FunctionInformation) GetReturnsSet() bool {
	if m != nil {
		return m.ReturnsSet
	}
	return false
}

func (m *FunctionInformation) GetVolatile() string {
	if m != nil {
		return m.Volatile
	}
	return ""
}

type FunctionStatistic struct {
	FunctionIdx int32   `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Calls       int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime   float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	SelfTime    float64 `protobuf:"fixed64,4,opt,name=self_time,json=selfTime" json:"self_time,omitempty"`
}

func (m *FunctionStatistic) Reset()                    { *m = FunctionStatistic{} }
func (m *FunctionStatistic) String() string            { return proto.CompactTextString(m) }
func (*FunctionStatistic) ProtoMessage()               {}
func (*FunctionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *FunctionStatistic) GetFunctionIdx() int32 {
	if m != nil {
		return m.FunctionIdx
	}
	return 0
}

func (m *FunctionStatistic) GetCalls() int64 {
	if m != nil {
		return m.Calls
	}
	return 0
}

func (m *FunctionStatistic) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *FunctionStatistic) GetSelfTime() float64 {
	if m != nil {
		return m.SelfTime
	}
	return 0
}

func init() {
	proto.RegisterType((*FullSnapshot)(nil), "pganalyze.collector.FullSnapshot")
	proto.RegisterType((*CollectorStatistic)(nil), "pganalyze.collector.CollectorStatistic")
	proto.RegisterType((*RoleInformation)(nil), "pganalyze.collector.RoleInformation")
	proto.RegisterType((*DatabaseInformation)(nil), "pganalyze.collector.DatabaseInformation")
	proto.RegisterType((*PostgresVersion)(nil), "pganalyze.collector.PostgresVersion")
	proto.RegisterType((*Setting)(nil), "pganalyze.collector.Setting")
	proto.RegisterType((*Replication)(nil), "pganalyze.collector.Replication")
	proto.RegisterType((*StandbyReference)(nil), "pganalyze.collector.StandbyReference")
	proto.RegisterType((*StandbyInformation)(nil), "pganalyze.collector.StandbyInformation")
	proto.RegisterType((*StandbyStatistic)(nil), "pganalyze.collector.StandbyStatistic")
	proto.RegisterType((*Backend)(nil), "pganalyze.collector.Backend")
	proto.RegisterType((*TablespaceReference)(nil), "pganalyze.collector.TablespaceReference")
	proto.RegisterType((*TablespaceInformation)(nil), "pganalyze.collector.TablespaceInformation")
	proto.RegisterType((*QueryStatistic)(nil), "pganalyze.collector.QueryStatistic")
	proto.RegisterType((*HistoricQueryStatistics)(nil), "pganalyze.collector.HistoricQueryStatistics")
	proto.RegisterType((*RelationInformation)(nil), "pganalyze.collector.RelationInformation")
	proto.RegisterType((*RelationInformation_Column)(nil), "pganalyze.collector.RelationInformation.Column")
	proto.RegisterType((*RelationInformation_Constraint)(nil), "pganalyze.collector.RelationInformation.Constraint")
	proto.RegisterType((*RelationStatistic)(nil), "pganalyze.collector.RelationStatistic")
	proto.RegisterType((*RelationEvent)(nil), "pganalyze.collector.RelationEvent")
	proto.RegisterType((*IndexInformation)(nil), "pganalyze.collector.IndexInformation")
	proto.RegisterType((*IndexStatistic)(nil), "pganalyze.collector.IndexStatistic")
	proto.RegisterType((*FunctionInformation)(nil), "pganalyze.collector.FunctionInformation")
	proto.RegisterType((*FunctionStatistic)(nil), "pganalyze.collector.FunctionStatistic")
	proto.RegisterEnum("pganalyze.collector.RelationEvent_EventType", RelationEvent_EventType_name, RelationEvent_EventType_value)
}

func init() { proto.RegisterFile("full_snapshot.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 3741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x7a, 0x4b, 0x73, 0x23, 0xc9,
	0x71, 0xff, 0x1f, 0x04, 0x1f, 0x40, 0x02, 0x20, 0xc0, 0x22, 0x39, 0x83, 0x99, 0xd9, 0xd5, 0x72,
	0xa1, 0xd1, 0x0e, 0x25, 0xad, 0xb8, 0xff, 0x98, 0x71, 0xf8, 0x11, 0x8a, 0xb5, 0xc4, 0x21, 0x77,
	0x3c, 0xb3, 0xe6, 0xec, 0x8c, 0x9a, 0xe4, 0x6a, 0xad, 0x08, 0xbb, 0xa3, 0xd1, 0x5d, 0x00, 0x4b,
	0xd3, 0xe8, 0xee, 0xa9, 0xaa, 0xe6, 0x80, 0xeb, 0x8b, 0xc2, 0xbe, 0xf8, 0xe6, 0x8f, 0xe0, 0x08,
	0x9f, 0x7d, 0xb0, 0x2f, 0x0a, 0x1f, 0x7d, 0x72, 0xf8, 0x71, 0xb3, 0x43, 0x27, 0xcb, 0x92, 0x6d,
	0x39, 0xc2, 0x37, 0x5f, 0xfc, 0x05, 0x1c, 0x99, 0x55, 0xfd, 0x02, 0x30, 0x20, 0x65, 0xfb, 0x86,
	0xca, 0xfc, 0x65, 0x56, 0x75, 0x65, 0x56, 0x66, 0x56, 0x16, 0x60, 0x7b, 0x94, 0x86, 0xa1, 0xab,
	0x22, 0x2f, 0x51, 0x17, 0xb1, 0x3e, 0x48, 0x64, 0xac, 0x63, 0xb6, 0x9d, 0x8c, 0xbd, 0xc8, 0x0b,
	0xaf, 0xbe, 0xe4, 0x07, 0x7e, 0x1c, 0x86, 0xdc, 0xd7, 0xb1, 0xbc, 0xfb, 0xde, 0x38, 0x8e, 0xc7,
	0x21, 0xff, 0x88, 0x20, 0xc3, 0x74, 0xf4, 0x91, 0x16, 0x13, 0xae, 0xb4, 0x37, 0x49, 0x8c, 0xd4,
	0xdd, 0xb6, 0xba, 0xf0, 0x24, 0x0f, 0xcc, 0x68, 0xf0, 0x67, 0x3b, 0xd0, 0x7e, 0x92, 0x86, 0xe1,
	0xa9, 0x55, 0xcd, 0x7e, 0x05, 0x6e, 0x65, 0xd3, 0xb8, 0x97, 0x5c, 0x2a, 0x11, 0x47, 0xee, 0xc4,
	0xfb, 0x61, 0x2c, 0xfb, 0xb5, 0xbd, 0xda, 0xfe, 0x9a, 0xb3, 0x93, 0x71, 0x3f, 0x37, 0xcc, 0xe7,
	0xc8, 0x5b, 0x2c, 0x25, 0xa2, 0x58, 0xf6, 0x57, 0x16, 0x4b, 0x21, 0x8f, 0x7d, 0x13, 0xb6, 0xf2,
	0x85, 0x67, 0x62, 0xfd, 0xfa, 0x5e, 0x6d, 0xbf, 0xe9, 0xf4, 0x72, 0x86, 0x95, 0x60, 0xef, 0x02,
	0x8c, 0x3c, 0x11, 0xf2, 0xc0, 0x95, 0x69, 0xd4, 0x5f, 0xdd, 0xab, 0xed, 0x37, 0x9c, 0xa6, 0xa1,
	0x38, 0x69, 0xc4, 0xbe, 0x0a, 0x9d, 0x7c, 0x05, 0x69, 0x2a, 0x82, 0x3e, 0x90, 0x9e, 0x76, 0x46,
	0x3c, 0x4f, 0x45, 0xc0, 0x3e, 0x86, 0xb6, 0xd5, 0xcb, 0x03, 0xd7, 0xd3, 0xfd, 0xd6, 0x5e, 0x6d,
	0xbf, 0xf5, 0xf0, 0xee, 0x81, 0xd9, 0xb3, 0x83, 0x6c, 0xcf, 0x0e, 0xce, 0xb2, 0x3d, 0x73, 0x5a,
	0x39, 0xfe, 0x50, 0xb3, 0x5f, 0x85, 0xdb, 0x85, 0xb8, 0x88, 0x34, 0x97, 0x97, 0x5e, 0xe8, 0x2a,
	0xee, 0xab, 0x7e, 0x7b, 0xaf, 0xb6, 0xdf, 0x71, 0x76, 0x73, 0xf6, 0x33, 0xcb, 0x3d, 0xe5, 0xbe,
	0x62, 0x5f, 0xc0, 0x76, 0xf1, 0x9d, 0x4a, 0x7b, 0x5a, 0x28, 0x2d, 0xfc, 0xfe, 0x0e, 0xcd, 0xfe,
	0xe0, 0x60, 0x81, 0x19, 0x0f, 0x8e, 0xb2, 0x5f, 0xa7, 0x19, 0xdc, 0x61, 0xfe, 0x1c, 0x8d, 0x7d,
	0x1d, 0x8a, 0x8d, 0x72, 0xb9, 0x94, 0xb1, 0x54, 0xfd, 0xdd, 0xbd, 0xfa, 0x7e, 0xd3, 0xe9, 0xe6,
	0xf4, 0x4f, 0x88, 0xcc, 0x1e, 0xc1, 0xba, 0xba, 0x52, 0x9a, 0x4f, 0xfa, 0x01, 0xcd, 0x7b, 0x6f,
	0xe1, 0xbc, 0xa7, 0x04, 0x71, 0x2c, 0x94, 0xbd, 0x80, 0x5e, 0x12, 0x2b, 0x3d, 0x96, 0x5c, 0xe5,
	0x06, 0xe2, 0x24, 0x7e, 0x7f, 0xa1, 0xf8, 0x4b, 0x0b, 0xb6, 0x46, 0x73, 0xba, 0x49, 0x95, 0xc0,
	0x7e, 0x1b, 0xba, 0x32, 0x0e, 0xb9, 0x2b, 0xf9, 0x88, 0x4b, 0x1e, 0xf9, 0x5c, 0xf5, 0x47, 0x7b,
	0xf5, 0xfd, 0xd6, 0xc3, 0xc1, 0x42, 0x7d, 0x4e, 0x1c, 0x72, 0x27, 0x83, 0x3a, 0x9b, 0xb2, 0x3c,
	0x54, 0xec, 0xfb, 0xb0, 0x1d, 0x78, 0xda, 0x1b, 0x7a, 0xaa, 0xa2, 0x70, 0x4c, 0x0a, 0x3f, 0x58,
	0xa8, 0xf0, 0xd8, 0xe2, 0x0b, 0xa5, 0x2c, 0x98, 0x25, 0x29, 0xf6, 0x3d, 0xd8, 0xa2, 0x55, 0x8a,
	0x68, 0x14, 0xcb, 0x89, 0xa7, 0x45, 0x1c, 0xa9, 0x7e, 0x44, 0x6a, 0xef, 0xbf, 0x75, 0x9d, 0xcf,
	0x0a, 0xb0, 0xd3, 0x93, 0x55, 0x82, 0x62, 0xbf, 0x0b, 0xbb, 0xf9, 0x5a, 0x2b, 0x6a, 0x63, 0x52,
	0xbb, 0xbf, 0x74, 0xb5, 0x65, 0xd5, 0x3b, 0xc1, 0x3c, 0x51, 0xb1, 0x5f, 0x87, 0xc6, 0xd0, 0xf3,
	0x5f, 0xf1, 0x28, 0x50, 0xfd, 0x2b, 0xd2, 0xf8, 0xce, 0x42, 0x8d, 0x8f, 0x0d, 0xc8, 0xc9, 0xd1,
	0x28, 0xa9, 0xb8, 0xd6, 0x22, 0x1a, 0xab, 0xfe, 0x97, 0x4b, 0x24, 0x4f, 0x0d, 0xc8, 0xc9, 0xd1,
	0xec, 0x31, 0xb4, 0x24, 0x4f, 0x42, 0xe1, 0xd3, 0x1a, 0xfa, 0xbf, 0x4f, 0x7e, 0xb1, 0xb7, 0x78,
	0x7f, 0x0a, 0x9c, 0x53, 0x16, 0x62, 0xbf, 0x07, 0xbb, 0xda, 0x1b, 0x86, 0x5c, 0x25, 0x9e, 0x5f,
	0x31, 0xe2, 0x1f, 0xd4, 0x96, 0xec, 0xcb, 0x59, 0x2e, 0x52, 0xd8, 0x71, 0x47, 0xcf, 0x13, 0x15,
	0x0b, 0xe0, 0x76, 0x49, 0x7f, 0x65, 0xe3, 0xff, 0xd0, 0xcc, 0xf0, 0x8d, 0x6b, 0x66, 0x28, 0xef,
	0xfd, 0x2d, 0xbd, 0x88, 0xac, 0xf0, 0x98, 0xbc, 0x4e, 0xb9, 0xbc, 0x2a, 0x7f, 0xc0, 0xdf, 0x18,
	0xf5, 0x5f, 0x5d, 0xa8, 0xfe, 0x7b, 0x88, 0x2e, 0xd6, 0xde, 0x7d, 0x5d, 0x19, 0x53, 0xc4, 0x90,
	0x3c, 0x24, 0xed, 0x65, 0x9d, 0x7f, 0x5b, 0x5b, 0xe2, 0xda, 0x8e, 0x15, 0x28, 0xb9, 0xb6, 0x9c,
	0x25, 0xd1, 0x52, 0x45, 0x14, 0xf0, 0x69, 0x59, 0xed, 0xdf, 0x2d, 0x5b, 0xea, 0x33, 0x44, 0x97,
	0x96, 0x2a, 0x2a, 0x63, 0x5a, 0xea, 0x28, 0x8d, 0xfc, 0xd9, 0xa5, 0xfe, 0xfd, 0xb2, 0xa5, 0x3e,
	0xb1, 0x02, 0xa5, 0xa5, 0x8e, 0x66, 0x49, 0x8a, 0x9d, 0x03, 0x33, 0xbb, 0x5a, 0x31, 0xdb, 0x3f,
	0x18, 0xc5, 0x5f, 0x7b, 0xfb, 0xbe, 0x96, 0x2d, 0xb6, 0xf5, 0x7a, 0x86, 0x52, 0x32, 0x56, 0x1e,
	0x89, 0x55, 0xff, 0x1f, 0xaf, 0x35, 0x56, 0x11, 0x87, 0x8d, 0xb1, 0xf2, 0xb1, 0x62, 0x02, 0xee,
	0x5c, 0x08, 0xa5, 0x63, 0x29, 0x7c, 0x77, 0x4e, 0xf3, 0x4f, 0x8c, 0xe6, 0x0f, 0x17, 0x6a, 0x7e,
	0x6a, 0xc5, 0xaa, 0x33, 0x28, 0xe7, 0xf6, 0xc5, 0x62, 0x06, 0x1e, 0x97, 0xdc, 0x2f, 0x2a, 0xbb,
	0xf2, 0xd3, 0x65, 0xc7, 0x25, 0xf3, 0x8c, 0x4a, 0x18, 0x91, 0xf3, 0xc4, 0xaa, 0xdf, 0x95, 0x3e,
	0xe2, 0x9f, 0x6f, 0xe2, 0x77, 0xa5, 0x4c, 0x25, 0x67, 0x49, 0x8a, 0x9d, 0x40, 0x37, 0xd7, 0xcc,
	0x2f, 0x79, 0xa4, 0x55, 0xff, 0xe7, 0xb5, 0x65, 0x91, 0xdf, 0x82, 0x3f, 0x41, 0xac, 0xb3, 0x29,
	0xcb, 0x43, 0x72, 0x0d, 0xe3, 0xc5, 0x95, 0x4d, 0xf8, 0x97, 0x65, 0xae, 0x41, 0x7e, 0x5c, 0x71,
	0x0d, 0x31, 0x43, 0x29, 0x1d, 0x8e, 0xd2, 0xb7, 0xff, 0xeb, 0xb5, 0x87, 0xa3, 0xe4, 0x1a, 0xa2,
	0x32, 0x26, 0x7b, 0xe5, 0x87, 0xa3, 0xb2, 0xd4, 0x5f, 0x2c, 0xb3, 0x57, 0x76, 0x3c, 0x2a, 0xf6,
	0x1a, 0xcd, 0x13, 0xab, 0x87, 0xaf, 0xb4, 0xe6, 0x7f, 0xbf, 0xc9, 0xe1, 0x2b, 0xd9, 0x6b, 0x34,
	0x4b, 0x52, 0x9f, 0xae, 0x36, 0xa6, 0xbd, 0xab, 0x4f, 0xd7, 0x1b, 0x3f, 0xab, 0xf5, 0x7e, 0x5e,
	0xfb, 0x74, 0xbd, 0xf1, 0x6f, 0xb5, 0xde, 0x2f, 0x6a, 0x83, 0xbf, 0x5e, 0x01, 0x36, 0x5f, 0x9a,
	0x60, 0x6d, 0x36, 0x8e, 0xf3, 0x02, 0xc1, 0x54, 0x5e, 0xcd, 0x71, 0x9c, 0x25, 0xfd, 0x8f, 0xe1,
	0xde, 0x84, 0x4f, 0x62, 0x79, 0xe5, 0x5e, 0x70, 0x2f, 0x71, 0xbd, 0x30, 0x8c, 0x7d, 0x0f, 0x6b,
	0xa8, 0xe1, 0x95, 0xe6, 0xaa, 0xdf, 0xd9, 0xab, 0xed, 0xaf, 0x3a, 0x7d, 0x03, 0x79, 0xca, 0xbd,
	0xe4, 0x30, 0x03, 0x3c, 0x46, 0x3e, 0x3b, 0x80, 0xed, 0xb2, 0x78, 0x3c, 0xfc, 0x21, 0xf7, 0xb5,
	0xea, 0x6f, 0x92, 0xd8, 0x56, 0x21, 0xf6, 0xc2, 0x30, 0x4a, 0x78, 0x53, 0xc5, 0xd8, 0x69, 0xba,
	0x65, 0xbc, 0xa9, 0x73, 0x8c, 0xfe, 0x7d, 0xe8, 0x59, 0xbc, 0x54, 0xca, 0x82, 0x7b, 0x04, 0xde,
	0x34, 0x74, 0x47, 0x29, 0x83, 0xfc, 0x26, 0x6c, 0x79, 0xbe, 0x16, 0x97, 0xdc, 0x1d, 0xc7, 0x32,
	0x4e, 0xb5, 0x88, 0xb8, 0xa2, 0x32, 0x6e, 0xcd, 0xe9, 0x19, 0xc6, 0x6f, 0xe5, 0x74, 0x76, 0x0f,
	0x9a, 0xfe, 0x38, 0x76, 0x7d, 0x2f, 0x0c, 0x55, 0xff, 0x2b, 0x7b, 0xb5, 0xfd, 0xba, 0xd3, 0xf0,
	0xc7, 0xf1, 0x11, 0x8e, 0x07, 0x7f, 0x5e, 0x87, 0xee, 0x4c, 0xd1, 0xc0, 0xee, 0x40, 0xc3, 0x54,
	0x1d, 0xc1, 0xd4, 0x16, 0xdb, 0x1b, 0x54, 0x46, 0x04, 0x53, 0xd6, 0x87, 0x0d, 0x11, 0x5d, 0x70,
	0x29, 0x34, 0x15, 0xd4, 0x0d, 0x27, 0x1b, 0xb2, 0x1d, 0x58, 0x0b, 0xe3, 0xb1, 0x30, 0x75, 0x73,
	0xc3, 0x31, 0x03, 0x9a, 0x5b, 0x72, 0x4f, 0x73, 0x37, 0x18, 0xda, 0x5a, 0xb9, 0x61, 0x08, 0xc7,
	0x43, 0xf6, 0x1e, 0xb4, 0x2c, 0x13, 0xd5, 0xf7, 0xd7, 0x88, 0x0d, 0x86, 0x84, 0x6b, 0x42, 0x73,
	0xaa, 0x34, 0xe1, 0xd2, 0x4d, 0x15, 0x97, 0xfd, 0x75, 0x53, 0x6a, 0x13, 0xe5, 0x5c, 0x71, 0xc9,
	0xf6, 0xaa, 0x79, 0x7f, 0x83, 0xf8, 0x95, 0xac, 0xfe, 0x2e, 0xc0, 0xf0, 0x2a, 0xf1, 0x94, 0x72,
	0x65, 0xa8, 0xfa, 0x0d, 0xa3, 0xc0, 0x50, 0x9c, 0x50, 0x99, 0xaa, 0x35, 0x8a, 0xb8, 0xf1, 0xdb,
	0x50, 0x4c, 0x84, 0xee, 0x37, 0xe9, 0x83, 0xbb, 0x05, 0xfd, 0x04, 0xc9, 0xec, 0x0c, 0x76, 0x50,
	0xea, 0x4d, 0x2c, 0x03, 0xf7, 0xd2, 0x0b, 0x45, 0xe0, 0xa6, 0x91, 0x16, 0x21, 0xf9, 0xd8, 0xdb,
	0x42, 0xc7, 0x67, 0x69, 0x18, 0x16, 0x15, 0x3c, 0xcb, 0xe4, 0x3f, 0x47, 0xf1, 0x73, 0x94, 0x66,
	0xb7, 0x60, 0xdd, 0x8f, 0xa3, 0x91, 0x18, 0xf7, 0x5b, 0x54, 0x2c, 0xdb, 0x11, 0x6e, 0xdb, 0x84,
	0x4f, 0x86, 0x5c, 0xba, 0xf1, 0xa8, 0xdf, 0xde, 0xab, 0xef, 0xaf, 0x39, 0x0d, 0x43, 0x78, 0x31,
	0x1a, 0xfc, 0x65, 0x1d, 0xb6, 0x17, 0x14, 0x64, 0xec, 0x7d, 0x68, 0x17, 0x95, 0x5d, 0x6e, 0xba,
	0x56, 0x5e, 0xa6, 0x05, 0x53, 0x76, 0x1f, 0x36, 0xe3, 0x37, 0x11, 0x97, 0x6e, 0x6e, 0x5f, 0x73,
	0x2d, 0x6a, 0x13, 0xd5, 0xb1, 0x46, 0xbe, 0x0b, 0x0d, 0x1e, 0xf9, 0x71, 0x20, 0xa2, 0xb1, 0xbd,
	0x05, 0xe5, 0x63, 0x74, 0x00, 0xfc, 0x40, 0x4f, 0x73, 0x32, 0x67, 0xd3, 0xc9, 0x86, 0x6c, 0x17,
	0xd6, 0x7d, 0x57, 0x5f, 0x25, 0xc6, 0x90, 0x4d, 0x67, 0xcd, 0x3f, 0xbb, 0x4a, 0x38, 0x1a, 0x59,
	0x28, 0x57, 0xf3, 0x49, 0x42, 0x42, 0xc6, 0x88, 0x20, 0xd4, 0x99, 0xa5, 0x90, 0x2f, 0x87, 0x61,
	0xfc, 0xc6, 0x2d, 0xb6, 0x5c, 0x59, 0x5b, 0xf6, 0x88, 0x71, 0x54, 0xd0, 0x17, 0x5a, 0xac, 0xb1,
	0xd8, 0x62, 0x78, 0x4f, 0x93, 0xf1, 0x97, 0x3c, 0x72, 0xa7, 0x22, 0x20, 0xb3, 0x76, 0x9c, 0xa6,
	0xa1, 0x7c, 0x21, 0x02, 0xf6, 0x10, 0x76, 0x27, 0x22, 0x12, 0x93, 0x74, 0xe2, 0x4e, 0xd2, 0x50,
	0x8b, 0xa9, 0xe7, 0x6b, 0x42, 0x02, 0x21, 0xb7, 0x2d, 0xf3, 0x79, 0xc6, 0x43, 0x99, 0xef, 0xc0,
	0x3b, 0xc5, 0xbd, 0x0b, 0x43, 0x43, 0xe8, 0xfa, 0x9e, 0xf6, 0xc2, 0x78, 0xec, 0xe2, 0x2e, 0xd3,
	0x35, 0xae, 0xe1, 0xdc, 0xc9, 0x31, 0x27, 0x08, 0x39, 0x32, 0x08, 0xb4, 0xd8, 0xe0, 0x1c, 0xba,
	0x33, 0x37, 0x13, 0xc6, 0x60, 0x15, 0xef, 0xd4, 0x64, 0xad, 0xa6, 0x43, 0xbf, 0xf1, 0x2c, 0xa9,
	0x8b, 0x58, 0x9a, 0x33, 0xd6, 0x74, 0xcc, 0x00, 0xb7, 0x3e, 0x4a, 0x27, 0x5c, 0x0a, 0x9f, 0xac,
	0x52, 0x77, 0xb2, 0xe1, 0xe0, 0xc7, 0x75, 0xd8, 0xb0, 0x65, 0x31, 0xea, 0x8b, 0xbc, 0x09, 0xcf,
	0xf4, 0xe1, 0x6f, 0xbc, 0x93, 0xfa, 0xa9, 0x94, 0x3c, 0xd2, 0xe8, 0xbb, 0x29, 0xb7, 0x7a, 0xdb,
	0x96, 0xf8, 0x39, 0xd2, 0xd8, 0x23, 0x58, 0x4d, 0x23, 0xa1, 0x49, 0x77, 0xeb, 0xe1, 0x7b, 0x6f,
	0xf5, 0xe8, 0x53, 0x2d, 0xb1, 0xfc, 0x26, 0x30, 0xfb, 0x4d, 0x80, 0x61, 0x1c, 0x67, 0x6a, 0x57,
	0x6f, 0x26, 0xda, 0x44, 0x11, 0x33, 0xe9, 0x77, 0xf1, 0x08, 0x2b, 0x9e, 0x29, 0x58, 0xbb, 0x99,
	0x02, 0x20, 0x19, 0xa3, 0xe1, 0xd7, 0x60, 0x5d, 0xc5, 0xa9, 0xf4, 0x8d, 0x6b, 0xdd, 0x40, 0xd8,
	0xc2, 0x71, 0x6a, 0xf3, 0xcb, 0x1d, 0x89, 0x90, 0x93, 0xc7, 0xdd, 0x64, 0x6a, 0x23, 0xf3, 0x44,
	0x84, 0x65, 0x0d, 0xa1, 0x88, 0x38, 0xf9, 0xe1, 0xcd, 0x35, 0x9c, 0x88, 0x88, 0x0f, 0x7e, 0xb4,
	0x06, 0xad, 0xd2, 0x95, 0x84, 0x0e, 0x0b, 0x56, 0xaf, 0x7e, 0x7c, 0xc9, 0xe5, 0x15, 0xd9, 0x10,
	0x0f, 0x4b, 0xe4, 0x58, 0x0a, 0x7a, 0x6d, 0x66, 0xc9, 0x29, 0xba, 0x1d, 0xe5, 0xa7, 0x22, 0xd7,
	0x6d, 0x5b, 0xe6, 0x17, 0x61, 0x3c, 0x3e, 0xb1, 0x2c, 0x76, 0x06, 0x4c, 0x69, 0x2f, 0x0a, 0x86,
	0x95, 0x6b, 0x41, 0x6b, 0x49, 0x89, 0x72, 0x6a, 0xe0, 0x45, 0x55, 0xbc, 0xa5, 0x66, 0x28, 0x8a,
	0xfd, 0x00, 0x76, 0x32, 0xad, 0x95, 0x82, 0xa2, 0x4d, 0x7a, 0x1f, 0x2c, 0xd3, 0x5b, 0x2e, 0x27,
	0xb6, 0xd5, 0x1c, 0x4d, 0x95, 0x57, 0x5c, 0x2a, 0x26, 0x3a, 0xd7, 0xaf, 0xb8, 0x28, 0x25, 0xb2,
	0x15, 0x97, 0x6a, 0xa0, 0xf7, 0xa1, 0x2d, 0x94, 0xab, 0xb4, 0xe4, 0xde, 0x04, 0x43, 0xdb, 0x8e,
	0xc9, 0x17, 0x42, 0x9d, 0x66, 0x24, 0x0c, 0x2f, 0x92, 0xfb, 0x1c, 0x13, 0x6b, 0xbe, 0xb3, 0xbb,
	0xb4, 0xb3, 0x5d, 0x4b, 0xcf, 0x77, 0xf5, 0x01, 0xd6, 0x91, 0x49, 0xe8, 0x5d, 0x15, 0xc8, 0x5b,
	0x84, 0xdc, 0x34, 0xe4, 0x1c, 0x78, 0x1f, 0x36, 0xbd, 0x24, 0x09, 0xaf, 0x28, 0xa1, 0xbb, 0xa1,
	0x37, 0xee, 0xdf, 0xa6, 0xd3, 0xdb, 0x26, 0x2a, 0xe6, 0xf3, 0x13, 0x6f, 0xcc, 0x3e, 0xc1, 0x99,
	0x49, 0x5d, 0xde, 0x27, 0xeb, 0xf7, 0xaf, 0xed, 0x0a, 0xd9, 0x25, 0xe4, 0x04, 0xf6, 0xff, 0x61,
	0x67, 0x56, 0x8d, 0xeb, 0x8d, 0x79, 0xff, 0x0e, 0x4d, 0xc9, 0x66, 0xe0, 0x87, 0x63, 0x3e, 0x78,
	0x04, 0xbd, 0x59, 0x73, 0x53, 0x62, 0x0e, 0x05, 0x3a, 0x99, 0x17, 0x04, 0xd2, 0x86, 0x12, 0x30,
	0xa4, 0xc3, 0x20, 0x90, 0x83, 0x9f, 0xae, 0x00, 0x9b, 0x37, 0x26, 0xca, 0xe5, 0x3e, 0x91, 0x27,
	0x20, 0xc8, 0x2c, 0x1c, 0x4c, 0x2b, 0x95, 0xc5, 0x4a, 0xb5, 0xb2, 0xe8, 0x41, 0x3d, 0x11, 0x81,
	0x8d, 0x6c, 0xf8, 0x13, 0x8d, 0x81, 0x5b, 0x64, 0xcf, 0x86, 0x4b, 0x51, 0xcd, 0xe4, 0x9c, 0x6e,
	0x89, 0xfe, 0x19, 0x06, 0xb8, 0x07, 0xd0, 0xb5, 0x0b, 0xbe, 0x88, 0x95, 0x26, 0xa4, 0x49, 0x42,
	0x9b, 0x86, 0xfc, 0xd4, 0x52, 0x4b, 0x5f, 0x96, 0x60, 0x7c, 0x5d, 0x37, 0x2b, 0x34, 0xa4, 0x97,
	0x18, 0x64, 0xbf, 0x03, 0x1d, 0xdb, 0x91, 0x40, 0xd7, 0x93, 0xda, 0xc6, 0x85, 0x65, 0x46, 0x68,
	0x5b, 0x81, 0x53, 0xc4, 0x53, 0xff, 0xef, 0x2a, 0xf2, 0xdd, 0x44, 0x8a, 0x58, 0x0a, 0x7d, 0x65,
	0xd3, 0x53, 0x1b, 0x89, 0x2f, 0x2d, 0x8d, 0x0a, 0x1b, 0x04, 0xa1, 0x77, 0x73, 0xca, 0x4d, 0x4d,
	0xa7, 0x89, 0x14, 0x74, 0x57, 0x3e, 0xf8, 0xd1, 0x4a, 0x6e, 0x94, 0xa2, 0xb6, 0xbd, 0x76, 0x73,
	0x31, 0x6b, 0x90, 0xbe, 0x2c, 0x6b, 0xe0, 0x80, 0xd6, 0x83, 0xdf, 0x9b, 0x7b, 0x69, 0xdd, 0xf6,
	0x23, 0x79, 0xa4, 0x73, 0x1f, 0xfd, 0x1a, 0x6c, 0xbe, 0x91, 0x42, 0x97, 0xbc, 0xde, 0x6c, 0x74,
	0x87, 0xa8, 0x65, 0xd8, 0x28, 0x4c, 0xd5, 0x45, 0x01, 0x33, 0xbb, 0xdc, 0x21, 0xea, 0xb2, 0xa3,
	0xb1, 0xbe, 0xf0, 0x68, 0xdc, 0x81, 0x46, 0x7e, 0x28, 0x36, 0x4c, 0x4a, 0x1b, 0x9a, 0xf3, 0x30,
	0xf8, 0x8b, 0x55, 0xd8, 0xb0, 0x3d, 0xa2, 0x9b, 0x14, 0x36, 0x4b, 0x1c, 0xeb, 0x1e, 0x34, 0xed,
	0xed, 0x3d, 0x98, 0xd2, 0xc7, 0xaf, 0x39, 0x0d, 0x73, 0x19, 0x2f, 0xbc, 0x6e, 0x95, 0xc8, 0x6f,
	0xf5, 0xba, 0xb5, 0xc5, 0x5e, 0x37, 0x73, 0x4c, 0xd6, 0x67, 0x8f, 0xc9, 0xff, 0xde, 0x99, 0x7e,
	0x03, 0x80, 0xea, 0x12, 0x23, 0xdd, 0xb8, 0x56, 0xba, 0x89, 0x68, 0x23, 0xfa, 0x6d, 0x68, 0xe5,
	0x3d, 0x00, 0x69, 0xca, 0xda, 0xe5, 0xb2, 0x90, 0xb5, 0x13, 0xa4, 0x66, 0x1f, 0x43, 0x9b, 0xbc,
	0xc7, 0xf5, 0x2f, 0xbc, 0x68, 0xcc, 0x6d, 0x95, 0xbb, 0xb4, 0x3f, 0x4d, 0xf8, 0x23, 0x82, 0x63,
	0xa5, 0xf2, 0xc6, 0x13, 0x58, 0x8e, 0xd8, 0x92, 0x28, 0x1b, 0x16, 0x3e, 0xda, 0x2e, 0xfb, 0xe8,
	0x07, 0xd0, 0x45, 0x80, 0xb9, 0x8f, 0x9b, 0x1a, 0xb2, 0x63, 0xfd, 0xcf, 0x13, 0x9a, 0xae, 0xda,
	0x54, 0x4b, 0xbe, 0x0b, 0x50, 0xe0, 0xe8, 0xde, 0xd5, 0x74, 0x9a, 0x39, 0x64, 0xf0, 0x75, 0xd8,
	0x5e, 0xd0, 0x90, 0x5b, 0x54, 0x11, 0x0d, 0xfe, 0xa4, 0x06, 0xbb, 0x0b, 0x5b, 0x6b, 0xe8, 0xe3,
	0xe5, 0x46, 0x5d, 0xee, 0x6e, 0x9d, 0x52, 0xcb, 0x2d, 0x98, 0xb2, 0x0f, 0x81, 0x05, 0x42, 0xbd,
	0x72, 0x13, 0x4f, 0x6a, 0x61, 0xae, 0xd5, 0xb9, 0xeb, 0xf5, 0x90, 0xf3, 0x32, 0x63, 0xcc, 0xba,
	0x67, 0xbd, 0xea, 0x9e, 0xc5, 0x15, 0x60, 0xb5, 0x7c, 0x05, 0x18, 0xfc, 0xe7, 0x2a, 0x6c, 0x56,
	0xbb, 0x2e, 0x55, 0x4f, 0xae, 0xcd, 0x78, 0xf2, 0x0e, 0xac, 0x99, 0x1b, 0xde, 0x0a, 0x1d, 0x24,
	0x33, 0xc0, 0x1d, 0xd3, 0xb1, 0xf6, 0x42, 0x4a, 0x07, 0x34, 0x75, 0xcd, 0x69, 0x12, 0x05, 0x4d,
	0x87, 0x5b, 0x23, 0xe3, 0x37, 0x8a, 0xfc, 0xbf, 0xee, 0xd0, 0x6f, 0x34, 0x86, 0x79, 0x99, 0x71,
	0x87, 0xe1, 0x2b, 0xe5, 0x5e, 0x08, 0x4d, 0xfe, 0x5f, 0x77, 0x3a, 0x86, 0xfc, 0x38, 0x7c, 0xa5,
	0x9e, 0x0a, 0x8d, 0xb7, 0xd5, 0x32, 0x4e, 0x72, 0x2f, 0xa0, 0x23, 0x50, 0x77, 0x36, 0x0b, 0xa0,
	0xc3, 0xbd, 0x00, 0xef, 0xc1, 0x65, 0x64, 0x20, 0xa4, 0x16, 0x3c, 0xb0, 0x27, 0x7e, 0xab, 0x00,
	0x1f, 0x1b, 0xc6, 0x2c, 0x1e, 0x63, 0x90, 0xe6, 0x11, 0xb9, 0x7f, 0x05, 0xff, 0x7d, 0xc3, 0xc0,
	0x0c, 0x6b, 0x8a, 0xf1, 0x7c, 0xc1, 0x4d, 0x93, 0x61, 0x89, 0x9a, 0xad, 0xf7, 0x03, 0xe8, 0x96,
	0x50, 0xb4, 0x5c, 0x30, 0xdf, 0x95, 0xc3, 0x68, 0xb5, 0x1f, 0x02, 0x2b, 0xe1, 0xb2, 0xc5, 0xb6,
	0x08, 0xda, 0xcb, 0xa1, 0xd9, 0x5a, 0xab, 0xe8, 0x6c, 0xa9, 0xed, 0x19, 0x74, 0x69, 0xa5, 0x78,
	0x13, 0x2a, 0x2d, 0xa1, 0x63, 0x56, 0x8a, 0xd4, 0x7c, 0x05, 0xdf, 0x80, 0xad, 0x02, 0x95, 0xa9,
	0xdc, 0x24, 0x60, 0x37, 0x03, 0x66, 0x1a, 0x07, 0xd0, 0x19, 0x86, 0xaf, 0x48, 0x97, 0xb1, 0x71,
	0x97, 0x6c, 0xdc, 0x1a, 0x86, 0xaf, 0x50, 0x17, 0x59, 0xf9, 0x3e, 0x6c, 0x22, 0xc6, 0x44, 0x78,
	0x02, 0xf5, 0x08, 0xd4, 0x1e, 0x86, 0xaf, 0x50, 0x0f, 0x47, 0xd4, 0xe0, 0x27, 0x35, 0xb8, 0xfd,
	0x96, 0x3e, 0xe0, 0xdc, 0x7b, 0x55, 0xed, 0xff, 0xec, 0xbd, 0x6a, 0x65, 0xd9, 0x7b, 0xd5, 0x11,
	0x40, 0xa9, 0xfe, 0xab, 0xdf, 0xbc, 0x35, 0x5a, 0x12, 0x1b, 0xfc, 0x69, 0x13, 0xb6, 0x17, 0x34,
	0x1e, 0x31, 0xab, 0x14, 0x2d, 0xcc, 0x22, 0xab, 0xe4, 0xed, 0xc8, 0x60, 0x8a, 0xb9, 0x33, 0x87,
	0x50, 0x54, 0xb2, 0xf7, 0xa6, 0x8c, 0x48, 0x41, 0xe9, 0x29, 0x74, 0x2f, 0x05, 0x7f, 0xe3, 0x06,
	0x7c, 0x24, 0x22, 0x91, 0xa7, 0xd8, 0x1b, 0xdc, 0x04, 0x36, 0x51, 0xee, 0x38, 0x17, 0x63, 0xcf,
	0xe8, 0x6e, 0x9d, 0x4e, 0x22, 0x45, 0xb1, 0xa0, 0xf5, 0xf0, 0xa3, 0x9b, 0x76, 0x51, 0x0f, 0x8e,
	0x48, 0xce, 0xc9, 0xe4, 0xd9, 0x39, 0xb4, 0xfc, 0x38, 0x52, 0x5a, 0x7a, 0x22, 0xd2, 0xaa, 0xbf,
	0x46, 0xea, 0x1e, 0xfd, 0x12, 0xea, 0x32, 0x59, 0xa7, 0xac, 0x07, 0x93, 0x63, 0x82, 0xf7, 0x56,
	0xa5, 0x31, 0xb2, 0x9a, 0x3d, 0x31, 0x69, 0xaf, 0x5b, 0xa2, 0xd3, 0xb6, 0x7c, 0x05, 0x60, 0x24,
	0xc2, 0x70, 0xe4, 0xe1, 0x24, 0x74, 0xd6, 0xd7, 0x9c, 0x12, 0x05, 0x43, 0xe2, 0x85, 0xa7, 0xdc,
	0x58, 0x04, 0x59, 0x63, 0x66, 0xe3, 0xc2, 0x53, 0x2f, 0x04, 0xbd, 0x04, 0xf5, 0x91, 0x65, 0x3b,
	0x4b, 0x1e, 0xce, 0xe4, 0x5f, 0x88, 0x30, 0x90, 0x3c, 0xa2, 0x93, 0xdd, 0x70, 0x6e, 0x5d, 0x78,
	0xea, 0x59, 0xc1, 0x3e, 0xb2, 0x5c, 0x8c, 0x90, 0x28, 0xa9, 0x63, 0x4f, 0x69, 0x3a, 0xdd, 0x0d,
	0x07, 0x67, 0x39, 0xc3, 0xf1, 0x4c, 0x43, 0xa0, 0x75, 0xe3, 0x86, 0x40, 0xfb, 0xed, 0x0d, 0x81,
	0x6f, 0x01, 0xe3, 0x53, 0x3f, 0x4c, 0x95, 0xb8, 0xe4, 0x21, 0x95, 0x3b, 0xaf, 0xb8, 0x39, 0xd3,
	0x0d, 0x67, 0xab, 0xc4, 0x39, 0x21, 0xc6, 0xdd, 0x1f, 0xd7, 0x60, 0xdd, 0x58, 0x2a, 0x4f, 0x4a,
	0x2b, 0xa5, 0x6b, 0xfa, 0x3d, 0x68, 0x62, 0x4d, 0x63, 0xb6, 0xd5, 0x36, 0x5e, 0x90, 0x40, 0xfb,
	0x79, 0x0c, 0x9d, 0x80, 0x8f, 0xbc, 0x34, 0xfc, 0x25, 0x2f, 0xdb, 0x6d, 0x2b, 0x65, 0x6e, 0xcb,
	0x77, 0xa0, 0x11, 0xc5, 0xda, 0x8d, 0xd2, 0x30, 0xb4, 0xfd, 0xb6, 0x8d, 0x28, 0xd6, 0x08, 0x67,
	0x77, 0xa1, 0x91, 0xc4, 0x4a, 0xe4, 0xe5, 0xda, 0x9a, 0x93, 0x8f, 0xef, 0xfe, 0x6c, 0x05, 0xa0,
	0xf0, 0x09, 0xbc, 0x65, 0x8c, 0x62, 0xc9, 0xc5, 0x18, 0xef, 0xaa, 0x73, 0x47, 0x88, 0x59, 0x9e,
	0x53, 0x3a, 0x49, 0x8b, 0x3e, 0x97, 0xc1, 0x6a, 0xe9, 0x4b, 0xe9, 0x37, 0x66, 0xdf, 0xc2, 0xdf,
	0xf0, 0x48, 0x65, 0x85, 0x68, 0x41, 0x3d, 0xe6, 0x23, 0xdb, 0x85, 0xa2, 0x93, 0xb2, 0x46, 0xdd,
	0xb1, 0xdc, 0xf1, 0x1f, 0x40, 0x37, 0x5b, 0x5a, 0x86, 0x58, 0x27, 0xc4, 0xa6, 0x25, 0x1f, 0x59,
	0xe0, 0x01, 0x6c, 0x67, 0xc0, 0x34, 0x09, 0xb0, 0xd6, 0xa1, 0xc5, 0x6c, 0xd0, 0x74, 0x5b, 0x96,
	0x75, 0x4e, 0x1c, 0xda, 0xff, 0x12, 0x3e, 0xe0, 0x21, 0xcf, 0xf0, 0x8d, 0x0a, 0xfe, 0x98, 0x38,
	0x84, 0xff, 0x10, 0xb2, 0x7d, 0x70, 0x27, 0x9e, 0xf6, 0x2f, 0x0c, 0xdc, 0x94, 0xfa, 0x3d, 0xcb,
	0x79, 0x8e, 0x0c, 0x44, 0x0f, 0xfe, 0x69, 0x0d, 0xb6, 0xe6, 0xde, 0x2f, 0x6e, 0x12, 0xa2, 0xf0,
	0x26, 0x21, 0xbe, 0xe4, 0xb6, 0x5b, 0x6c, 0x72, 0x7f, 0x13, 0x29, 0xa6, 0x51, 0x7c, 0x07, 0x1a,
	0x8a, 0xbf, 0x76, 0x95, 0xef, 0x45, 0x59, 0xd3, 0x48, 0xf1, 0xd7, 0xa7, 0xbe, 0x17, 0xb1, 0x3d,
	0x68, 0x23, 0x4b, 0xa7, 0x89, 0xc9, 0x44, 0xa6, 0x06, 0x00, 0xc5, 0x5f, 0x9f, 0xa5, 0x09, 0xe5,
	0xa1, 0x3b, 0xd0, 0x10, 0xc1, 0xd4, 0x08, 0x9b, 0x12, 0x60, 0x43, 0x04, 0x53, 0x12, 0x1e, 0x40,
	0x07, 0x59, 0x28, 0x3c, 0xe2, 0xda, 0xbf, 0xb0, 0x99, 0xbf, 0x25, 0x82, 0xe9, 0x59, 0x9a, 0x3c,
	0x41, 0x12, 0xbb, 0x0b, 0xcd, 0x88, 0x10, 0xc2, 0x36, 0xf4, 0xea, 0xce, 0x46, 0x74, 0x96, 0x26,
	0xcf, 0x22, 0x55, 0xf0, 0xd2, 0x24, 0xb0, 0x89, 0x9d, 0x78, 0xe7, 0x49, 0x50, 0xf0, 0x02, 0x1e,
	0xda, 0x4c, 0x4e, 0xbc, 0x63, 0x1e, 0xb2, 0xf7, 0xa1, 0x63, 0x78, 0xf4, 0xf7, 0x8a, 0x24, 0x4b,
	0xe1, 0x80, 0xfc, 0xa7, 0xb1, 0x46, 0xf1, 0x77, 0x00, 0x22, 0x37, 0xc4, 0x2b, 0xbc, 0x4e, 0x13,
	0x9b, 0xb7, 0x1b, 0xd1, 0x89, 0xb8, 0xe4, 0x67, 0x69, 0x62, 0xb8, 0x01, 0x65, 0xcb, 0x34, 0xb1,
	0x79, 0xba, 0x11, 0x1d, 0x63, 0xaa, 0x4c, 0x13, 0xf6, 0x2d, 0xd8, 0x8e, 0xdc, 0x49, 0x1c, 0xb8,
	0x4a, 0x60, 0xd4, 0xb1, 0x07, 0xcb, 0x26, 0xe9, 0x5e, 0xf4, 0x3c, 0x0e, 0x4e, 0x91, 0x71, 0x68,
	0xe8, 0x98, 0x58, 0xe9, 0x25, 0xa0, 0x48, 0xe7, 0xcc, 0xa4, 0x73, 0xa4, 0xe6, 0xe9, 0x7c, 0x00,
	0x9d, 0x02, 0x85, 0xd5, 0xc9, 0xb6, 0xd9, 0xab, 0x0c, 0x84, 0xc5, 0x89, 0xdd, 0xcf, 0x42, 0xd1,
	0x4e, 0xbe, 0x9f, 0xb9, 0x9e, 0x3d, 0x68, 0xe7, 0x18, 0x54, 0xb3, 0x6b, 0x3e, 0xdd, 0x42, 0x6c,
	0x89, 0x43, 0xa1, 0xaf, 0xa4, 0xe7, 0x96, 0x29, 0x71, 0x88, 0x9c, 0x6b, 0xc2, 0x32, 0xa4, 0xc0,
	0xa1, 0x2e, 0xdb, 0x92, 0xc8, 0x61, 0xa8, 0x0d, 0x51, 0xd5, 0x45, 0xf5, 0x2d, 0xaa, 0xbc, 0xaa,
	0x01, 0x74, 0x74, 0x65, 0x59, 0xa6, 0xd5, 0xd0, 0xd2, 0xc5, 0xba, 0x06, 0x7f, 0xb5, 0x02, 0x9d,
	0xca, 0x3b, 0xda, 0x4d, 0x3c, 0xfb, 0xbb, 0x36, 0x3c, 0xa0, 0x4f, 0x6f, 0xbe, 0xe5, 0xdd, 0xb2,
	0xa2, 0xf4, 0x20, 0xbf, 0x28, 0xd8, 0x60, 0xf2, 0x6d, 0x68, 0xc5, 0x3e, 0x75, 0xc4, 0xa8, 0x68,
	0xa9, 0x5f, 0x7f, 0x05, 0xca, 0xe0, 0xa6, 0x66, 0xf1, 0x92, 0x44, 0xc6, 0x53, 0x31, 0xc1, 0xe0,
	0x50, 0x56, 0x64, 0xde, 0x31, 0x76, 0x4b, 0xec, 0x17, 0xb9, 0xdc, 0xe0, 0x1c, 0x9a, 0xc5, 0x85,
	0x65, 0x0b, 0x3a, 0xcf, 0x0f, 0x3f, 0x3b, 0x3f, 0x3c, 0x71, 0x3f, 0x3f, 0x3c, 0x3a, 0x3f, 0x7f,
	0xde, 0xfb, 0x7f, 0xac, 0x0b, 0xad, 0xc3, 0xf3, 0xb3, 0x17, 0x19, 0xa1, 0xc6, 0x18, 0x6c, 0x5a,
	0xcc, 0xe1, 0x67, 0x87, 0x27, 0xbf, 0xf3, 0x83, 0x4f, 0x7a, 0x2b, 0xac, 0x07, 0x6d, 0x02, 0x65,
	0x94, 0xfa, 0xe0, 0x3f, 0x56, 0xa0, 0x37, 0xfb, 0x72, 0x88, 0x09, 0xc3, 0xbe, 0x3e, 0x16, 0x17,
	0x02, 0xf3, 0x98, 0x18, 0x4c, 0xe7, 0xb6, 0x78, 0x65, 0x7e, 0x8b, 0x4b, 0x61, 0xb4, 0x5e, 0x0d,
	0xa3, 0xb9, 0xe6, 0x22, 0x04, 0x1b, 0xcd, 0x18, 0x7d, 0x9f, 0xcc, 0x05, 0xe9, 0x1b, 0xf6, 0x6d,
	0x67, 0xa2, 0xf8, 0xbb, 0x00, 0x42, 0xb9, 0x89, 0x14, 0x13, 0x4f, 0x5e, 0x65, 0xcf, 0x3b, 0x42,
	0xbd, 0x34, 0x04, 0x5a, 0x83, 0x72, 0xd3, 0x48, 0xbc, 0x4e, 0xb9, 0x7d, 0x10, 0x68, 0x08, 0x75,
	0x4e, 0x63, 0x8a, 0x4d, 0xca, 0xbc, 0xc4, 0x64, 0xe5, 0x83, 0x50, 0xf4, 0xb2, 0x32, 0x53, 0x79,
	0x34, 0xe7, 0x2a, 0x0f, 0x9c, 0x96, 0xbe, 0x8d, 0xdc, 0xcb, 0x3e, 0x12, 0x12, 0x85, 0x42, 0xf1,
	0x7f, 0xd5, 0x60, 0xb3, 0xfa, 0x9c, 0xba, 0x7c, 0x9f, 0xaf, 0x8f, 0xc0, 0x79, 0x10, 0xad, 0x57,
	0x83, 0xa8, 0x3d, 0xd0, 0xb3, 0x11, 0xd8, 0xc4, 0xd0, 0xec, 0x70, 0x5d, 0x1b, 0x66, 0xe7, 0x42,
	0xc7, 0xc6, 0xf5, 0xa1, 0xa3, 0x31, 0x1b, 0x3a, 0x06, 0x7f, 0x5c, 0x87, 0xed, 0x05, 0xcf, 0xbd,
	0xe8, 0x45, 0xc5, 0xc3, 0x71, 0x71, 0x50, 0xf3, 0x47, 0x60, 0xf3, 0x5c, 0x14, 0x7a, 0xd1, 0x38,
	0xf5, 0xc6, 0x79, 0xd5, 0x92, 0x8d, 0xf1, 0x76, 0x6b, 0xbb, 0xf3, 0xc6, 0x89, 0xb2, 0xe6, 0x3b,
	0x6e, 0x9a, 0x69, 0x9d, 0x0f, 0x45, 0xd6, 0x45, 0x6a, 0x1a, 0xca, 0x63, 0x11, 0x95, 0x2e, 0xc5,
	0xeb, 0x95, 0x77, 0xb1, 0x5b, 0xb0, 0x2e, 0xb9, 0x4a, 0x43, 0x6d, 0xf3, 0xae, 0x1d, 0xb1, 0x77,
	0xa0, 0xe9, 0x8d, 0xc7, 0x92, 0x8f, 0xb3, 0x76, 0x5a, 0xc3, 0x29, 0x08, 0x28, 0xf5, 0x46, 0x44,
	0x41, 0xfc, 0xc6, 0x96, 0x84, 0x76, 0x84, 0xd5, 0xac, 0xe2, 0x7e, 0x2a, 0x85, 0xbe, 0x32, 0xd5,
	0x3b, 0x97, 0xb6, 0x5f, 0xd1, 0xcd, 0xe8, 0xc7, 0x86, 0x8c, 0x13, 0x84, 0xdc, 0x7b, 0x95, 0xc8,
	0x98, 0x1e, 0xe4, 0x68, 0x82, 0x9c, 0x40, 0x5f, 0xa9, 0xa5, 0xf0, 0xb5, 0x2d, 0xfd, 0xec, 0x88,
	0xbd, 0x07, 0x2d, 0xc9, 0x75, 0x2a, 0x23, 0xe5, 0x2a, 0x6e, 0x1a, 0x16, 0x0d, 0x07, 0x2c, 0xe9,
	0x94, 0x6b, 0xdc, 0xba, 0xcb, 0x18, 0xcf, 0x63, 0x68, 0x2e, 0x6e, 0x4d, 0x27, 0x1f, 0x0f, 0xfe,
	0xa8, 0x06, 0x5b, 0x73, 0x4f, 0xe4, 0x37, 0xb1, 0xc7, 0xff, 0xa8, 0x13, 0x70, 0x0f, 0x9a, 0x8a,
	0x87, 0x23, 0xc3, 0x5d, 0x25, 0x6e, 0x03, 0x09, 0xc8, 0x1c, 0xae, 0x53, 0xac, 0x7c, 0xf4, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x76, 0xa1, 0xd2, 0x1b, 0xfe, 0x29, 0x00, 0x00,
}
