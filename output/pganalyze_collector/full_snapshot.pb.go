// Code generated by protoc-gen-go.
// source: full_snapshot.proto
// DO NOT EDIT!

package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogLineInformation_LogLevel int32

const (
	LogLineInformation_UNKNOWN LogLineInformation_LogLevel = 0
	// Postgres log levels https://www.postgresql.org/docs/9.6/static/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS
	LogLineInformation_DEBUG   LogLineInformation_LogLevel = 1
	LogLineInformation_INFO    LogLineInformation_LogLevel = 2
	LogLineInformation_NOTICE  LogLineInformation_LogLevel = 3
	LogLineInformation_WARNING LogLineInformation_LogLevel = 4
	LogLineInformation_ERROR   LogLineInformation_LogLevel = 5
	LogLineInformation_LOG     LogLineInformation_LogLevel = 6
	LogLineInformation_FATAL   LogLineInformation_LogLevel = 7
	LogLineInformation_PANIC   LogLineInformation_LogLevel = 8
	// These levels are typically only used in additional lines for context
	LogLineInformation_DETAIL    LogLineInformation_LogLevel = 9
	LogLineInformation_HINT      LogLineInformation_LogLevel = 10
	LogLineInformation_CONTEXT   LogLineInformation_LogLevel = 11
	LogLineInformation_STATEMENT LogLineInformation_LogLevel = 12
)

var LogLineInformation_LogLevel_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "DEBUG",
	2:  "INFO",
	3:  "NOTICE",
	4:  "WARNING",
	5:  "ERROR",
	6:  "LOG",
	7:  "FATAL",
	8:  "PANIC",
	9:  "DETAIL",
	10: "HINT",
	11: "CONTEXT",
	12: "STATEMENT",
}
var LogLineInformation_LogLevel_value = map[string]int32{
	"UNKNOWN":   0,
	"DEBUG":     1,
	"INFO":      2,
	"NOTICE":    3,
	"WARNING":   4,
	"ERROR":     5,
	"LOG":       6,
	"FATAL":     7,
	"PANIC":     8,
	"DETAIL":    9,
	"HINT":      10,
	"CONTEXT":   11,
	"STATEMENT": 12,
}

func (x LogLineInformation_LogLevel) String() string {
	return proto.EnumName(LogLineInformation_LogLevel_name, int32(x))
}
func (LogLineInformation_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{6, 0}
}

type LogLineInformation_LogClassification int32

const (
	LogLineInformation_UNKNOWN_LOG_CLASSIFICATION LogLineInformation_LogClassification = 0
)

var LogLineInformation_LogClassification_name = map[int32]string{
	0: "UNKNOWN_LOG_CLASSIFICATION",
}
var LogLineInformation_LogClassification_value = map[string]int32{
	"UNKNOWN_LOG_CLASSIFICATION": 0,
}

func (x LogLineInformation_LogClassification) String() string {
	return proto.EnumName(LogLineInformation_LogClassification_name, int32(x))
}
func (LogLineInformation_LogClassification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{6, 1}
}

type SystemInformation_SystemType int32

const (
	SystemInformation_SELF_HOSTED_SYSTEM SystemInformation_SystemType = 0
	SystemInformation_AMAZON_RDS_SYSTEM  SystemInformation_SystemType = 1
	SystemInformation_HEROKU_SYSTEM      SystemInformation_SystemType = 2
)

var SystemInformation_SystemType_name = map[int32]string{
	0: "SELF_HOSTED_SYSTEM",
	1: "AMAZON_RDS_SYSTEM",
	2: "HEROKU_SYSTEM",
}
var SystemInformation_SystemType_value = map[string]int32{
	"SELF_HOSTED_SYSTEM": 0,
	"AMAZON_RDS_SYSTEM":  1,
	"HEROKU_SYSTEM":      2,
}

func (x SystemInformation_SystemType) String() string {
	return proto.EnumName(SystemInformation_SystemType_name, int32(x))
}
func (SystemInformation_SystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{16, 0}
}

type RelationEvent_EventType int32

const (
	RelationEvent_MANUAL_VACUUM  RelationEvent_EventType = 0
	RelationEvent_AUTO_VACUUM    RelationEvent_EventType = 1
	RelationEvent_MANUAL_ANALYZE RelationEvent_EventType = 2
	RelationEvent_AUTO_ANALYZE   RelationEvent_EventType = 3
)

var RelationEvent_EventType_name = map[int32]string{
	0: "MANUAL_VACUUM",
	1: "AUTO_VACUUM",
	2: "MANUAL_ANALYZE",
	3: "AUTO_ANALYZE",
}
var RelationEvent_EventType_value = map[string]int32{
	"MANUAL_VACUUM":  0,
	"AUTO_VACUUM":    1,
	"MANUAL_ANALYZE": 2,
	"AUTO_ANALYZE":   3,
}

func (x RelationEvent_EventType) String() string {
	return proto.EnumName(RelationEvent_EventType_name, int32(x))
}
func (RelationEvent_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{37, 0} }

type FullSnapshot struct {
	// Basic information about this snapshot
	SnapshotVersionMajor  int32                      `protobuf:"varint,1,opt,name=snapshot_version_major,json=snapshotVersionMajor" json:"snapshot_version_major,omitempty"`
	SnapshotVersionMinor  int32                      `protobuf:"varint,2,opt,name=snapshot_version_minor,json=snapshotVersionMinor" json:"snapshot_version_minor,omitempty"`
	CollectorVersion      string                     `protobuf:"bytes,3,opt,name=collector_version,json=collectorVersion" json:"collector_version,omitempty"`
	FailedRun             bool                       `protobuf:"varint,4,opt,name=failed_run,json=failedRun" json:"failed_run,omitempty"`
	SnapshotUuid          string                     `protobuf:"bytes,10,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,12,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	CollectorStatistic    *CollectorStatistic        `protobuf:"bytes,20,opt,name=collector_statistic,json=collectorStatistic" json:"collector_statistic,omitempty"`
	CollectorErrors       []string                   `protobuf:"bytes,21,rep,name=collector_errors,json=collectorErrors" json:"collector_errors,omitempty"`
	// Per server (and hence snapshot)
	System               *System                `protobuf:"bytes,100,opt,name=system" json:"system,omitempty"`
	PostgresVersion      *PostgresVersion       `protobuf:"bytes,101,opt,name=postgres_version,json=postgresVersion" json:"postgres_version,omitempty"`
	RoleReferences       []*RoleReference       `protobuf:"bytes,102,rep,name=role_references,json=roleReferences" json:"role_references,omitempty"`
	DatabaseReferences   []*DatabaseReference   `protobuf:"bytes,103,rep,name=database_references,json=databaseReferences" json:"database_references,omitempty"`
	RoleInformations     []*RoleInformation     `protobuf:"bytes,110,rep,name=role_informations,json=roleInformations" json:"role_informations,omitempty"`
	DatabaseInformations []*DatabaseInformation `protobuf:"bytes,111,rep,name=database_informations,json=databaseInformations" json:"database_informations,omitempty"`
	// 120 RESERVED
	Backends               []*Backend               `protobuf:"bytes,121,rep,name=backends" json:"backends,omitempty"`
	Settings               []*Setting               `protobuf:"bytes,122,rep,name=settings" json:"settings,omitempty"`
	Replication            *Replication             `protobuf:"bytes,123,opt,name=replication" json:"replication,omitempty"`
	TablespaceReferences   []*TablespaceReference   `protobuf:"bytes,130,rep,name=tablespace_references,json=tablespaceReferences" json:"tablespace_references,omitempty"`
	TablespaceInformations []*TablespaceInformation `protobuf:"bytes,131,rep,name=tablespace_informations,json=tablespaceInformations" json:"tablespace_informations,omitempty"`
	LogFileReferences      []*LogFileReference      `protobuf:"bytes,140,rep,name=log_file_references,json=logFileReferences" json:"log_file_references,omitempty"`
	LogLineInformations    []*LogLineInformation    `protobuf:"bytes,141,rep,name=log_line_informations,json=logLineInformations" json:"log_line_informations,omitempty"`
	// Per database
	QueryReferences         []*QueryReference          `protobuf:"bytes,200,rep,name=query_references,json=queryReferences" json:"query_references,omitempty"`
	RelationReferences      []*RelationReference       `protobuf:"bytes,201,rep,name=relation_references,json=relationReferences" json:"relation_references,omitempty"`
	IndexReferences         []*IndexReference          `protobuf:"bytes,202,rep,name=index_references,json=indexReferences" json:"index_references,omitempty"`
	FunctionReferences      []*FunctionReference       `protobuf:"bytes,203,rep,name=function_references,json=functionReferences" json:"function_references,omitempty"`
	QueryInformations       []*QueryInformation        `protobuf:"bytes,210,rep,name=query_informations,json=queryInformations" json:"query_informations,omitempty"`
	QueryStatistics         []*QueryStatistic          `protobuf:"bytes,211,rep,name=query_statistics,json=queryStatistics" json:"query_statistics,omitempty"`
	QuerySamples            []*QuerySample             `protobuf:"bytes,212,rep,name=query_samples,json=querySamples" json:"query_samples,omitempty"`
	HistoricQueryStatistics []*HistoricQueryStatistics `protobuf:"bytes,213,rep,name=historic_query_statistics,json=historicQueryStatistics" json:"historic_query_statistics,omitempty"`
	RelationInformations    []*RelationInformation     `protobuf:"bytes,220,rep,name=relation_informations,json=relationInformations" json:"relation_informations,omitempty"`
	RelationStatistics      []*RelationStatistic       `protobuf:"bytes,221,rep,name=relation_statistics,json=relationStatistics" json:"relation_statistics,omitempty"`
	// reserved 222, used to be relation_bloat_statistics
	RelationEvents       []*RelationEvent       `protobuf:"bytes,223,rep,name=relation_events,json=relationEvents" json:"relation_events,omitempty"`
	IndexInformations    []*IndexInformation    `protobuf:"bytes,224,rep,name=index_informations,json=indexInformations" json:"index_informations,omitempty"`
	IndexStatistics      []*IndexStatistic      `protobuf:"bytes,225,rep,name=index_statistics,json=indexStatistics" json:"index_statistics,omitempty"`
	FunctionInformations []*FunctionInformation `protobuf:"bytes,227,rep,name=function_informations,json=functionInformations" json:"function_informations,omitempty"`
	FunctionStatistics   []*FunctionStatistic   `protobuf:"bytes,228,rep,name=function_statistics,json=functionStatistics" json:"function_statistics,omitempty"`
}

func (m *FullSnapshot) Reset()                    { *m = FullSnapshot{} }
func (m *FullSnapshot) String() string            { return proto.CompactTextString(m) }
func (*FullSnapshot) ProtoMessage()               {}
func (*FullSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *FullSnapshot) GetSnapshotVersionMajor() int32 {
	if m != nil {
		return m.SnapshotVersionMajor
	}
	return 0
}

func (m *FullSnapshot) GetSnapshotVersionMinor() int32 {
	if m != nil {
		return m.SnapshotVersionMinor
	}
	return 0
}

func (m *FullSnapshot) GetCollectorVersion() string {
	if m != nil {
		return m.CollectorVersion
	}
	return ""
}

func (m *FullSnapshot) GetFailedRun() bool {
	if m != nil {
		return m.FailedRun
	}
	return false
}

func (m *FullSnapshot) GetSnapshotUuid() string {
	if m != nil {
		return m.SnapshotUuid
	}
	return ""
}

func (m *FullSnapshot) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *FullSnapshot) GetCollectedIntervalSecs() uint32 {
	if m != nil {
		return m.CollectedIntervalSecs
	}
	return 0
}

func (m *FullSnapshot) GetCollectorStatistic() *CollectorStatistic {
	if m != nil {
		return m.CollectorStatistic
	}
	return nil
}

func (m *FullSnapshot) GetCollectorErrors() []string {
	if m != nil {
		return m.CollectorErrors
	}
	return nil
}

func (m *FullSnapshot) GetSystem() *System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *FullSnapshot) GetPostgresVersion() *PostgresVersion {
	if m != nil {
		return m.PostgresVersion
	}
	return nil
}

func (m *FullSnapshot) GetRoleReferences() []*RoleReference {
	if m != nil {
		return m.RoleReferences
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseReferences() []*DatabaseReference {
	if m != nil {
		return m.DatabaseReferences
	}
	return nil
}

func (m *FullSnapshot) GetRoleInformations() []*RoleInformation {
	if m != nil {
		return m.RoleInformations
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseInformations() []*DatabaseInformation {
	if m != nil {
		return m.DatabaseInformations
	}
	return nil
}

func (m *FullSnapshot) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *FullSnapshot) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *FullSnapshot) GetReplication() *Replication {
	if m != nil {
		return m.Replication
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceReferences() []*TablespaceReference {
	if m != nil {
		return m.TablespaceReferences
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceInformations() []*TablespaceInformation {
	if m != nil {
		return m.TablespaceInformations
	}
	return nil
}

func (m *FullSnapshot) GetLogFileReferences() []*LogFileReference {
	if m != nil {
		return m.LogFileReferences
	}
	return nil
}

func (m *FullSnapshot) GetLogLineInformations() []*LogLineInformation {
	if m != nil {
		return m.LogLineInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryReferences() []*QueryReference {
	if m != nil {
		return m.QueryReferences
	}
	return nil
}

func (m *FullSnapshot) GetRelationReferences() []*RelationReference {
	if m != nil {
		return m.RelationReferences
	}
	return nil
}

func (m *FullSnapshot) GetIndexReferences() []*IndexReference {
	if m != nil {
		return m.IndexReferences
	}
	return nil
}

func (m *FullSnapshot) GetFunctionReferences() []*FunctionReference {
	if m != nil {
		return m.FunctionReferences
	}
	return nil
}

func (m *FullSnapshot) GetQueryInformations() []*QueryInformation {
	if m != nil {
		return m.QueryInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryStatistics() []*QueryStatistic {
	if m != nil {
		return m.QueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetQuerySamples() []*QuerySample {
	if m != nil {
		return m.QuerySamples
	}
	return nil
}

func (m *FullSnapshot) GetHistoricQueryStatistics() []*HistoricQueryStatistics {
	if m != nil {
		return m.HistoricQueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationInformations() []*RelationInformation {
	if m != nil {
		return m.RelationInformations
	}
	return nil
}

func (m *FullSnapshot) GetRelationStatistics() []*RelationStatistic {
	if m != nil {
		return m.RelationStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationEvents() []*RelationEvent {
	if m != nil {
		return m.RelationEvents
	}
	return nil
}

func (m *FullSnapshot) GetIndexInformations() []*IndexInformation {
	if m != nil {
		return m.IndexInformations
	}
	return nil
}

func (m *FullSnapshot) GetIndexStatistics() []*IndexStatistic {
	if m != nil {
		return m.IndexStatistics
	}
	return nil
}

func (m *FullSnapshot) GetFunctionInformations() []*FunctionInformation {
	if m != nil {
		return m.FunctionInformations
	}
	return nil
}

func (m *FullSnapshot) GetFunctionStatistics() []*FunctionStatistic {
	if m != nil {
		return m.FunctionStatistics
	}
	return nil
}

type CollectorStatistic struct {
	GoVersion string `protobuf:"bytes,10,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	// Statistics from after the collection input step
	MemoryHeapAllocatedBytes uint64 `protobuf:"varint,13,opt,name=memory_heap_allocated_bytes,json=memoryHeapAllocatedBytes" json:"memory_heap_allocated_bytes,omitempty"`
	MemoryHeapObjects        uint64 `protobuf:"varint,14,opt,name=memory_heap_objects,json=memoryHeapObjects" json:"memory_heap_objects,omitempty"`
	MemorySystemBytes        uint64 `protobuf:"varint,15,opt,name=memory_system_bytes,json=memorySystemBytes" json:"memory_system_bytes,omitempty"`
	MemoryRssBytes           uint64 `protobuf:"varint,16,opt,name=memory_rss_bytes,json=memoryRssBytes" json:"memory_rss_bytes,omitempty"`
	ActiveGoroutines         int32  `protobuf:"varint,20,opt,name=active_goroutines,json=activeGoroutines" json:"active_goroutines,omitempty"`
	// Diff-ed statistics between two runs
	CgoCalls int64 `protobuf:"varint,30,opt,name=cgo_calls,json=cgoCalls" json:"cgo_calls,omitempty"`
}

func (m *CollectorStatistic) Reset()                    { *m = CollectorStatistic{} }
func (m *CollectorStatistic) String() string            { return proto.CompactTextString(m) }
func (*CollectorStatistic) ProtoMessage()               {}
func (*CollectorStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CollectorStatistic) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *CollectorStatistic) GetMemoryHeapAllocatedBytes() uint64 {
	if m != nil {
		return m.MemoryHeapAllocatedBytes
	}
	return 0
}

func (m *CollectorStatistic) GetMemoryHeapObjects() uint64 {
	if m != nil {
		return m.MemoryHeapObjects
	}
	return 0
}

func (m *CollectorStatistic) GetMemorySystemBytes() uint64 {
	if m != nil {
		return m.MemorySystemBytes
	}
	return 0
}

func (m *CollectorStatistic) GetMemoryRssBytes() uint64 {
	if m != nil {
		return m.MemoryRssBytes
	}
	return 0
}

func (m *CollectorStatistic) GetActiveGoroutines() int32 {
	if m != nil {
		return m.ActiveGoroutines
	}
	return 0
}

func (m *CollectorStatistic) GetCgoCalls() int64 {
	if m != nil {
		return m.CgoCalls
	}
	return 0
}

type RoleInformation struct {
	RoleIdx            int32          `protobuf:"varint,1,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Inherit            bool           `protobuf:"varint,2,opt,name=inherit" json:"inherit,omitempty"`
	Login              bool           `protobuf:"varint,3,opt,name=login" json:"login,omitempty"`
	CreateDb           bool           `protobuf:"varint,4,opt,name=create_db,json=createDb" json:"create_db,omitempty"`
	CreateRole         bool           `protobuf:"varint,5,opt,name=create_role,json=createRole" json:"create_role,omitempty"`
	SuperUser          bool           `protobuf:"varint,6,opt,name=super_user,json=superUser" json:"super_user,omitempty"`
	Replication        bool           `protobuf:"varint,7,opt,name=replication" json:"replication,omitempty"`
	BypassRls          bool           `protobuf:"varint,8,opt,name=bypass_rls,json=bypassRls" json:"bypass_rls,omitempty"`
	ConnectionLimit    int32          `protobuf:"varint,9,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	PasswordValidUntil *NullTimestamp `protobuf:"bytes,10,opt,name=password_valid_until,json=passwordValidUntil" json:"password_valid_until,omitempty"`
	Config             []string       `protobuf:"bytes,11,rep,name=config" json:"config,omitempty"`
	MemberOf           []int32        `protobuf:"varint,12,rep,packed,name=member_of,json=memberOf" json:"member_of,omitempty"`
}

func (m *RoleInformation) Reset()                    { *m = RoleInformation{} }
func (m *RoleInformation) String() string            { return proto.CompactTextString(m) }
func (*RoleInformation) ProtoMessage()               {}
func (*RoleInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RoleInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *RoleInformation) GetInherit() bool {
	if m != nil {
		return m.Inherit
	}
	return false
}

func (m *RoleInformation) GetLogin() bool {
	if m != nil {
		return m.Login
	}
	return false
}

func (m *RoleInformation) GetCreateDb() bool {
	if m != nil {
		return m.CreateDb
	}
	return false
}

func (m *RoleInformation) GetCreateRole() bool {
	if m != nil {
		return m.CreateRole
	}
	return false
}

func (m *RoleInformation) GetSuperUser() bool {
	if m != nil {
		return m.SuperUser
	}
	return false
}

func (m *RoleInformation) GetReplication() bool {
	if m != nil {
		return m.Replication
	}
	return false
}

func (m *RoleInformation) GetBypassRls() bool {
	if m != nil {
		return m.BypassRls
	}
	return false
}

func (m *RoleInformation) GetConnectionLimit() int32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *RoleInformation) GetPasswordValidUntil() *NullTimestamp {
	if m != nil {
		return m.PasswordValidUntil
	}
	return nil
}

func (m *RoleInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RoleInformation) GetMemberOf() []int32 {
	if m != nil {
		return m.MemberOf
	}
	return nil
}

type DatabaseInformation struct {
	DatabaseIdx      int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	OwnerRoleIdx     int32  `protobuf:"varint,2,opt,name=owner_role_idx,json=ownerRoleIdx" json:"owner_role_idx,omitempty"`
	Encoding         string `protobuf:"bytes,3,opt,name=encoding" json:"encoding,omitempty"`
	Collate          string `protobuf:"bytes,4,opt,name=collate" json:"collate,omitempty"`
	CType            string `protobuf:"bytes,5,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	IsTemplate       bool   `protobuf:"varint,6,opt,name=is_template,json=isTemplate" json:"is_template,omitempty"`
	AllowConnections bool   `protobuf:"varint,7,opt,name=allow_connections,json=allowConnections" json:"allow_connections,omitempty"`
	ConnectionLimit  int32  `protobuf:"varint,8,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	// All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent transaction ID wraparound or to
	// allow pg_clog to be shrunk. It is the minimum of the per-table pg_class.relfrozenxid values.
	FrozenXid uint32 `protobuf:"varint,9,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	// All multixact IDs before this one have been replaced with a transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent multixact ID wraparound or to
	// allow pg_multixact to be shrunk. It is the minimum of the per-table pg_class.relminmxid values.
	MinimumMultixactXid uint32 `protobuf:"varint,10,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
	// Whether the collector was able to connect to this database and fetch local catalog data (e.g. schema)
	CollectedLocalCatalogData bool `protobuf:"varint,11,opt,name=collected_local_catalog_data,json=collectedLocalCatalogData" json:"collected_local_catalog_data,omitempty"`
}

func (m *DatabaseInformation) Reset()                    { *m = DatabaseInformation{} }
func (m *DatabaseInformation) String() string            { return proto.CompactTextString(m) }
func (*DatabaseInformation) ProtoMessage()               {}
func (*DatabaseInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *DatabaseInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *DatabaseInformation) GetOwnerRoleIdx() int32 {
	if m != nil {
		return m.OwnerRoleIdx
	}
	return 0
}

func (m *DatabaseInformation) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *DatabaseInformation) GetCollate() string {
	if m != nil {
		return m.Collate
	}
	return ""
}

func (m *DatabaseInformation) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *DatabaseInformation) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

func (m *DatabaseInformation) GetAllowConnections() bool {
	if m != nil {
		return m.AllowConnections
	}
	return false
}

func (m *DatabaseInformation) GetConnectionLimit() int32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *DatabaseInformation) GetFrozenXid() uint32 {
	if m != nil {
		return m.FrozenXid
	}
	return 0
}

func (m *DatabaseInformation) GetMinimumMultixactXid() uint32 {
	if m != nil {
		return m.MinimumMultixactXid
	}
	return 0
}

func (m *DatabaseInformation) GetCollectedLocalCatalogData() bool {
	if m != nil {
		return m.CollectedLocalCatalogData
	}
	return false
}

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *PostgresVersion) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func (m *PostgresVersion) GetShort() string {
	if m != nil {
		return m.Short
	}
	return ""
}

func (m *PostgresVersion) GetNumeric() int64 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

type LogFileReference struct {
	Uuid         string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	S3Location   string `protobuf:"bytes,2,opt,name=s3_location,json=s3Location" json:"s3_location,omitempty"`
	S3CekAlgo    string `protobuf:"bytes,3,opt,name=s3_cek_algo,json=s3CekAlgo" json:"s3_cek_algo,omitempty"`
	S3CmkKeyId   string `protobuf:"bytes,4,opt,name=s3_cmk_key_id,json=s3CmkKeyId" json:"s3_cmk_key_id,omitempty"`
	ByteSize     int64  `protobuf:"varint,5,opt,name=byte_size,json=byteSize" json:"byte_size,omitempty"`
	OriginalName string `protobuf:"bytes,6,opt,name=original_name,json=originalName" json:"original_name,omitempty"`
}

func (m *LogFileReference) Reset()                    { *m = LogFileReference{} }
func (m *LogFileReference) String() string            { return proto.CompactTextString(m) }
func (*LogFileReference) ProtoMessage()               {}
func (*LogFileReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *LogFileReference) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LogFileReference) GetS3Location() string {
	if m != nil {
		return m.S3Location
	}
	return ""
}

func (m *LogFileReference) GetS3CekAlgo() string {
	if m != nil {
		return m.S3CekAlgo
	}
	return ""
}

func (m *LogFileReference) GetS3CmkKeyId() string {
	if m != nil {
		return m.S3CmkKeyId
	}
	return ""
}

func (m *LogFileReference) GetByteSize() int64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

func (m *LogFileReference) GetOriginalName() string {
	if m != nil {
		return m.OriginalName
	}
	return ""
}

type LogLineInformation struct {
	LogFileIdx        int32                                `protobuf:"varint,1,opt,name=log_file_idx,json=logFileIdx" json:"log_file_idx,omitempty"`
	ByteStart         int64                                `protobuf:"varint,2,opt,name=byte_start,json=byteStart" json:"byte_start,omitempty"`
	ByteEnd           int64                                `protobuf:"varint,3,opt,name=byte_end,json=byteEnd" json:"byte_end,omitempty"`
	HasRoleIdx        bool                                 `protobuf:"varint,4,opt,name=has_role_idx,json=hasRoleIdx" json:"has_role_idx,omitempty"`
	RoleIdx           int32                                `protobuf:"varint,5,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	HasDatabaseIdx    bool                                 `protobuf:"varint,6,opt,name=has_database_idx,json=hasDatabaseIdx" json:"has_database_idx,omitempty"`
	DatabaseIdx       int32                                `protobuf:"varint,7,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	HasQueryIdx       bool                                 `protobuf:"varint,8,opt,name=has_query_idx,json=hasQueryIdx" json:"has_query_idx,omitempty"`
	QueryIdx          int32                                `protobuf:"varint,9,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	OccurredAt        *google_protobuf.Timestamp           `protobuf:"bytes,10,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	BackendPid        int32                                `protobuf:"varint,11,opt,name=backend_pid,json=backendPid" json:"backend_pid,omitempty"`
	LogLevel          LogLineInformation_LogLevel          `protobuf:"varint,12,opt,name=log_level,json=logLevel,enum=pganalyze.collector.LogLineInformation_LogLevel" json:"log_level,omitempty"`
	LogClassification LogLineInformation_LogClassification `protobuf:"varint,13,opt,name=log_classification,json=logClassification,enum=pganalyze.collector.LogLineInformation_LogClassification" json:"log_classification,omitempty"`
	AdditionalLines   []*LogLineInformation                `protobuf:"bytes,30,rep,name=additional_lines,json=additionalLines" json:"additional_lines,omitempty"`
}

func (m *LogLineInformation) Reset()                    { *m = LogLineInformation{} }
func (m *LogLineInformation) String() string            { return proto.CompactTextString(m) }
func (*LogLineInformation) ProtoMessage()               {}
func (*LogLineInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *LogLineInformation) GetLogFileIdx() int32 {
	if m != nil {
		return m.LogFileIdx
	}
	return 0
}

func (m *LogLineInformation) GetByteStart() int64 {
	if m != nil {
		return m.ByteStart
	}
	return 0
}

func (m *LogLineInformation) GetByteEnd() int64 {
	if m != nil {
		return m.ByteEnd
	}
	return 0
}

func (m *LogLineInformation) GetHasRoleIdx() bool {
	if m != nil {
		return m.HasRoleIdx
	}
	return false
}

func (m *LogLineInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *LogLineInformation) GetHasDatabaseIdx() bool {
	if m != nil {
		return m.HasDatabaseIdx
	}
	return false
}

func (m *LogLineInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *LogLineInformation) GetHasQueryIdx() bool {
	if m != nil {
		return m.HasQueryIdx
	}
	return false
}

func (m *LogLineInformation) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *LogLineInformation) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *LogLineInformation) GetBackendPid() int32 {
	if m != nil {
		return m.BackendPid
	}
	return 0
}

func (m *LogLineInformation) GetLogLevel() LogLineInformation_LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLineInformation_UNKNOWN
}

func (m *LogLineInformation) GetLogClassification() LogLineInformation_LogClassification {
	if m != nil {
		return m.LogClassification
	}
	return LogLineInformation_UNKNOWN_LOG_CLASSIFICATION
}

func (m *LogLineInformation) GetAdditionalLines() []*LogLineInformation {
	if m != nil {
		return m.AdditionalLines
	}
	return nil
}

type Setting struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Setting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Setting) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func (m *Setting) GetUnit() *NullString {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Setting) GetBootValue() *NullString {
	if m != nil {
		return m.BootValue
	}
	return nil
}

func (m *Setting) GetResetValue() *NullString {
	if m != nil {
		return m.ResetValue
	}
	return nil
}

func (m *Setting) GetSource() *NullString {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Setting) GetSourceFile() *NullString {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Setting) GetSourceLine() *NullString {
	if m != nil {
		return m.SourceLine
	}
	return nil
}

type Replication struct {
	// Are we the primary, or a standby?
	InRecovery bool `protobuf:"varint,1,opt,name=in_recovery,json=inRecovery" json:"in_recovery,omitempty"`
	// Primary information
	CurrentXlogLocation string                `protobuf:"bytes,10,opt,name=current_xlog_location,json=currentXlogLocation" json:"current_xlog_location,omitempty"`
	StandbyReferences   []*StandbyReference   `protobuf:"bytes,11,rep,name=standby_references,json=standbyReferences" json:"standby_references,omitempty"`
	StandbyInformations []*StandbyInformation `protobuf:"bytes,12,rep,name=standby_informations,json=standbyInformations" json:"standby_informations,omitempty"`
	StandbyStatistics   []*StandbyStatistic   `protobuf:"bytes,13,rep,name=standby_statistics,json=standbyStatistics" json:"standby_statistics,omitempty"`
	// Standby information
	IsStreaming        bool                       `protobuf:"varint,20,opt,name=is_streaming,json=isStreaming" json:"is_streaming,omitempty"`
	ReceiveLocation    string                     `protobuf:"bytes,21,opt,name=receive_location,json=receiveLocation" json:"receive_location,omitempty"`
	ReplayLocation     string                     `protobuf:"bytes,22,opt,name=replay_location,json=replayLocation" json:"replay_location,omitempty"`
	ApplyByteLag       int64                      `protobuf:"varint,23,opt,name=apply_byte_lag,json=applyByteLag" json:"apply_byte_lag,omitempty"`
	ReplayTimestamp    *google_protobuf.Timestamp `protobuf:"bytes,24,opt,name=replay_timestamp,json=replayTimestamp" json:"replay_timestamp,omitempty"`
	ReplayTimestampAge int64                      `protobuf:"varint,25,opt,name=replay_timestamp_age,json=replayTimestampAge" json:"replay_timestamp_age,omitempty"`
}

func (m *Replication) Reset()                    { *m = Replication{} }
func (m *Replication) String() string            { return proto.CompactTextString(m) }
func (*Replication) ProtoMessage()               {}
func (*Replication) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *Replication) GetInRecovery() bool {
	if m != nil {
		return m.InRecovery
	}
	return false
}

func (m *Replication) GetCurrentXlogLocation() string {
	if m != nil {
		return m.CurrentXlogLocation
	}
	return ""
}

func (m *Replication) GetStandbyReferences() []*StandbyReference {
	if m != nil {
		return m.StandbyReferences
	}
	return nil
}

func (m *Replication) GetStandbyInformations() []*StandbyInformation {
	if m != nil {
		return m.StandbyInformations
	}
	return nil
}

func (m *Replication) GetStandbyStatistics() []*StandbyStatistic {
	if m != nil {
		return m.StandbyStatistics
	}
	return nil
}

func (m *Replication) GetIsStreaming() bool {
	if m != nil {
		return m.IsStreaming
	}
	return false
}

func (m *Replication) GetReceiveLocation() string {
	if m != nil {
		return m.ReceiveLocation
	}
	return ""
}

func (m *Replication) GetReplayLocation() string {
	if m != nil {
		return m.ReplayLocation
	}
	return ""
}

func (m *Replication) GetApplyByteLag() int64 {
	if m != nil {
		return m.ApplyByteLag
	}
	return 0
}

func (m *Replication) GetReplayTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.ReplayTimestamp
	}
	return nil
}

func (m *Replication) GetReplayTimestampAge() int64 {
	if m != nil {
		return m.ReplayTimestampAge
	}
	return 0
}

type StandbyReference struct {
	ClientAddr string `protobuf:"bytes,1,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
}

func (m *StandbyReference) Reset()                    { *m = StandbyReference{} }
func (m *StandbyReference) String() string            { return proto.CompactTextString(m) }
func (*StandbyReference) ProtoMessage()               {}
func (*StandbyReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *StandbyReference) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

type StandbyInformation struct {
	StandbyIdx      int32                      `protobuf:"varint,1,opt,name=standby_idx,json=standbyIdx" json:"standby_idx,omitempty"`
	RoleIdx         int32                      `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Pid             int64                      `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	ApplicationName string                     `protobuf:"bytes,4,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientHostname  string                     `protobuf:"bytes,5,opt,name=client_hostname,json=clientHostname" json:"client_hostname,omitempty"`
	ClientPort      int32                      `protobuf:"varint,6,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	SyncPriority    int32                      `protobuf:"varint,8,opt,name=sync_priority,json=syncPriority" json:"sync_priority,omitempty"`
	SyncState       string                     `protobuf:"bytes,9,opt,name=sync_state,json=syncState" json:"sync_state,omitempty"`
}

func (m *StandbyInformation) Reset()                    { *m = StandbyInformation{} }
func (m *StandbyInformation) String() string            { return proto.CompactTextString(m) }
func (*StandbyInformation) ProtoMessage()               {}
func (*StandbyInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *StandbyInformation) GetStandbyIdx() int32 {
	if m != nil {
		return m.StandbyIdx
	}
	return 0
}

func (m *StandbyInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *StandbyInformation) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *StandbyInformation) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *StandbyInformation) GetClientHostname() string {
	if m != nil {
		return m.ClientHostname
	}
	return ""
}

func (m *StandbyInformation) GetClientPort() int32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *StandbyInformation) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *StandbyInformation) GetSyncPriority() int32 {
	if m != nil {
		return m.SyncPriority
	}
	return 0
}

func (m *StandbyInformation) GetSyncState() string {
	if m != nil {
		return m.SyncState
	}
	return ""
}

type StandbyStatistic struct {
	StandbyIdx     int32  `protobuf:"varint,1,opt,name=standby_idx,json=standbyIdx" json:"standby_idx,omitempty"`
	State          string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	SentLocation   string `protobuf:"bytes,3,opt,name=sent_location,json=sentLocation" json:"sent_location,omitempty"`
	WriteLocation  string `protobuf:"bytes,4,opt,name=write_location,json=writeLocation" json:"write_location,omitempty"`
	FlushLocation  string `protobuf:"bytes,5,opt,name=flush_location,json=flushLocation" json:"flush_location,omitempty"`
	ReplayLocation string `protobuf:"bytes,6,opt,name=replay_location,json=replayLocation" json:"replay_location,omitempty"`
	ByteLag        int64  `protobuf:"varint,7,opt,name=byte_lag,json=byteLag" json:"byte_lag,omitempty"`
}

func (m *StandbyStatistic) Reset()                    { *m = StandbyStatistic{} }
func (m *StandbyStatistic) String() string            { return proto.CompactTextString(m) }
func (*StandbyStatistic) ProtoMessage()               {}
func (*StandbyStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *StandbyStatistic) GetStandbyIdx() int32 {
	if m != nil {
		return m.StandbyIdx
	}
	return 0
}

func (m *StandbyStatistic) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *StandbyStatistic) GetSentLocation() string {
	if m != nil {
		return m.SentLocation
	}
	return ""
}

func (m *StandbyStatistic) GetWriteLocation() string {
	if m != nil {
		return m.WriteLocation
	}
	return ""
}

func (m *StandbyStatistic) GetFlushLocation() string {
	if m != nil {
		return m.FlushLocation
	}
	return ""
}

func (m *StandbyStatistic) GetReplayLocation() string {
	if m != nil {
		return m.ReplayLocation
	}
	return ""
}

func (m *StandbyStatistic) GetByteLag() int64 {
	if m != nil {
		return m.ByteLag
	}
	return 0
}

type Backend struct {
	DatabaseIdx     int32                      `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	RoleIdx         int32                      `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	QueryIdx        int32                      `protobuf:"varint,3,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Pid             int32                      `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	ApplicationName string                     `protobuf:"bytes,5,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientAddr      string                     `protobuf:"bytes,6,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	XactStart       *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=xact_start,json=xactStart" json:"xact_start,omitempty"`
	QueryStart      *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=query_start,json=queryStart" json:"query_start,omitempty"`
	StateChange     *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=state_change,json=stateChange" json:"state_change,omitempty"`
	Waiting         bool                       `protobuf:"varint,11,opt,name=waiting" json:"waiting,omitempty"`
	State           string                     `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
	WaitEventType   string                     `protobuf:"bytes,13,opt,name=wait_event_type,json=waitEventType" json:"wait_event_type,omitempty"`
	WaitEvent       string                     `protobuf:"bytes,14,opt,name=wait_event,json=waitEvent" json:"wait_event,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *Backend) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *Backend) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *Backend) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *Backend) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Backend) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *Backend) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *Backend) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *Backend) GetXactStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.XactStart
	}
	return nil
}

func (m *Backend) GetQueryStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.QueryStart
	}
	return nil
}

func (m *Backend) GetStateChange() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateChange
	}
	return nil
}

func (m *Backend) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

func (m *Backend) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Backend) GetWaitEventType() string {
	if m != nil {
		return m.WaitEventType
	}
	return ""
}

func (m *Backend) GetWaitEvent() string {
	if m != nil {
		return m.WaitEvent
	}
	return ""
}

type TablespaceReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TablespaceReference) Reset()                    { *m = TablespaceReference{} }
func (m *TablespaceReference) String() string            { return proto.CompactTextString(m) }
func (*TablespaceReference) ProtoMessage()               {}
func (*TablespaceReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *TablespaceReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TablespaceInformation struct {
	TablespaceIdx    int32    `protobuf:"varint,1,opt,name=tablespace_idx,json=tablespaceIdx" json:"tablespace_idx,omitempty"`
	DiskPartitionIdx int32    `protobuf:"varint,2,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	RoleIdx          int32    `protobuf:"varint,3,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Config           []string `protobuf:"bytes,4,rep,name=config" json:"config,omitempty"`
}

func (m *TablespaceInformation) Reset()                    { *m = TablespaceInformation{} }
func (m *TablespaceInformation) String() string            { return proto.CompactTextString(m) }
func (*TablespaceInformation) ProtoMessage()               {}
func (*TablespaceInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *TablespaceInformation) GetTablespaceIdx() int32 {
	if m != nil {
		return m.TablespaceIdx
	}
	return 0
}

func (m *TablespaceInformation) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *TablespaceInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *TablespaceInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

type System struct {
	SystemInformation             *SystemInformation          `protobuf:"bytes,1,opt,name=system_information,json=systemInformation" json:"system_information,omitempty"`
	SystemId                      string                      `protobuf:"bytes,2,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	SystemScope                   string                      `protobuf:"bytes,3,opt,name=system_scope,json=systemScope" json:"system_scope,omitempty"`
	SchedulerStatistic            *SchedulerStatistic         `protobuf:"bytes,10,opt,name=scheduler_statistic,json=schedulerStatistic" json:"scheduler_statistic,omitempty"`
	MemoryStatistic               *MemoryStatistic            `protobuf:"bytes,11,opt,name=memory_statistic,json=memoryStatistic" json:"memory_statistic,omitempty"`
	CpuInformation                *CPUInformation             `protobuf:"bytes,12,opt,name=cpu_information,json=cpuInformation" json:"cpu_information,omitempty"`
	CpuReferences                 []*CPUReference             `protobuf:"bytes,13,rep,name=cpu_references,json=cpuReferences" json:"cpu_references,omitempty"`
	CpuStatistics                 []*CPUStatistic             `protobuf:"bytes,14,rep,name=cpu_statistics,json=cpuStatistics" json:"cpu_statistics,omitempty"`
	NetworkReferences             []*NetworkReference         `protobuf:"bytes,15,rep,name=network_references,json=networkReferences" json:"network_references,omitempty"`
	NetworkStatistics             []*NetworkStatistic         `protobuf:"bytes,16,rep,name=network_statistics,json=networkStatistics" json:"network_statistics,omitempty"`
	DiskReferences                []*DiskReference            `protobuf:"bytes,17,rep,name=disk_references,json=diskReferences" json:"disk_references,omitempty"`
	DiskInformations              []*DiskInformation          `protobuf:"bytes,18,rep,name=disk_informations,json=diskInformations" json:"disk_informations,omitempty"`
	DiskStatistics                []*DiskStatistic            `protobuf:"bytes,19,rep,name=disk_statistics,json=diskStatistics" json:"disk_statistics,omitempty"`
	DiskPartitionReferences       []*DiskPartitionReference   `protobuf:"bytes,20,rep,name=disk_partition_references,json=diskPartitionReferences" json:"disk_partition_references,omitempty"`
	DiskPartitionInformations     []*DiskPartitionInformation `protobuf:"bytes,21,rep,name=disk_partition_informations,json=diskPartitionInformations" json:"disk_partition_informations,omitempty"`
	DiskPartitionStatistics       []*DiskPartitionStatistic   `protobuf:"bytes,22,rep,name=disk_partition_statistics,json=diskPartitionStatistics" json:"disk_partition_statistics,omitempty"`
	DataDirectoryDiskPartitionIdx int32                       `protobuf:"varint,30,opt,name=data_directory_disk_partition_idx,json=dataDirectoryDiskPartitionIdx" json:"data_directory_disk_partition_idx,omitempty"`
	XlogDiskPartitionIdx          int32                       `protobuf:"varint,31,opt,name=xlog_disk_partition_idx,json=xlogDiskPartitionIdx" json:"xlog_disk_partition_idx,omitempty"`
	XlogUsedBytes                 uint64                      `protobuf:"varint,32,opt,name=xlog_used_bytes,json=xlogUsedBytes" json:"xlog_used_bytes,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *System) GetSystemInformation() *SystemInformation {
	if m != nil {
		return m.SystemInformation
	}
	return nil
}

func (m *System) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *System) GetSystemScope() string {
	if m != nil {
		return m.SystemScope
	}
	return ""
}

func (m *System) GetSchedulerStatistic() *SchedulerStatistic {
	if m != nil {
		return m.SchedulerStatistic
	}
	return nil
}

func (m *System) GetMemoryStatistic() *MemoryStatistic {
	if m != nil {
		return m.MemoryStatistic
	}
	return nil
}

func (m *System) GetCpuInformation() *CPUInformation {
	if m != nil {
		return m.CpuInformation
	}
	return nil
}

func (m *System) GetCpuReferences() []*CPUReference {
	if m != nil {
		return m.CpuReferences
	}
	return nil
}

func (m *System) GetCpuStatistics() []*CPUStatistic {
	if m != nil {
		return m.CpuStatistics
	}
	return nil
}

func (m *System) GetNetworkReferences() []*NetworkReference {
	if m != nil {
		return m.NetworkReferences
	}
	return nil
}

func (m *System) GetNetworkStatistics() []*NetworkStatistic {
	if m != nil {
		return m.NetworkStatistics
	}
	return nil
}

func (m *System) GetDiskReferences() []*DiskReference {
	if m != nil {
		return m.DiskReferences
	}
	return nil
}

func (m *System) GetDiskInformations() []*DiskInformation {
	if m != nil {
		return m.DiskInformations
	}
	return nil
}

func (m *System) GetDiskStatistics() []*DiskStatistic {
	if m != nil {
		return m.DiskStatistics
	}
	return nil
}

func (m *System) GetDiskPartitionReferences() []*DiskPartitionReference {
	if m != nil {
		return m.DiskPartitionReferences
	}
	return nil
}

func (m *System) GetDiskPartitionInformations() []*DiskPartitionInformation {
	if m != nil {
		return m.DiskPartitionInformations
	}
	return nil
}

func (m *System) GetDiskPartitionStatistics() []*DiskPartitionStatistic {
	if m != nil {
		return m.DiskPartitionStatistics
	}
	return nil
}

func (m *System) GetDataDirectoryDiskPartitionIdx() int32 {
	if m != nil {
		return m.DataDirectoryDiskPartitionIdx
	}
	return 0
}

func (m *System) GetXlogDiskPartitionIdx() int32 {
	if m != nil {
		return m.XlogDiskPartitionIdx
	}
	return 0
}

func (m *System) GetXlogUsedBytes() uint64 {
	if m != nil {
		return m.XlogUsedBytes
	}
	return 0
}

type SystemInformation struct {
	Type SystemInformation_SystemType `protobuf:"varint,1,opt,name=type,enum=pganalyze.collector.SystemInformation_SystemType" json:"type,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*SystemInformation_SelfHosted
	//	*SystemInformation_AmazonRds
	Info     isSystemInformation_Info   `protobuf_oneof:"info"`
	BootTime *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
}

func (m *SystemInformation) Reset()                    { *m = SystemInformation{} }
func (m *SystemInformation) String() string            { return proto.CompactTextString(m) }
func (*SystemInformation) ProtoMessage()               {}
func (*SystemInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

type isSystemInformation_Info interface {
	isSystemInformation_Info()
}

type SystemInformation_SelfHosted struct {
	SelfHosted *SystemInformationSelfHosted `protobuf:"bytes,2,opt,name=self_hosted,json=selfHosted,oneof"`
}
type SystemInformation_AmazonRds struct {
	AmazonRds *SystemInformationAmazonRDS `protobuf:"bytes,3,opt,name=amazon_rds,json=amazonRds,oneof"`
}

func (*SystemInformation_SelfHosted) isSystemInformation_Info() {}
func (*SystemInformation_AmazonRds) isSystemInformation_Info()  {}

func (m *SystemInformation) GetInfo() isSystemInformation_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SystemInformation) GetType() SystemInformation_SystemType {
	if m != nil {
		return m.Type
	}
	return SystemInformation_SELF_HOSTED_SYSTEM
}

func (m *SystemInformation) GetSelfHosted() *SystemInformationSelfHosted {
	if x, ok := m.GetInfo().(*SystemInformation_SelfHosted); ok {
		return x.SelfHosted
	}
	return nil
}

func (m *SystemInformation) GetAmazonRds() *SystemInformationAmazonRDS {
	if x, ok := m.GetInfo().(*SystemInformation_AmazonRds); ok {
		return x.AmazonRds
	}
	return nil
}

func (m *SystemInformation) GetBootTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SystemInformation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SystemInformation_OneofMarshaler, _SystemInformation_OneofUnmarshaler, _SystemInformation_OneofSizer, []interface{}{
		(*SystemInformation_SelfHosted)(nil),
		(*SystemInformation_AmazonRds)(nil),
	}
}

func _SystemInformation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelfHosted); err != nil {
			return err
		}
	case *SystemInformation_AmazonRds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmazonRds); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SystemInformation.Info has unexpected type %T", x)
	}
	return nil
}

func _SystemInformation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SystemInformation)
	switch tag {
	case 2: // info.self_hosted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationSelfHosted)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_SelfHosted{msg}
		return true, err
	case 3: // info.amazon_rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationAmazonRDS)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_AmazonRds{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SystemInformation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		s := proto.Size(x.SelfHosted)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SystemInformation_AmazonRds:
		s := proto.Size(x.AmazonRds)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SystemInformationSelfHosted struct {
	Hostname                 string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Architecture             string `protobuf:"bytes,2,opt,name=architecture" json:"architecture,omitempty"`
	OperatingSystem          string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Platform                 string `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	PlatformFamily           string `protobuf:"bytes,5,opt,name=platform_family,json=platformFamily" json:"platform_family,omitempty"`
	PlatformVersion          string `protobuf:"bytes,6,opt,name=platform_version,json=platformVersion" json:"platform_version,omitempty"`
	VirtualizationSystem     string `protobuf:"bytes,7,opt,name=virtualization_system,json=virtualizationSystem" json:"virtualization_system,omitempty"`
	KernelVersion            string `protobuf:"bytes,8,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	DatabaseSystemIdentifier string `protobuf:"bytes,9,opt,name=database_system_identifier,json=databaseSystemIdentifier" json:"database_system_identifier,omitempty"`
}

func (m *SystemInformationSelfHosted) Reset()                    { *m = SystemInformationSelfHosted{} }
func (m *SystemInformationSelfHosted) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationSelfHosted) ProtoMessage()               {}
func (*SystemInformationSelfHosted) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *SystemInformationSelfHosted) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetVirtualizationSystem() string {
	if m != nil {
		return m.VirtualizationSystem
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetDatabaseSystemIdentifier() string {
	if m != nil {
		return m.DatabaseSystemIdentifier
	}
	return ""
}

type SystemInformationAmazonRDS struct {
	Region                     string                     `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	InstanceClass              string                     `protobuf:"bytes,2,opt,name=instance_class,json=instanceClass" json:"instance_class,omitempty"`
	InstanceId                 string                     `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status                     string                     `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	AvailabilityZone           string                     `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone" json:"availability_zone,omitempty"`
	PubliclyAccessible         bool                       `protobuf:"varint,6,opt,name=publicly_accessible,json=publiclyAccessible" json:"publicly_accessible,omitempty"`
	MultiAz                    bool                       `protobuf:"varint,7,opt,name=multi_az,json=multiAz" json:"multi_az,omitempty"`
	SecondaryAvailabilityZone  string                     `protobuf:"bytes,8,opt,name=secondary_availability_zone,json=secondaryAvailabilityZone" json:"secondary_availability_zone,omitempty"`
	CaCertificate              string                     `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate" json:"ca_certificate,omitempty"`
	AutoMinorVersionUpgrade    bool                       `protobuf:"varint,10,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade" json:"auto_minor_version_upgrade,omitempty"`
	AutoMajorVersionUpgrade    bool                       `protobuf:"varint,11,opt,name=auto_major_version_upgrade,json=autoMajorVersionUpgrade" json:"auto_major_version_upgrade,omitempty"`
	PreferredMaintenanceWindow string                     `protobuf:"bytes,12,opt,name=preferred_maintenance_window,json=preferredMaintenanceWindow" json:"preferred_maintenance_window,omitempty"`
	PreferredBackupWindow      string                     `protobuf:"bytes,14,opt,name=preferred_backup_window,json=preferredBackupWindow" json:"preferred_backup_window,omitempty"`
	LatestRestorableTime       *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=latest_restorable_time,json=latestRestorableTime" json:"latest_restorable_time,omitempty"`
	BackupRetentionPeriodDays  int32                      `protobuf:"varint,15,opt,name=backup_retention_period_days,json=backupRetentionPeriodDays" json:"backup_retention_period_days,omitempty"`
	MasterUsername             string                     `protobuf:"bytes,16,opt,name=master_username,json=masterUsername" json:"master_username,omitempty"`
	InitialDbName              string                     `protobuf:"bytes,17,opt,name=initial_db_name,json=initialDbName" json:"initial_db_name,omitempty"`
	CreatedAt                  *google_protobuf.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	EnhancedMonitoring         bool                       `protobuf:"varint,19,opt,name=enhanced_monitoring,json=enhancedMonitoring" json:"enhanced_monitoring,omitempty"`
	ParameterApplyStatus       string                     `protobuf:"bytes,40,opt,name=parameter_apply_status,json=parameterApplyStatus" json:"parameter_apply_status,omitempty"`
	ParameterPgssEnabled       bool                       `protobuf:"varint,41,opt,name=parameter_pgss_enabled,json=parameterPgssEnabled" json:"parameter_pgss_enabled,omitempty"`
}

func (m *SystemInformationAmazonRDS) Reset()                    { *m = SystemInformationAmazonRDS{} }
func (m *SystemInformationAmazonRDS) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationAmazonRDS) ProtoMessage()               {}
func (*SystemInformationAmazonRDS) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *SystemInformationAmazonRDS) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInstanceClass() string {
	if m != nil {
		return m.InstanceClass
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetPubliclyAccessible() bool {
	if m != nil {
		return m.PubliclyAccessible
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetMultiAz() bool {
	if m != nil {
		return m.MultiAz
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetSecondaryAvailabilityZone() string {
	if m != nil {
		return m.SecondaryAvailabilityZone
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetAutoMinorVersionUpgrade() bool {
	if m != nil {
		return m.AutoMinorVersionUpgrade
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetAutoMajorVersionUpgrade() bool {
	if m != nil {
		return m.AutoMajorVersionUpgrade
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetPreferredMaintenanceWindow() string {
	if m != nil {
		return m.PreferredMaintenanceWindow
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetPreferredBackupWindow() string {
	if m != nil {
		return m.PreferredBackupWindow
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetLatestRestorableTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LatestRestorableTime
	}
	return nil
}

func (m *SystemInformationAmazonRDS) GetBackupRetentionPeriodDays() int32 {
	if m != nil {
		return m.BackupRetentionPeriodDays
	}
	return 0
}

func (m *SystemInformationAmazonRDS) GetMasterUsername() string {
	if m != nil {
		return m.MasterUsername
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInitialDbName() string {
	if m != nil {
		return m.InitialDbName
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SystemInformationAmazonRDS) GetEnhancedMonitoring() bool {
	if m != nil {
		return m.EnhancedMonitoring
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetParameterApplyStatus() string {
	if m != nil {
		return m.ParameterApplyStatus
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetParameterPgssEnabled() bool {
	if m != nil {
		return m.ParameterPgssEnabled
	}
	return false
}

type SchedulerStatistic struct {
	LoadAverage_1Min  float64 `protobuf:"fixed64,1,opt,name=load_average_1min,json=loadAverage1min" json:"load_average_1min,omitempty"`
	LoadAverage_5Min  float64 `protobuf:"fixed64,2,opt,name=load_average_5min,json=loadAverage5min" json:"load_average_5min,omitempty"`
	LoadAverage_15Min float64 `protobuf:"fixed64,3,opt,name=load_average_15min,json=loadAverage15min" json:"load_average_15min,omitempty"`
}

func (m *SchedulerStatistic) Reset()                    { *m = SchedulerStatistic{} }
func (m *SchedulerStatistic) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStatistic) ProtoMessage()               {}
func (*SchedulerStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *SchedulerStatistic) GetLoadAverage_1Min() float64 {
	if m != nil {
		return m.LoadAverage_1Min
	}
	return 0
}

func (m *SchedulerStatistic) GetLoadAverage_5Min() float64 {
	if m != nil {
		return m.LoadAverage_5Min
	}
	return 0
}

func (m *SchedulerStatistic) GetLoadAverage_15Min() float64 {
	if m != nil {
		return m.LoadAverage_15Min
	}
	return 0
}

type MemoryStatistic struct {
	TotalBytes         uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	CachedBytes        uint64 `protobuf:"varint,2,opt,name=cached_bytes,json=cachedBytes" json:"cached_bytes,omitempty"`
	BuffersBytes       uint64 `protobuf:"varint,3,opt,name=buffers_bytes,json=buffersBytes" json:"buffers_bytes,omitempty"`
	FreeBytes          uint64 `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes" json:"free_bytes,omitempty"`
	WritebackBytes     uint64 `protobuf:"varint,5,opt,name=writeback_bytes,json=writebackBytes" json:"writeback_bytes,omitempty"`
	DirtyBytes         uint64 `protobuf:"varint,6,opt,name=dirty_bytes,json=dirtyBytes" json:"dirty_bytes,omitempty"`
	SlabBytes          uint64 `protobuf:"varint,7,opt,name=slab_bytes,json=slabBytes" json:"slab_bytes,omitempty"`
	MappedBytes        uint64 `protobuf:"varint,8,opt,name=mapped_bytes,json=mappedBytes" json:"mapped_bytes,omitempty"`
	PageTablesBytes    uint64 `protobuf:"varint,9,opt,name=page_tables_bytes,json=pageTablesBytes" json:"page_tables_bytes,omitempty"`
	ActiveBytes        uint64 `protobuf:"varint,10,opt,name=active_bytes,json=activeBytes" json:"active_bytes,omitempty"`
	InactiveBytes      uint64 `protobuf:"varint,11,opt,name=inactive_bytes,json=inactiveBytes" json:"inactive_bytes,omitempty"`
	AvailableBytes     uint64 `protobuf:"varint,12,opt,name=available_bytes,json=availableBytes" json:"available_bytes,omitempty"`
	SwapUsedBytes      uint64 `protobuf:"varint,13,opt,name=swap_used_bytes,json=swapUsedBytes" json:"swap_used_bytes,omitempty"`
	SwapTotalBytes     uint64 `protobuf:"varint,14,opt,name=swap_total_bytes,json=swapTotalBytes" json:"swap_total_bytes,omitempty"`
	HugePagesSizeBytes uint64 `protobuf:"varint,20,opt,name=huge_pages_size_bytes,json=hugePagesSizeBytes" json:"huge_pages_size_bytes,omitempty"`
	HugePagesFree      uint64 `protobuf:"varint,21,opt,name=huge_pages_free,json=hugePagesFree" json:"huge_pages_free,omitempty"`
	HugePagesTotal     uint64 `protobuf:"varint,22,opt,name=huge_pages_total,json=hugePagesTotal" json:"huge_pages_total,omitempty"`
	HugePagesReserved  uint64 `protobuf:"varint,23,opt,name=huge_pages_reserved,json=hugePagesReserved" json:"huge_pages_reserved,omitempty"`
	HugePagesSurplus   uint64 `protobuf:"varint,24,opt,name=huge_pages_surplus,json=hugePagesSurplus" json:"huge_pages_surplus,omitempty"`
	ApplicationBytes   uint64 `protobuf:"varint,30,opt,name=application_bytes,json=applicationBytes" json:"application_bytes,omitempty"`
}

func (m *MemoryStatistic) Reset()                    { *m = MemoryStatistic{} }
func (m *MemoryStatistic) String() string            { return proto.CompactTextString(m) }
func (*MemoryStatistic) ProtoMessage()               {}
func (*MemoryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *MemoryStatistic) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *MemoryStatistic) GetCachedBytes() uint64 {
	if m != nil {
		return m.CachedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetBuffersBytes() uint64 {
	if m != nil {
		return m.BuffersBytes
	}
	return 0
}

func (m *MemoryStatistic) GetFreeBytes() uint64 {
	if m != nil {
		return m.FreeBytes
	}
	return 0
}

func (m *MemoryStatistic) GetWritebackBytes() uint64 {
	if m != nil {
		return m.WritebackBytes
	}
	return 0
}

func (m *MemoryStatistic) GetDirtyBytes() uint64 {
	if m != nil {
		return m.DirtyBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSlabBytes() uint64 {
	if m != nil {
		return m.SlabBytes
	}
	return 0
}

func (m *MemoryStatistic) GetMappedBytes() uint64 {
	if m != nil {
		return m.MappedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetPageTablesBytes() uint64 {
	if m != nil {
		return m.PageTablesBytes
	}
	return 0
}

func (m *MemoryStatistic) GetActiveBytes() uint64 {
	if m != nil {
		return m.ActiveBytes
	}
	return 0
}

func (m *MemoryStatistic) GetInactiveBytes() uint64 {
	if m != nil {
		return m.InactiveBytes
	}
	return 0
}

func (m *MemoryStatistic) GetAvailableBytes() uint64 {
	if m != nil {
		return m.AvailableBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSwapUsedBytes() uint64 {
	if m != nil {
		return m.SwapUsedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSwapTotalBytes() uint64 {
	if m != nil {
		return m.SwapTotalBytes
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesSizeBytes() uint64 {
	if m != nil {
		return m.HugePagesSizeBytes
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesFree() uint64 {
	if m != nil {
		return m.HugePagesFree
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesTotal() uint64 {
	if m != nil {
		return m.HugePagesTotal
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesReserved() uint64 {
	if m != nil {
		return m.HugePagesReserved
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesSurplus() uint64 {
	if m != nil {
		return m.HugePagesSurplus
	}
	return 0
}

func (m *MemoryStatistic) GetApplicationBytes() uint64 {
	if m != nil {
		return m.ApplicationBytes
	}
	return 0
}

type CPUInformation struct {
	Model             string  `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	CacheSizeBytes    int32   `protobuf:"varint,2,opt,name=cache_size_bytes,json=cacheSizeBytes" json:"cache_size_bytes,omitempty"`
	SpeedMhz          float64 `protobuf:"fixed64,3,opt,name=speed_mhz,json=speedMhz" json:"speed_mhz,omitempty"`
	SocketCount       int32   `protobuf:"varint,4,opt,name=socket_count,json=socketCount" json:"socket_count,omitempty"`
	PhysicalCoreCount int32   `protobuf:"varint,5,opt,name=physical_core_count,json=physicalCoreCount" json:"physical_core_count,omitempty"`
	LogicalCoreCount  int32   `protobuf:"varint,6,opt,name=logical_core_count,json=logicalCoreCount" json:"logical_core_count,omitempty"`
}

func (m *CPUInformation) Reset()                    { *m = CPUInformation{} }
func (m *CPUInformation) String() string            { return proto.CompactTextString(m) }
func (*CPUInformation) ProtoMessage()               {}
func (*CPUInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *CPUInformation) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CPUInformation) GetCacheSizeBytes() int32 {
	if m != nil {
		return m.CacheSizeBytes
	}
	return 0
}

func (m *CPUInformation) GetSpeedMhz() float64 {
	if m != nil {
		return m.SpeedMhz
	}
	return 0
}

func (m *CPUInformation) GetSocketCount() int32 {
	if m != nil {
		return m.SocketCount
	}
	return 0
}

func (m *CPUInformation) GetPhysicalCoreCount() int32 {
	if m != nil {
		return m.PhysicalCoreCount
	}
	return 0
}

func (m *CPUInformation) GetLogicalCoreCount() int32 {
	if m != nil {
		return m.LogicalCoreCount
	}
	return 0
}

type CPUReference struct {
	CoreId string `protobuf:"bytes,1,opt,name=core_id,json=coreId" json:"core_id,omitempty"`
}

func (m *CPUReference) Reset()                    { *m = CPUReference{} }
func (m *CPUReference) String() string            { return proto.CompactTextString(m) }
func (*CPUReference) ProtoMessage()               {}
func (*CPUReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *CPUReference) GetCoreId() string {
	if m != nil {
		return m.CoreId
	}
	return ""
}

type CPUStatistic struct {
	CpuIdx           int32   `protobuf:"varint,1,opt,name=cpu_idx,json=cpuIdx" json:"cpu_idx,omitempty"`
	UserPercent      float64 `protobuf:"fixed64,2,opt,name=user_percent,json=userPercent" json:"user_percent,omitempty"`
	SystemPercent    float64 `protobuf:"fixed64,3,opt,name=system_percent,json=systemPercent" json:"system_percent,omitempty"`
	IdlePercent      float64 `protobuf:"fixed64,4,opt,name=idle_percent,json=idlePercent" json:"idle_percent,omitempty"`
	NicePercent      float64 `protobuf:"fixed64,5,opt,name=nice_percent,json=nicePercent" json:"nice_percent,omitempty"`
	IowaitPercent    float64 `protobuf:"fixed64,6,opt,name=iowait_percent,json=iowaitPercent" json:"iowait_percent,omitempty"`
	IrqPercent       float64 `protobuf:"fixed64,7,opt,name=irq_percent,json=irqPercent" json:"irq_percent,omitempty"`
	SoftIrqPercent   float64 `protobuf:"fixed64,8,opt,name=soft_irq_percent,json=softIrqPercent" json:"soft_irq_percent,omitempty"`
	StealPercent     float64 `protobuf:"fixed64,9,opt,name=steal_percent,json=stealPercent" json:"steal_percent,omitempty"`
	GuestPercent     float64 `protobuf:"fixed64,10,opt,name=guest_percent,json=guestPercent" json:"guest_percent,omitempty"`
	GuestNicePercent float64 `protobuf:"fixed64,11,opt,name=guest_nice_percent,json=guestNicePercent" json:"guest_nice_percent,omitempty"`
}

func (m *CPUStatistic) Reset()                    { *m = CPUStatistic{} }
func (m *CPUStatistic) String() string            { return proto.CompactTextString(m) }
func (*CPUStatistic) ProtoMessage()               {}
func (*CPUStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *CPUStatistic) GetCpuIdx() int32 {
	if m != nil {
		return m.CpuIdx
	}
	return 0
}

func (m *CPUStatistic) GetUserPercent() float64 {
	if m != nil {
		return m.UserPercent
	}
	return 0
}

func (m *CPUStatistic) GetSystemPercent() float64 {
	if m != nil {
		return m.SystemPercent
	}
	return 0
}

func (m *CPUStatistic) GetIdlePercent() float64 {
	if m != nil {
		return m.IdlePercent
	}
	return 0
}

func (m *CPUStatistic) GetNicePercent() float64 {
	if m != nil {
		return m.NicePercent
	}
	return 0
}

func (m *CPUStatistic) GetIowaitPercent() float64 {
	if m != nil {
		return m.IowaitPercent
	}
	return 0
}

func (m *CPUStatistic) GetIrqPercent() float64 {
	if m != nil {
		return m.IrqPercent
	}
	return 0
}

func (m *CPUStatistic) GetSoftIrqPercent() float64 {
	if m != nil {
		return m.SoftIrqPercent
	}
	return 0
}

func (m *CPUStatistic) GetStealPercent() float64 {
	if m != nil {
		return m.StealPercent
	}
	return 0
}

func (m *CPUStatistic) GetGuestPercent() float64 {
	if m != nil {
		return m.GuestPercent
	}
	return 0
}

func (m *CPUStatistic) GetGuestNicePercent() float64 {
	if m != nil {
		return m.GuestNicePercent
	}
	return 0
}

type NetworkReference struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *NetworkReference) Reset()                    { *m = NetworkReference{} }
func (m *NetworkReference) String() string            { return proto.CompactTextString(m) }
func (*NetworkReference) ProtoMessage()               {}
func (*NetworkReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *NetworkReference) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type NetworkStatistic struct {
	NetworkIdx                       int32  `protobuf:"varint,1,opt,name=network_idx,json=networkIdx" json:"network_idx,omitempty"`
	TransmitThroughputBytesPerSecond uint64 `protobuf:"varint,2,opt,name=transmit_throughput_bytes_per_second,json=transmitThroughputBytesPerSecond" json:"transmit_throughput_bytes_per_second,omitempty"`
	ReceiveThroughputBytesPerSecond  uint64 `protobuf:"varint,3,opt,name=receive_throughput_bytes_per_second,json=receiveThroughputBytesPerSecond" json:"receive_throughput_bytes_per_second,omitempty"`
}

func (m *NetworkStatistic) Reset()                    { *m = NetworkStatistic{} }
func (m *NetworkStatistic) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatistic) ProtoMessage()               {}
func (*NetworkStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *NetworkStatistic) GetNetworkIdx() int32 {
	if m != nil {
		return m.NetworkIdx
	}
	return 0
}

func (m *NetworkStatistic) GetTransmitThroughputBytesPerSecond() uint64 {
	if m != nil {
		return m.TransmitThroughputBytesPerSecond
	}
	return 0
}

func (m *NetworkStatistic) GetReceiveThroughputBytesPerSecond() uint64 {
	if m != nil {
		return m.ReceiveThroughputBytesPerSecond
	}
	return 0
}

type DiskReference struct {
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
}

func (m *DiskReference) Reset()                    { *m = DiskReference{} }
func (m *DiskReference) String() string            { return proto.CompactTextString(m) }
func (*DiskReference) ProtoMessage()               {}
func (*DiskReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *DiskReference) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type DiskInformation struct {
	DiskIdx         int32  `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	DiskType        string `protobuf:"bytes,2,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	Scheduler       string `protobuf:"bytes,3,opt,name=scheduler" json:"scheduler,omitempty"`
	ProvisionedIops uint32 `protobuf:"varint,4,opt,name=provisioned_iops,json=provisionedIops" json:"provisioned_iops,omitempty"`
	Encrypted       bool   `protobuf:"varint,5,opt,name=encrypted" json:"encrypted,omitempty"`
}

func (m *DiskInformation) Reset()                    { *m = DiskInformation{} }
func (m *DiskInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskInformation) ProtoMessage()               {}
func (*DiskInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *DiskInformation) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskInformation) GetDiskType() string {
	if m != nil {
		return m.DiskType
	}
	return ""
}

func (m *DiskInformation) GetScheduler() string {
	if m != nil {
		return m.Scheduler
	}
	return ""
}

func (m *DiskInformation) GetProvisionedIops() uint32 {
	if m != nil {
		return m.ProvisionedIops
	}
	return 0
}

func (m *DiskInformation) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

type DiskStatistic struct {
	DiskIdx                  int32   `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	ReadOperationsPerSecond  float64 `protobuf:"fixed64,2,opt,name=read_operations_per_second,json=readOperationsPerSecond" json:"read_operations_per_second,omitempty"`
	ReadsMergedPerSecond     float64 `protobuf:"fixed64,3,opt,name=reads_merged_per_second,json=readsMergedPerSecond" json:"reads_merged_per_second,omitempty"`
	BytesReadPerSecond       float64 `protobuf:"fixed64,4,opt,name=bytes_read_per_second,json=bytesReadPerSecond" json:"bytes_read_per_second,omitempty"`
	AvgReadLatency           float64 `protobuf:"fixed64,5,opt,name=avg_read_latency,json=avgReadLatency" json:"avg_read_latency,omitempty"`
	WriteOperationsPerSecond float64 `protobuf:"fixed64,6,opt,name=write_operations_per_second,json=writeOperationsPerSecond" json:"write_operations_per_second,omitempty"`
	WritesMergedPerSecond    float64 `protobuf:"fixed64,7,opt,name=writes_merged_per_second,json=writesMergedPerSecond" json:"writes_merged_per_second,omitempty"`
	BytesWrittenPerSecond    float64 `protobuf:"fixed64,8,opt,name=bytes_written_per_second,json=bytesWrittenPerSecond" json:"bytes_written_per_second,omitempty"`
	AvgWriteLatency          float64 `protobuf:"fixed64,9,opt,name=avg_write_latency,json=avgWriteLatency" json:"avg_write_latency,omitempty"`
	AvgQueueSize             int32   `protobuf:"varint,10,opt,name=avg_queue_size,json=avgQueueSize" json:"avg_queue_size,omitempty"`
	UtilizationPercent       float64 `protobuf:"fixed64,12,opt,name=utilization_percent,json=utilizationPercent" json:"utilization_percent,omitempty"`
}

func (m *DiskStatistic) Reset()                    { *m = DiskStatistic{} }
func (m *DiskStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskStatistic) ProtoMessage()               {}
func (*DiskStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *DiskStatistic) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskStatistic) GetReadOperationsPerSecond() float64 {
	if m != nil {
		return m.ReadOperationsPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetReadsMergedPerSecond() float64 {
	if m != nil {
		return m.ReadsMergedPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetBytesReadPerSecond() float64 {
	if m != nil {
		return m.BytesReadPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetAvgReadLatency() float64 {
	if m != nil {
		return m.AvgReadLatency
	}
	return 0
}

func (m *DiskStatistic) GetWriteOperationsPerSecond() float64 {
	if m != nil {
		return m.WriteOperationsPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetWritesMergedPerSecond() float64 {
	if m != nil {
		return m.WritesMergedPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetBytesWrittenPerSecond() float64 {
	if m != nil {
		return m.BytesWrittenPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetAvgWriteLatency() float64 {
	if m != nil {
		return m.AvgWriteLatency
	}
	return 0
}

func (m *DiskStatistic) GetAvgQueueSize() int32 {
	if m != nil {
		return m.AvgQueueSize
	}
	return 0
}

func (m *DiskStatistic) GetUtilizationPercent() float64 {
	if m != nil {
		return m.UtilizationPercent
	}
	return 0
}

type DiskPartitionReference struct {
	Mountpoint string `protobuf:"bytes,1,opt,name=mountpoint" json:"mountpoint,omitempty"`
}

func (m *DiskPartitionReference) Reset()                    { *m = DiskPartitionReference{} }
func (m *DiskPartitionReference) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionReference) ProtoMessage()               {}
func (*DiskPartitionReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *DiskPartitionReference) GetMountpoint() string {
	if m != nil {
		return m.Mountpoint
	}
	return ""
}

type DiskPartitionInformation struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	DiskIdx          int32  `protobuf:"varint,2,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	FilesystemType   string `protobuf:"bytes,3,opt,name=filesystem_type,json=filesystemType" json:"filesystem_type,omitempty"`
	FilesystemOpts   string `protobuf:"bytes,4,opt,name=filesystem_opts,json=filesystemOpts" json:"filesystem_opts,omitempty"`
	PartitionName    string `protobuf:"bytes,5,opt,name=partition_name,json=partitionName" json:"partition_name,omitempty"`
}

func (m *DiskPartitionInformation) Reset()                    { *m = DiskPartitionInformation{} }
func (m *DiskPartitionInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionInformation) ProtoMessage()               {}
func (*DiskPartitionInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *DiskPartitionInformation) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *DiskPartitionInformation) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskPartitionInformation) GetFilesystemType() string {
	if m != nil {
		return m.FilesystemType
	}
	return ""
}

func (m *DiskPartitionInformation) GetFilesystemOpts() string {
	if m != nil {
		return m.FilesystemOpts
	}
	return ""
}

func (m *DiskPartitionInformation) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

type DiskPartitionStatistic struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	UsedBytes        uint64 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes" json:"used_bytes,omitempty"`
	TotalBytes       uint64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
}

func (m *DiskPartitionStatistic) Reset()                    { *m = DiskPartitionStatistic{} }
func (m *DiskPartitionStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionStatistic) ProtoMessage()               {}
func (*DiskPartitionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *DiskPartitionStatistic) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *DiskPartitionStatistic) GetUsedBytes() uint64 {
	if m != nil {
		return m.UsedBytes
	}
	return 0
}

func (m *DiskPartitionStatistic) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

type QueryStatistic struct {
	QueryIdx          int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Calls             int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime         float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	Rows              int64   `protobuf:"varint,4,opt,name=rows" json:"rows,omitempty"`
	SharedBlksHit     int64   `protobuf:"varint,5,opt,name=shared_blks_hit,json=sharedBlksHit" json:"shared_blks_hit,omitempty"`
	SharedBlksRead    int64   `protobuf:"varint,6,opt,name=shared_blks_read,json=sharedBlksRead" json:"shared_blks_read,omitempty"`
	SharedBlksDirtied int64   `protobuf:"varint,7,opt,name=shared_blks_dirtied,json=sharedBlksDirtied" json:"shared_blks_dirtied,omitempty"`
	SharedBlksWritten int64   `protobuf:"varint,8,opt,name=shared_blks_written,json=sharedBlksWritten" json:"shared_blks_written,omitempty"`
	LocalBlksHit      int64   `protobuf:"varint,9,opt,name=local_blks_hit,json=localBlksHit" json:"local_blks_hit,omitempty"`
	LocalBlksRead     int64   `protobuf:"varint,10,opt,name=local_blks_read,json=localBlksRead" json:"local_blks_read,omitempty"`
	LocalBlksDirtied  int64   `protobuf:"varint,11,opt,name=local_blks_dirtied,json=localBlksDirtied" json:"local_blks_dirtied,omitempty"`
	LocalBlksWritten  int64   `protobuf:"varint,12,opt,name=local_blks_written,json=localBlksWritten" json:"local_blks_written,omitempty"`
	TempBlksRead      int64   `protobuf:"varint,13,opt,name=temp_blks_read,json=tempBlksRead" json:"temp_blks_read,omitempty"`
	TempBlksWritten   int64   `protobuf:"varint,14,opt,name=temp_blks_written,json=tempBlksWritten" json:"temp_blks_written,omitempty"`
	BlkReadTime       float64 `protobuf:"fixed64,15,opt,name=blk_read_time,json=blkReadTime" json:"blk_read_time,omitempty"`
	BlkWriteTime      float64 `protobuf:"fixed64,16,opt,name=blk_write_time,json=blkWriteTime" json:"blk_write_time,omitempty"`
}

func (m *QueryStatistic) Reset()                    { *m = QueryStatistic{} }
func (m *QueryStatistic) String() string            { return proto.CompactTextString(m) }
func (*QueryStatistic) ProtoMessage()               {}
func (*QueryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *QueryStatistic) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QueryStatistic) GetCalls() int64 {
	if m != nil {
		return m.Calls
	}
	return 0
}

func (m *QueryStatistic) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *QueryStatistic) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksHit() int64 {
	if m != nil {
		return m.SharedBlksHit
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksRead() int64 {
	if m != nil {
		return m.SharedBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksDirtied() int64 {
	if m != nil {
		return m.SharedBlksDirtied
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksWritten() int64 {
	if m != nil {
		return m.SharedBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksHit() int64 {
	if m != nil {
		return m.LocalBlksHit
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksRead() int64 {
	if m != nil {
		return m.LocalBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksDirtied() int64 {
	if m != nil {
		return m.LocalBlksDirtied
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksWritten() int64 {
	if m != nil {
		return m.LocalBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetTempBlksRead() int64 {
	if m != nil {
		return m.TempBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetTempBlksWritten() int64 {
	if m != nil {
		return m.TempBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetBlkReadTime() float64 {
	if m != nil {
		return m.BlkReadTime
	}
	return 0
}

func (m *QueryStatistic) GetBlkWriteTime() float64 {
	if m != nil {
		return m.BlkWriteTime
	}
	return 0
}

type HistoricQueryStatistics struct {
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,2,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	Statistics            []*QueryStatistic          `protobuf:"bytes,3,rep,name=statistics" json:"statistics,omitempty"`
}

func (m *HistoricQueryStatistics) Reset()                    { *m = HistoricQueryStatistics{} }
func (m *HistoricQueryStatistics) String() string            { return proto.CompactTextString(m) }
func (*HistoricQueryStatistics) ProtoMessage()               {}
func (*HistoricQueryStatistics) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *HistoricQueryStatistics) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *HistoricQueryStatistics) GetCollectedIntervalSecs() uint32 {
	if m != nil {
		return m.CollectedIntervalSecs
	}
	return 0
}

func (m *HistoricQueryStatistics) GetStatistics() []*QueryStatistic {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type QuerySample struct {
	QueryIdx      int32                      `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	OccurredAt    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	RuntimeMs     float64                    `protobuf:"fixed64,3,opt,name=runtime_ms,json=runtimeMs" json:"runtime_ms,omitempty"`
	OriginalQuery string                     `protobuf:"bytes,10,opt,name=original_query,json=originalQuery" json:"original_query,omitempty"`
	HasExplain    bool                       `protobuf:"varint,20,opt,name=has_explain,json=hasExplain" json:"has_explain,omitempty"`
	ExplainOutput string                     `protobuf:"bytes,21,opt,name=explain_output,json=explainOutput" json:"explain_output,omitempty"`
	ExplainError  string                     `protobuf:"bytes,22,opt,name=explain_error,json=explainError" json:"explain_error,omitempty"`
}

func (m *QuerySample) Reset()                    { *m = QuerySample{} }
func (m *QuerySample) String() string            { return proto.CompactTextString(m) }
func (*QuerySample) ProtoMessage()               {}
func (*QuerySample) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *QuerySample) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QuerySample) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *QuerySample) GetRuntimeMs() float64 {
	if m != nil {
		return m.RuntimeMs
	}
	return 0
}

func (m *QuerySample) GetOriginalQuery() string {
	if m != nil {
		return m.OriginalQuery
	}
	return ""
}

func (m *QuerySample) GetHasExplain() bool {
	if m != nil {
		return m.HasExplain
	}
	return false
}

func (m *QuerySample) GetExplainOutput() string {
	if m != nil {
		return m.ExplainOutput
	}
	return ""
}

func (m *QuerySample) GetExplainError() string {
	if m != nil {
		return m.ExplainError
	}
	return ""
}

type RelationInformation struct {
	RelationIdx            int32                             `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	RelationType           string                            `protobuf:"bytes,2,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	ViewDefinition         *NullString                       `protobuf:"bytes,3,opt,name=view_definition,json=viewDefinition" json:"view_definition,omitempty"`
	Columns                []*RelationInformation_Column     `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	Constraints            []*RelationInformation_Constraint `protobuf:"bytes,5,rep,name=constraints" json:"constraints,omitempty"`
	PersistenceType        string                            `protobuf:"bytes,6,opt,name=persistence_type,json=persistenceType" json:"persistence_type,omitempty"`
	Fillfactor             int32                             `protobuf:"varint,7,opt,name=fillfactor" json:"fillfactor,omitempty"`
	HasOids                bool                              `protobuf:"varint,8,opt,name=has_oids,json=hasOids" json:"has_oids,omitempty"`
	HasInheritanceChildren bool                              `protobuf:"varint,9,opt,name=has_inheritance_children,json=hasInheritanceChildren" json:"has_inheritance_children,omitempty"`
	HasToast               bool                              `protobuf:"varint,10,opt,name=has_toast,json=hasToast" json:"has_toast,omitempty"`
	FrozenXid              uint32                            `protobuf:"varint,11,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	MinimumMultixactXid    uint32                            `protobuf:"varint,12,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
	// True if another process is currently holding an AccessExclusiveLock on this
	// relation, this also means we won't have columns/index/constraints information
	ExclusivelyLocked bool `protobuf:"varint,13,opt,name=exclusively_locked,json=exclusivelyLocked" json:"exclusively_locked,omitempty"`
}

func (m *RelationInformation) Reset()                    { *m = RelationInformation{} }
func (m *RelationInformation) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation) ProtoMessage()               {}
func (*RelationInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

func (m *RelationInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationInformation) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *RelationInformation) GetViewDefinition() *NullString {
	if m != nil {
		return m.ViewDefinition
	}
	return nil
}

func (m *RelationInformation) GetColumns() []*RelationInformation_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation) GetConstraints() []*RelationInformation_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *RelationInformation) GetPersistenceType() string {
	if m != nil {
		return m.PersistenceType
	}
	return ""
}

func (m *RelationInformation) GetFillfactor() int32 {
	if m != nil {
		return m.Fillfactor
	}
	return 0
}

func (m *RelationInformation) GetHasOids() bool {
	if m != nil {
		return m.HasOids
	}
	return false
}

func (m *RelationInformation) GetHasInheritanceChildren() bool {
	if m != nil {
		return m.HasInheritanceChildren
	}
	return false
}

func (m *RelationInformation) GetHasToast() bool {
	if m != nil {
		return m.HasToast
	}
	return false
}

func (m *RelationInformation) GetFrozenXid() uint32 {
	if m != nil {
		return m.FrozenXid
	}
	return 0
}

func (m *RelationInformation) GetMinimumMultixactXid() uint32 {
	if m != nil {
		return m.MinimumMultixactXid
	}
	return 0
}

func (m *RelationInformation) GetExclusivelyLocked() bool {
	if m != nil {
		return m.ExclusivelyLocked
	}
	return false
}

type RelationInformation_Column struct {
	Name         string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DataType     string      `protobuf:"bytes,3,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	DefaultValue *NullString `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	NotNull      bool        `protobuf:"varint,5,opt,name=not_null,json=notNull" json:"not_null,omitempty"`
	Position     int32       `protobuf:"varint,6,opt,name=position" json:"position,omitempty"`
}

func (m *RelationInformation_Column) Reset()                    { *m = RelationInformation_Column{} }
func (m *RelationInformation_Column) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation_Column) ProtoMessage()               {}
func (*RelationInformation_Column) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35, 0} }

func (m *RelationInformation_Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationInformation_Column) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *RelationInformation_Column) GetDefaultValue() *NullString {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *RelationInformation_Column) GetNotNull() bool {
	if m != nil {
		return m.NotNull
	}
	return false
}

func (m *RelationInformation_Column) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type RelationInformation_Constraint struct {
	ForeignRelationIdx int32   `protobuf:"varint,1,opt,name=foreign_relation_idx,json=foreignRelationIdx" json:"foreign_relation_idx,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ConstraintDef      string  `protobuf:"bytes,4,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	Columns            []int32 `protobuf:"varint,5,rep,packed,name=columns" json:"columns,omitempty"`
	ForeignColumns     []int32 `protobuf:"varint,6,rep,packed,name=foreign_columns,json=foreignColumns" json:"foreign_columns,omitempty"`
	ForeignUpdateType  string  `protobuf:"bytes,7,opt,name=foreign_update_type,json=foreignUpdateType" json:"foreign_update_type,omitempty"`
	ForeignDeleteType  string  `protobuf:"bytes,8,opt,name=foreign_delete_type,json=foreignDeleteType" json:"foreign_delete_type,omitempty"`
	ForeignMatchType   string  `protobuf:"bytes,9,opt,name=foreign_match_type,json=foreignMatchType" json:"foreign_match_type,omitempty"`
}

func (m *RelationInformation_Constraint) Reset()         { *m = RelationInformation_Constraint{} }
func (m *RelationInformation_Constraint) String() string { return proto.CompactTextString(m) }
func (*RelationInformation_Constraint) ProtoMessage()    {}
func (*RelationInformation_Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{35, 1}
}

func (m *RelationInformation_Constraint) GetForeignRelationIdx() int32 {
	if m != nil {
		return m.ForeignRelationIdx
	}
	return 0
}

func (m *RelationInformation_Constraint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationInformation_Constraint) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RelationInformation_Constraint) GetConstraintDef() string {
	if m != nil {
		return m.ConstraintDef
	}
	return ""
}

func (m *RelationInformation_Constraint) GetColumns() []int32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation_Constraint) GetForeignColumns() []int32 {
	if m != nil {
		return m.ForeignColumns
	}
	return nil
}

func (m *RelationInformation_Constraint) GetForeignUpdateType() string {
	if m != nil {
		return m.ForeignUpdateType
	}
	return ""
}

func (m *RelationInformation_Constraint) GetForeignDeleteType() string {
	if m != nil {
		return m.ForeignDeleteType
	}
	return ""
}

func (m *RelationInformation_Constraint) GetForeignMatchType() string {
	if m != nil {
		return m.ForeignMatchType
	}
	return ""
}

type RelationStatistic struct {
	RelationIdx      int32 `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	SizeBytes        int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	SeqScan          int64 `protobuf:"varint,3,opt,name=seq_scan,json=seqScan" json:"seq_scan,omitempty"`
	SeqTupRead       int64 `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead" json:"seq_tup_read,omitempty"`
	IdxScan          int64 `protobuf:"varint,5,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupFetch      int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	NTupIns          int64 `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns" json:"n_tup_ins,omitempty"`
	NTupUpd          int64 `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd" json:"n_tup_upd,omitempty"`
	NTupDel          int64 `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel" json:"n_tup_del,omitempty"`
	NTupHotUpd       int64 `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd" json:"n_tup_hot_upd,omitempty"`
	NLiveTup         int64 `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup" json:"n_live_tup,omitempty"`
	NDeadTup         int64 `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup" json:"n_dead_tup,omitempty"`
	NModSinceAnalyze int64 `protobuf:"varint,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze" json:"n_mod_since_analyze,omitempty"`
	HeapBlksRead     int64 `protobuf:"varint,18,opt,name=heap_blks_read,json=heapBlksRead" json:"heap_blks_read,omitempty"`
	HeapBlksHit      int64 `protobuf:"varint,19,opt,name=heap_blks_hit,json=heapBlksHit" json:"heap_blks_hit,omitempty"`
	IdxBlksRead      int64 `protobuf:"varint,20,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit       int64 `protobuf:"varint,21,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
	ToastBlksRead    int64 `protobuf:"varint,22,opt,name=toast_blks_read,json=toastBlksRead" json:"toast_blks_read,omitempty"`
	ToastBlksHit     int64 `protobuf:"varint,23,opt,name=toast_blks_hit,json=toastBlksHit" json:"toast_blks_hit,omitempty"`
	TidxBlksRead     int64 `protobuf:"varint,24,opt,name=tidx_blks_read,json=tidxBlksRead" json:"tidx_blks_read,omitempty"`
	TidxBlksHit      int64 `protobuf:"varint,25,opt,name=tidx_blks_hit,json=tidxBlksHit" json:"tidx_blks_hit,omitempty"`
}

func (m *RelationStatistic) Reset()                    { *m = RelationStatistic{} }
func (m *RelationStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationStatistic) ProtoMessage()               {}
func (*RelationStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *RelationStatistic) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationStatistic) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *RelationStatistic) GetSeqScan() int64 {
	if m != nil {
		return m.SeqScan
	}
	return 0
}

func (m *RelationStatistic) GetSeqTupRead() int64 {
	if m != nil {
		return m.SeqTupRead
	}
	return 0
}

func (m *RelationStatistic) GetIdxScan() int64 {
	if m != nil {
		return m.IdxScan
	}
	return 0
}

func (m *RelationStatistic) GetIdxTupFetch() int64 {
	if m != nil {
		return m.IdxTupFetch
	}
	return 0
}

func (m *RelationStatistic) GetNTupIns() int64 {
	if m != nil {
		return m.NTupIns
	}
	return 0
}

func (m *RelationStatistic) GetNTupUpd() int64 {
	if m != nil {
		return m.NTupUpd
	}
	return 0
}

func (m *RelationStatistic) GetNTupDel() int64 {
	if m != nil {
		return m.NTupDel
	}
	return 0
}

func (m *RelationStatistic) GetNTupHotUpd() int64 {
	if m != nil {
		return m.NTupHotUpd
	}
	return 0
}

func (m *RelationStatistic) GetNLiveTup() int64 {
	if m != nil {
		return m.NLiveTup
	}
	return 0
}

func (m *RelationStatistic) GetNDeadTup() int64 {
	if m != nil {
		return m.NDeadTup
	}
	return 0
}

func (m *RelationStatistic) GetNModSinceAnalyze() int64 {
	if m != nil {
		return m.NModSinceAnalyze
	}
	return 0
}

func (m *RelationStatistic) GetHeapBlksRead() int64 {
	if m != nil {
		return m.HeapBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetHeapBlksHit() int64 {
	if m != nil {
		return m.HeapBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetIdxBlksRead() int64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetIdxBlksHit() int64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetToastBlksRead() int64 {
	if m != nil {
		return m.ToastBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetToastBlksHit() int64 {
	if m != nil {
		return m.ToastBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetTidxBlksRead() int64 {
	if m != nil {
		return m.TidxBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetTidxBlksHit() int64 {
	if m != nil {
		return m.TidxBlksHit
	}
	return 0
}

type RelationEvent struct {
	RelationIdx           int32                      `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Type                  RelationEvent_EventType    `protobuf:"varint,2,opt,name=type,enum=pganalyze.collector.RelationEvent_EventType" json:"type,omitempty"`
	OccurredAt            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	ApproximateOccurredAt bool                       `protobuf:"varint,4,opt,name=approximate_occurred_at,json=approximateOccurredAt" json:"approximate_occurred_at,omitempty"`
}

func (m *RelationEvent) Reset()                    { *m = RelationEvent{} }
func (m *RelationEvent) String() string            { return proto.CompactTextString(m) }
func (*RelationEvent) ProtoMessage()               {}
func (*RelationEvent) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{37} }

func (m *RelationEvent) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationEvent) GetType() RelationEvent_EventType {
	if m != nil {
		return m.Type
	}
	return RelationEvent_MANUAL_VACUUM
}

func (m *RelationEvent) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *RelationEvent) GetApproximateOccurredAt() bool {
	if m != nil {
		return m.ApproximateOccurredAt
	}
	return false
}

type IndexInformation struct {
	IndexIdx      int32       `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	RelationIdx   int32       `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Columns       []int32     `protobuf:"varint,3,rep,packed,name=columns" json:"columns,omitempty"`
	IndexDef      string      `protobuf:"bytes,4,opt,name=index_def,json=indexDef" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,5,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	IsPrimary     bool        `protobuf:"varint,6,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,7,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,8,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	Fillfactor    int32       `protobuf:"varint,9,opt,name=fillfactor" json:"fillfactor,omitempty"`
	IndexType     string      `protobuf:"bytes,10,opt,name=index_type,json=indexType" json:"index_type,omitempty"`
}

func (m *IndexInformation) Reset()                    { *m = IndexInformation{} }
func (m *IndexInformation) String() string            { return proto.CompactTextString(m) }
func (*IndexInformation) ProtoMessage()               {}
func (*IndexInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{38} }

func (m *IndexInformation) GetIndexIdx() int32 {
	if m != nil {
		return m.IndexIdx
	}
	return 0
}

func (m *IndexInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *IndexInformation) GetColumns() []int32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *IndexInformation) GetIndexDef() string {
	if m != nil {
		return m.IndexDef
	}
	return ""
}

func (m *IndexInformation) GetConstraintDef() *NullString {
	if m != nil {
		return m.ConstraintDef
	}
	return nil
}

func (m *IndexInformation) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *IndexInformation) GetIsUnique() bool {
	if m != nil {
		return m.IsUnique
	}
	return false
}

func (m *IndexInformation) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *IndexInformation) GetFillfactor() int32 {
	if m != nil {
		return m.Fillfactor
	}
	return 0
}

func (m *IndexInformation) GetIndexType() string {
	if m != nil {
		return m.IndexType
	}
	return ""
}

type IndexStatistic struct {
	IndexIdx    int32 `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	SizeBytes   int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IdxScan     int64 `protobuf:"varint,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupRead  int64 `protobuf:"varint,4,opt,name=idx_tup_read,json=idxTupRead" json:"idx_tup_read,omitempty"`
	IdxTupFetch int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead int64 `protobuf:"varint,7,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit  int64 `protobuf:"varint,8,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
}

func (m *IndexStatistic) Reset()                    { *m = IndexStatistic{} }
func (m *IndexStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexStatistic) ProtoMessage()               {}
func (*IndexStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{39} }

func (m *IndexStatistic) GetIndexIdx() int32 {
	if m != nil {
		return m.IndexIdx
	}
	return 0
}

func (m *IndexStatistic) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *IndexStatistic) GetIdxScan() int64 {
	if m != nil {
		return m.IdxScan
	}
	return 0
}

func (m *IndexStatistic) GetIdxTupRead() int64 {
	if m != nil {
		return m.IdxTupRead
	}
	return 0
}

func (m *IndexStatistic) GetIdxTupFetch() int64 {
	if m != nil {
		return m.IdxTupFetch
	}
	return 0
}

func (m *IndexStatistic) GetIdxBlksRead() int64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return 0
}

func (m *IndexStatistic) GetIdxBlksHit() int64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return 0
}

type FunctionInformation struct {
	FunctionIdx     int32    `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Language        string   `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Source          string   `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	SourceBin       string   `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin" json:"source_bin,omitempty"`
	Config          []string `protobuf:"bytes,6,rep,name=config" json:"config,omitempty"`
	Result          string   `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Aggregate       bool     `protobuf:"varint,9,opt,name=aggregate" json:"aggregate,omitempty"`
	Window          bool     `protobuf:"varint,10,opt,name=window" json:"window,omitempty"`
	SecurityDefiner bool     `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner" json:"security_definer,omitempty"`
	Leakproof       bool     `protobuf:"varint,12,opt,name=leakproof" json:"leakproof,omitempty"`
	Strict          bool     `protobuf:"varint,13,opt,name=strict" json:"strict,omitempty"`
	ReturnsSet      bool     `protobuf:"varint,14,opt,name=returns_set,json=returnsSet" json:"returns_set,omitempty"`
	Volatile        string   `protobuf:"bytes,15,opt,name=volatile" json:"volatile,omitempty"`
}

func (m *FunctionInformation) Reset()                    { *m = FunctionInformation{} }
func (m *FunctionInformation) String() string            { return proto.CompactTextString(m) }
func (*FunctionInformation) ProtoMessage()               {}
func (*FunctionInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{40} }

func (m *FunctionInformation) GetFunctionIdx() int32 {
	if m != nil {
		return m.FunctionIdx
	}
	return 0
}

func (m *FunctionInformation) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *FunctionInformation) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *FunctionInformation) GetSourceBin() string {
	if m != nil {
		return m.SourceBin
	}
	return ""
}

func (m *FunctionInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *FunctionInformation) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *FunctionInformation) GetAggregate() bool {
	if m != nil {
		return m.Aggregate
	}
	return false
}

func (m *FunctionInformation) GetWindow() bool {
	if m != nil {
		return m.Window
	}
	return false
}

func (m *FunctionInformation) GetSecurityDefiner() bool {
	if m != nil {
		return m.SecurityDefiner
	}
	return false
}

func (m *FunctionInformation) GetLeakproof() bool {
	if m != nil {
		return m.Leakproof
	}
	return false
}

func (m *FunctionInformation) GetStrict() bool {
	if m != nil {
		return m.Strict
	}
	return false
}

func (m *FunctionInformation) GetReturnsSet() bool {
	if m != nil {
		return m.ReturnsSet
	}
	return false
}

func (m *FunctionInformation) GetVolatile() string {
	if m != nil {
		return m.Volatile
	}
	return ""
}

type FunctionStatistic struct {
	FunctionIdx int32   `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Calls       int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime   float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	SelfTime    float64 `protobuf:"fixed64,4,opt,name=self_time,json=selfTime" json:"self_time,omitempty"`
}

func (m *FunctionStatistic) Reset()                    { *m = FunctionStatistic{} }
func (m *FunctionStatistic) String() string            { return proto.CompactTextString(m) }
func (*FunctionStatistic) ProtoMessage()               {}
func (*FunctionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{41} }

func (m *FunctionStatistic) GetFunctionIdx() int32 {
	if m != nil {
		return m.FunctionIdx
	}
	return 0
}

func (m *FunctionStatistic) GetCalls() int64 {
	if m != nil {
		return m.Calls
	}
	return 0
}

func (m *FunctionStatistic) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *FunctionStatistic) GetSelfTime() float64 {
	if m != nil {
		return m.SelfTime
	}
	return 0
}

func init() {
	proto.RegisterType((*FullSnapshot)(nil), "pganalyze.collector.FullSnapshot")
	proto.RegisterType((*CollectorStatistic)(nil), "pganalyze.collector.CollectorStatistic")
	proto.RegisterType((*RoleInformation)(nil), "pganalyze.collector.RoleInformation")
	proto.RegisterType((*DatabaseInformation)(nil), "pganalyze.collector.DatabaseInformation")
	proto.RegisterType((*PostgresVersion)(nil), "pganalyze.collector.PostgresVersion")
	proto.RegisterType((*LogFileReference)(nil), "pganalyze.collector.LogFileReference")
	proto.RegisterType((*LogLineInformation)(nil), "pganalyze.collector.LogLineInformation")
	proto.RegisterType((*Setting)(nil), "pganalyze.collector.Setting")
	proto.RegisterType((*Replication)(nil), "pganalyze.collector.Replication")
	proto.RegisterType((*StandbyReference)(nil), "pganalyze.collector.StandbyReference")
	proto.RegisterType((*StandbyInformation)(nil), "pganalyze.collector.StandbyInformation")
	proto.RegisterType((*StandbyStatistic)(nil), "pganalyze.collector.StandbyStatistic")
	proto.RegisterType((*Backend)(nil), "pganalyze.collector.Backend")
	proto.RegisterType((*TablespaceReference)(nil), "pganalyze.collector.TablespaceReference")
	proto.RegisterType((*TablespaceInformation)(nil), "pganalyze.collector.TablespaceInformation")
	proto.RegisterType((*System)(nil), "pganalyze.collector.System")
	proto.RegisterType((*SystemInformation)(nil), "pganalyze.collector.SystemInformation")
	proto.RegisterType((*SystemInformationSelfHosted)(nil), "pganalyze.collector.SystemInformationSelfHosted")
	proto.RegisterType((*SystemInformationAmazonRDS)(nil), "pganalyze.collector.SystemInformationAmazonRDS")
	proto.RegisterType((*SchedulerStatistic)(nil), "pganalyze.collector.SchedulerStatistic")
	proto.RegisterType((*MemoryStatistic)(nil), "pganalyze.collector.MemoryStatistic")
	proto.RegisterType((*CPUInformation)(nil), "pganalyze.collector.CPUInformation")
	proto.RegisterType((*CPUReference)(nil), "pganalyze.collector.CPUReference")
	proto.RegisterType((*CPUStatistic)(nil), "pganalyze.collector.CPUStatistic")
	proto.RegisterType((*NetworkReference)(nil), "pganalyze.collector.NetworkReference")
	proto.RegisterType((*NetworkStatistic)(nil), "pganalyze.collector.NetworkStatistic")
	proto.RegisterType((*DiskReference)(nil), "pganalyze.collector.DiskReference")
	proto.RegisterType((*DiskInformation)(nil), "pganalyze.collector.DiskInformation")
	proto.RegisterType((*DiskStatistic)(nil), "pganalyze.collector.DiskStatistic")
	proto.RegisterType((*DiskPartitionReference)(nil), "pganalyze.collector.DiskPartitionReference")
	proto.RegisterType((*DiskPartitionInformation)(nil), "pganalyze.collector.DiskPartitionInformation")
	proto.RegisterType((*DiskPartitionStatistic)(nil), "pganalyze.collector.DiskPartitionStatistic")
	proto.RegisterType((*QueryStatistic)(nil), "pganalyze.collector.QueryStatistic")
	proto.RegisterType((*HistoricQueryStatistics)(nil), "pganalyze.collector.HistoricQueryStatistics")
	proto.RegisterType((*QuerySample)(nil), "pganalyze.collector.QuerySample")
	proto.RegisterType((*RelationInformation)(nil), "pganalyze.collector.RelationInformation")
	proto.RegisterType((*RelationInformation_Column)(nil), "pganalyze.collector.RelationInformation.Column")
	proto.RegisterType((*RelationInformation_Constraint)(nil), "pganalyze.collector.RelationInformation.Constraint")
	proto.RegisterType((*RelationStatistic)(nil), "pganalyze.collector.RelationStatistic")
	proto.RegisterType((*RelationEvent)(nil), "pganalyze.collector.RelationEvent")
	proto.RegisterType((*IndexInformation)(nil), "pganalyze.collector.IndexInformation")
	proto.RegisterType((*IndexStatistic)(nil), "pganalyze.collector.IndexStatistic")
	proto.RegisterType((*FunctionInformation)(nil), "pganalyze.collector.FunctionInformation")
	proto.RegisterType((*FunctionStatistic)(nil), "pganalyze.collector.FunctionStatistic")
	proto.RegisterEnum("pganalyze.collector.LogLineInformation_LogLevel", LogLineInformation_LogLevel_name, LogLineInformation_LogLevel_value)
	proto.RegisterEnum("pganalyze.collector.LogLineInformation_LogClassification", LogLineInformation_LogClassification_name, LogLineInformation_LogClassification_value)
	proto.RegisterEnum("pganalyze.collector.SystemInformation_SystemType", SystemInformation_SystemType_name, SystemInformation_SystemType_value)
	proto.RegisterEnum("pganalyze.collector.RelationEvent_EventType", RelationEvent_EventType_name, RelationEvent_EventType_value)
}

func init() { proto.RegisterFile("full_snapshot.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 6571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x7c, 0xc9, 0x6f, 0x24, 0xc9,
	0x75, 0xf7, 0x14, 0x8b, 0x4b, 0xd5, 0xab, 0x95, 0x41, 0xb2, 0xbb, 0x9a, 0x3d, 0x3d, 0xc3, 0xae,
	0xd9, 0xa8, 0xd1, 0xa8, 0x67, 0x69, 0x49, 0xa3, 0xc1, 0x7c, 0x23, 0xa9, 0x9a, 0x64, 0x4f, 0x13,
	0xc3, 0x4d, 0x49, 0x72, 0x66, 0x34, 0xf8, 0xbe, 0x2f, 0x91, 0xcc, 0x8c, 0xaa, 0x0a, 0x31, 0x2b,
	0x33, 0x3b, 0x23, 0x93, 0xcd, 0x6a, 0x5f, 0x04, 0x1b, 0x30, 0x7c, 0xb0, 0x61, 0xc0, 0xf0, 0x49,
	0x17, 0x43, 0x86, 0xe1, 0xab, 0xe4, 0x8b, 0xe0, 0xa3, 0x4f, 0x86, 0xb7, 0x8b, 0x17, 0x9d, 0x2c,
	0x6f, 0xb0, 0x01, 0xdf, 0x74, 0xf1, 0x1f, 0x60, 0xe3, 0xbd, 0x88, 0xdc, 0x8a, 0xc5, 0x65, 0x6c,
	0xdf, 0x2a, 0x7e, 0xef, 0x17, 0x2f, 0x63, 0x7d, 0xf1, 0x5e, 0x2c, 0x05, 0x4b, 0xfd, 0xd8, 0x75,
	0x4d, 0xe9, 0x59, 0x81, 0x1c, 0xfa, 0xd1, 0x83, 0x20, 0xf4, 0x23, 0x9f, 0x2d, 0x05, 0x03, 0xcb,
	0xb3, 0xdc, 0xf1, 0x73, 0xfe, 0xc0, 0xf6, 0x5d, 0x97, 0xdb, 0x91, 0x1f, 0xae, 0xbe, 0x3c, 0xf0,
	0xfd, 0x81, 0xcb, 0xdf, 0x26, 0xca, 0x49, 0xdc, 0x7f, 0x3b, 0x12, 0x23, 0x2e, 0x23, 0x6b, 0x14,
	0xa8, 0x5c, 0xab, 0x75, 0x39, 0xb4, 0x42, 0xee, 0xa8, 0x54, 0xf7, 0x77, 0x6f, 0x41, 0xfd, 0x71,
	0xec, 0xba, 0x87, 0x5a, 0x35, 0xfb, 0x3a, 0xdc, 0x4a, 0x3e, 0x63, 0x9e, 0xf1, 0x50, 0x0a, 0xdf,
	0x33, 0x47, 0xd6, 0x0f, 0xfc, 0xb0, 0x53, 0x5a, 0x2b, 0xad, 0xcf, 0x19, 0xcb, 0x89, 0xf4, 0x53,
	0x25, 0xdc, 0x45, 0xd9, 0xf4, 0x5c, 0xc2, 0xf3, 0xc3, 0xce, 0xcc, 0xf4, 0x5c, 0x28, 0x63, 0x5f,
	0x85, 0xc5, 0xb4, 0xe0, 0x49, 0xb6, 0x4e, 0x79, 0xad, 0xb4, 0x5e, 0x35, 0xda, 0xa9, 0x40, 0xe7,
	0x60, 0xf7, 0x00, 0xfa, 0x96, 0x70, 0xb9, 0x63, 0x86, 0xb1, 0xd7, 0x99, 0x5d, 0x2b, 0xad, 0x57,
	0x8c, 0xaa, 0x42, 0x8c, 0xd8, 0x63, 0xaf, 0x40, 0x23, 0x2d, 0x41, 0x1c, 0x0b, 0xa7, 0x03, 0xa4,
	0xa7, 0x9e, 0x80, 0xc7, 0xb1, 0x70, 0xd8, 0x47, 0x50, 0xd7, 0x7a, 0xb9, 0x63, 0x5a, 0x51, 0xa7,
	0xb6, 0x56, 0x5a, 0xaf, 0xbd, 0xb7, 0xfa, 0x40, 0xb5, 0xd9, 0x83, 0xa4, 0xcd, 0x1e, 0x1c, 0x25,
	0x6d, 0x66, 0xd4, 0x52, 0x7e, 0x2f, 0x62, 0xdf, 0x84, 0xdb, 0x59, 0x76, 0xe1, 0x45, 0x3c, 0x3c,
	0xb3, 0x5c, 0x53, 0x72, 0x5b, 0x76, 0xea, 0x6b, 0xa5, 0xf5, 0x86, 0xb1, 0x92, 0x8a, 0xb7, 0xb5,
	0xf4, 0x90, 0xdb, 0x92, 0x7d, 0x0e, 0x4b, 0x59, 0x3d, 0x65, 0x64, 0x45, 0x42, 0x46, 0xc2, 0xee,
	0x2c, 0xd3, 0xd7, 0xdf, 0x78, 0x30, 0xa5, 0x1b, 0x1f, 0x6c, 0x24, 0xbf, 0x0e, 0x13, 0xba, 0xc1,
	0xec, 0x0b, 0x18, 0xfb, 0x0a, 0x64, 0x0d, 0x65, 0xf2, 0x30, 0xf4, 0x43, 0xd9, 0x59, 0x59, 0x2b,
	0xaf, 0x57, 0x8d, 0x56, 0x8a, 0x6f, 0x11, 0xcc, 0x1e, 0xc2, 0xbc, 0x1c, 0xcb, 0x88, 0x8f, 0x3a,
	0x0e, 0x7d, 0xf7, 0xee, 0xd4, 0xef, 0x1e, 0x12, 0xc5, 0xd0, 0x54, 0xb6, 0x0f, 0xed, 0xc0, 0x97,
	0xd1, 0x20, 0xe4, 0x32, 0xed, 0x20, 0x4e, 0xd9, 0x5f, 0x9d, 0x9a, 0xfd, 0x40, 0x93, 0x75, 0xa7,
	0x19, 0xad, 0xa0, 0x08, 0xb0, 0x4f, 0xa0, 0x15, 0xfa, 0x2e, 0x37, 0x43, 0xde, 0xe7, 0x21, 0xf7,
	0x6c, 0x2e, 0x3b, 0xfd, 0xb5, 0xf2, 0x7a, 0xed, 0xbd, 0xee, 0x54, 0x7d, 0x86, 0xef, 0x72, 0x23,
	0xa1, 0x1a, 0xcd, 0x30, 0x9f, 0x94, 0xec, 0x33, 0x58, 0x72, 0xac, 0xc8, 0x3a, 0xb1, 0x64, 0x41,
	0xe1, 0x80, 0x14, 0xbe, 0x3e, 0x55, 0xe1, 0xa6, 0xe6, 0x67, 0x4a, 0x99, 0x33, 0x09, 0x49, 0xf6,
	0x3d, 0x58, 0xa4, 0x52, 0x0a, 0xaf, 0xef, 0x87, 0x23, 0x2b, 0x12, 0xbe, 0x27, 0x3b, 0x1e, 0xa9,
	0x7d, 0xf5, 0xd2, 0x72, 0x6e, 0x67, 0x64, 0xa3, 0x1d, 0x16, 0x01, 0xc9, 0xfe, 0x1f, 0xac, 0xa4,
	0x65, 0x2d, 0xa8, 0xf5, 0x49, 0xed, 0xfa, 0x95, 0xa5, 0xcd, 0xab, 0x5e, 0x76, 0x2e, 0x82, 0x92,
	0x7d, 0x0b, 0x2a, 0x27, 0x96, 0x7d, 0xca, 0x3d, 0x47, 0x76, 0xc6, 0xa4, 0xf1, 0xc5, 0xa9, 0x1a,
	0x1f, 0x29, 0x92, 0x91, 0xb2, 0x31, 0xa7, 0xe4, 0x51, 0x24, 0xbc, 0x81, 0xec, 0x3c, 0xbf, 0x22,
	0xe7, 0xa1, 0x22, 0x19, 0x29, 0x9b, 0x3d, 0x82, 0x5a, 0xc8, 0x03, 0x57, 0xd8, 0x54, 0x86, 0xce,
	0xaf, 0xd0, 0xb8, 0x58, 0x9b, 0xde, 0x3e, 0x19, 0xcf, 0xc8, 0x67, 0x62, 0xff, 0x1f, 0x56, 0x22,
	0xeb, 0xc4, 0xe5, 0x32, 0xb0, 0xec, 0x42, 0x27, 0xfe, 0x6a, 0xe9, 0x8a, 0x76, 0x39, 0x4a, 0xb3,
	0x64, 0xfd, 0xb8, 0x1c, 0x5d, 0x04, 0x25, 0x73, 0xe0, 0x76, 0x4e, 0x7f, 0xa1, 0xe1, 0x7f, 0x4d,
	0x7d, 0xe1, 0xcd, 0x6b, 0xbe, 0x90, 0x6f, 0xfb, 0x5b, 0xd1, 0x34, 0x58, 0xb2, 0x4f, 0x61, 0xc9,
	0xf5, 0x07, 0x66, 0x5f, 0x14, 0x47, 0xf6, 0x6f, 0xaa, 0x2f, 0xbc, 0x36, 0xf5, 0x0b, 0x3b, 0xfe,
	0xe0, 0xb1, 0xc8, 0x8f, 0xee, 0x45, 0x77, 0x02, 0x91, 0xec, 0xff, 0xc2, 0x0a, 0xea, 0x75, 0x85,
	0x37, 0x51, 0xf6, 0xdf, 0x52, 0x9a, 0xdf, 0xb8, 0x4c, 0xf3, 0x8e, 0xf0, 0x0a, 0x05, 0xc7, 0xe2,
	0x4d, 0x60, 0x12, 0x27, 0xf7, 0xd3, 0x98, 0x87, 0xe3, 0x7c, 0x91, 0xff, 0x4c, 0x29, 0x7e, 0x65,
	0xaa, 0xe2, 0xef, 0x21, 0x3b, 0x2b, 0x70, 0xeb, 0x69, 0x21, 0x4d, 0x76, 0x2e, 0xe4, 0x2e, 0x69,
	0xcf, 0xeb, 0xfc, 0xf3, 0xd2, 0x15, 0x13, 0xd2, 0xd0, 0x19, 0x72, 0x13, 0x32, 0x9c, 0x84, 0xa8,
	0xa8, 0xc2, 0x73, 0xf8, 0x79, 0x5e, 0xed, 0x5f, 0x5c, 0x55, 0xd4, 0x6d, 0x64, 0xe7, 0x8a, 0x2a,
	0x0a, 0x69, 0x2a, 0x6a, 0x3f, 0xf6, 0xec, 0xc9, 0xa2, 0xfe, 0xe5, 0x55, 0x45, 0x7d, 0xac, 0x33,
	0xe4, 0x8a, 0xda, 0x9f, 0x84, 0x24, 0x3b, 0x06, 0xa6, 0x5a, 0xb5, 0xd0, 0x61, 0x7f, 0x73, 0xd5,
	0x50, 0xa0, 0x76, 0xcd, 0x77, 0xd7, 0xe2, 0xd3, 0x09, 0x24, 0xd7, 0x59, 0xe9, 0xfa, 0x21, 0x3b,
	0x7f, 0x7b, 0x6d, 0x67, 0x65, 0xab, 0x87, 0xea, 0xac, 0x34, 0x2d, 0xd9, 0x63, 0x68, 0x68, 0x85,
	0xd6, 0x28, 0x70, 0xb9, 0xec, 0xfc, 0x9d, 0xd2, 0xb6, 0x76, 0x85, 0x36, 0x62, 0x1a, 0xf5, 0xa7,
	0x59, 0x42, 0x32, 0x01, 0x77, 0x86, 0x42, 0x46, 0x7e, 0x28, 0x6c, 0xf3, 0x42, 0x09, 0x7f, 0xae,
	0x74, 0xbe, 0x35, 0x55, 0xe7, 0x13, 0x9d, 0xad, 0x58, 0x52, 0x69, 0xdc, 0x1e, 0x4e, 0x17, 0xa0,
	0xb1, 0x48, 0xc7, 0x57, 0xa1, 0x75, 0x7f, 0x71, 0x95, 0xb1, 0x48, 0x46, 0x58, 0xc1, 0x88, 0x86,
	0x17, 0xc1, 0xe2, 0xf8, 0xcd, 0x55, 0xe2, 0x1f, 0x6e, 0x32, 0x7e, 0x73, 0xeb, 0x74, 0x38, 0x09,
	0x49, 0xb6, 0x03, 0xad, 0x54, 0x33, 0x3f, 0xe3, 0x5e, 0x24, 0x3b, 0xff, 0x54, 0xba, 0x6a, 0xdd,
	0xd3, 0xe4, 0x2d, 0xe4, 0x1a, 0xcd, 0x30, 0x9f, 0xa4, 0x21, 0xa6, 0x66, 0x43, 0xa1, 0x11, 0xfe,
	0xf9, 0xaa, 0x21, 0x46, 0xf3, 0xa1, 0x30, 0xc4, 0xc4, 0x04, 0x92, 0x9b, 0x64, 0xb9, 0xba, 0xff,
	0xcb, 0xb5, 0x93, 0x2c, 0x37, 0xc4, 0x44, 0x21, 0x4d, 0xfd, 0x95, 0x4e, 0xb2, 0x42, 0x51, 0xff,
	0xf5, 0xaa, 0xfe, 0x4a, 0xa6, 0x59, 0xa1, 0xbf, 0xfa, 0x17, 0xc1, 0xe2, 0x24, 0xce, 0x95, 0xf9,
	0xdf, 0x6e, 0x32, 0x89, 0x73, 0xfd, 0xd5, 0x9f, 0x84, 0x64, 0xf7, 0x4f, 0x67, 0x80, 0x5d, 0x74,
	0xc1, 0xd0, 0x07, 0x1d, 0xf8, 0xa9, 0x23, 0xa4, 0x3c, 0xcc, 0xea, 0xc0, 0x4f, 0x9c, 0x9b, 0x8f,
	0xe0, 0xee, 0x88, 0x8f, 0xfc, 0x70, 0x6c, 0x0e, 0xb9, 0x15, 0x98, 0x96, 0xeb, 0xfa, 0xb6, 0x85,
	0xbe, 0xe2, 0xc9, 0x38, 0xe2, 0xb2, 0xd3, 0x58, 0x2b, 0xad, 0xcf, 0x1a, 0x1d, 0x45, 0x79, 0xc2,
	0xad, 0xa0, 0x97, 0x10, 0x1e, 0xa1, 0x9c, 0x3d, 0x80, 0xa5, 0x7c, 0x76, 0xff, 0xe4, 0x07, 0xdc,
	0x8e, 0x64, 0xa7, 0x49, 0xd9, 0x16, 0xb3, 0x6c, 0xfb, 0x4a, 0x90, 0xe3, 0x2b, 0x6f, 0x4d, 0x7f,
	0xa6, 0x95, 0xe7, 0x2b, 0x7f, 0x4e, 0xe9, 0x5f, 0x87, 0xb6, 0xe6, 0x87, 0x52, 0x6a, 0x72, 0x9b,
	0xc8, 0x4d, 0x85, 0x1b, 0x52, 0x2a, 0xe6, 0x57, 0x61, 0xd1, 0xb2, 0x23, 0x71, 0xc6, 0xcd, 0x81,
	0x1f, 0xfa, 0x71, 0x24, 0x3c, 0x2e, 0xc9, 0x5d, 0x9d, 0x33, 0xda, 0x4a, 0xf0, 0x71, 0x8a, 0xb3,
	0xbb, 0x50, 0xb5, 0x07, 0xbe, 0x69, 0x5b, 0xae, 0x2b, 0x3b, 0x2f, 0xad, 0x95, 0xd6, 0xcb, 0x46,
	0xc5, 0x1e, 0xf8, 0x1b, 0x98, 0xee, 0xfe, 0xb4, 0x0c, 0xad, 0x09, 0xe7, 0x88, 0xdd, 0x81, 0x8a,
	0xf2, 0xae, 0x9c, 0x73, 0x1d, 0x54, 0x2c, 0x90, 0xbb, 0xe4, 0x9c, 0xb3, 0x0e, 0x2c, 0x08, 0x6f,
	0xc8, 0x43, 0x11, 0x51, 0xe0, 0x50, 0x31, 0x92, 0x24, 0x5b, 0x86, 0x39, 0xd7, 0x1f, 0x08, 0x15,
	0x1f, 0x54, 0x0c, 0x95, 0xa0, 0x6f, 0x87, 0xdc, 0x8a, 0xb8, 0xe9, 0x9c, 0xe8, 0x98, 0xa0, 0xa2,
	0x80, 0xcd, 0x13, 0xf6, 0x32, 0xd4, 0xb4, 0x10, 0xd5, 0x77, 0xe6, 0x48, 0x0c, 0x0a, 0xc2, 0x32,
	0x61, 0x77, 0xca, 0x38, 0xe0, 0xa1, 0x19, 0x4b, 0x1e, 0x76, 0xe6, 0x55, 0x48, 0x41, 0xc8, 0xb1,
	0xe4, 0x21, 0x5b, 0x2b, 0xfa, 0x37, 0x0b, 0x24, 0x2f, 0x78, 0x2f, 0xf7, 0x00, 0x4e, 0xc6, 0x81,
	0x25, 0xa5, 0x19, 0xba, 0xb2, 0x53, 0x51, 0x0a, 0x14, 0x62, 0xb8, 0x52, 0x79, 0xe7, 0x9e, 0xc7,
	0xd5, 0x08, 0x75, 0xc5, 0x48, 0x44, 0x9d, 0x2a, 0x55, 0xb8, 0x95, 0xe1, 0x3b, 0x08, 0xb3, 0x23,
	0x58, 0xc6, 0x5c, 0xcf, 0xfc, 0xd0, 0x31, 0xcf, 0x2c, 0x57, 0x38, 0x66, 0xec, 0x45, 0xc2, 0xa5,
	0x31, 0x76, 0x99, 0x91, 0xd8, 0x8b, 0x5d, 0x37, 0x8b, 0x54, 0x58, 0x92, 0xff, 0x53, 0xcc, 0x7e,
	0x8c, 0xb9, 0xd9, 0x2d, 0x98, 0xb7, 0x7d, 0xaf, 0x2f, 0x06, 0x9d, 0x1a, 0x05, 0x05, 0x3a, 0x85,
	0xcd, 0x36, 0xe2, 0xa3, 0x13, 0x1e, 0x9a, 0x7e, 0xbf, 0x53, 0x5f, 0x2b, 0xaf, 0xcf, 0x19, 0x15,
	0x05, 0xec, 0xf7, 0xbb, 0x7f, 0x5c, 0x86, 0xa5, 0x29, 0x8e, 0x27, 0xbb, 0x0f, 0xf5, 0xcc, 0x83,
	0x4d, 0xbb, 0xae, 0x96, 0xba, 0xa3, 0xce, 0x39, 0x7b, 0x15, 0x9a, 0xfe, 0x33, 0x8f, 0x87, 0x66,
	0xda, 0xbf, 0x2a, 0xfc, 0xab, 0x13, 0x6a, 0xe8, 0x4e, 0x5e, 0x85, 0x0a, 0xf7, 0x6c, 0xdf, 0x11,
	0xde, 0x40, 0x47, 0x7b, 0x69, 0x1a, 0x07, 0x00, 0x56, 0xd0, 0x8a, 0x38, 0x75, 0x67, 0xd5, 0x48,
	0x92, 0x6c, 0x05, 0xe6, 0x6d, 0x33, 0x1a, 0x07, 0xaa, 0x23, 0xab, 0xc6, 0x9c, 0x7d, 0x34, 0x0e,
	0x38, 0x76, 0xb2, 0x90, 0x66, 0xc4, 0x47, 0x01, 0x65, 0x52, 0x9d, 0x08, 0x42, 0x1e, 0x69, 0x84,
	0xc6, 0xb2, 0xeb, 0xfa, 0xcf, 0xcc, 0xac, 0xc9, 0xa5, 0xee, 0xcb, 0x36, 0x09, 0x36, 0x32, 0x7c,
	0x6a, 0x8f, 0x55, 0xa6, 0xf7, 0x18, 0xc6, 0xa3, 0xa1, 0xff, 0x9c, 0x7b, 0xe6, 0xb9, 0x70, 0xa8,
	0x5b, 0x1b, 0x46, 0x55, 0x21, 0x9f, 0x0b, 0x87, 0xbd, 0x07, 0x2b, 0x23, 0xe1, 0x89, 0x51, 0x3c,
	0x32, 0x47, 0xb1, 0x1b, 0x89, 0x73, 0xcb, 0x8e, 0x88, 0x09, 0xc4, 0x5c, 0xd2, 0xc2, 0xdd, 0x44,
	0x86, 0x79, 0xbe, 0x03, 0x2f, 0x66, 0xf1, 0x25, 0x9a, 0x06, 0xd7, 0xb4, 0xad, 0xc8, 0x42, 0x17,
	0x10, 0x5b, 0x99, 0xc2, 0xd5, 0x8a, 0x71, 0x27, 0xe5, 0xec, 0x20, 0x65, 0x43, 0x31, 0xb0, 0xc7,
	0xba, 0xc7, 0xd0, 0x9a, 0x88, 0xc0, 0x18, 0x83, 0xd9, 0x7e, 0xec, 0xba, 0xd4, 0x5b, 0x55, 0x83,
	0x7e, 0xe3, 0x5c, 0x92, 0x43, 0x3f, 0x54, 0x73, 0xac, 0x6a, 0xa8, 0x04, 0x36, 0xbd, 0x17, 0x8f,
	0x78, 0x28, 0x6c, 0xea, 0x95, 0xb2, 0x91, 0x24, 0xbb, 0x7f, 0x55, 0x82, 0xf6, 0xa4, 0xbb, 0x8a,
	0x8a, 0x29, 0xce, 0xd6, 0x8a, 0xf1, 0x37, 0x76, 0x86, 0x7c, 0x48, 0x25, 0xa7, 0x19, 0xa3, 0xd4,
	0x83, 0x7c, 0xb8, 0xa3, 0x11, 0xf6, 0x12, 0x11, 0x6c, 0x7e, 0x6a, 0x5a, 0xee, 0xc0, 0xd7, 0xbd,
	0x5f, 0x95, 0x0f, 0x37, 0xf8, 0x69, 0xcf, 0x1d, 0xf8, 0xec, 0x3e, 0x34, 0x50, 0x3e, 0x3a, 0x35,
	0x4f, 0xf9, 0xd8, 0x14, 0x8e, 0x1e, 0x04, 0x20, 0x1f, 0x6e, 0x8c, 0x4e, 0x3f, 0xe1, 0xe3, 0x6d,
	0x07, 0xc7, 0x2e, 0x9a, 0x2e, 0x53, 0x8a, 0xe7, 0x6a, 0x28, 0x94, 0x8d, 0x0a, 0x02, 0x87, 0xe2,
	0x39, 0x67, 0xaf, 0x40, 0xc3, 0x0f, 0xc5, 0x40, 0x78, 0x96, 0x6b, 0x7a, 0xd6, 0x48, 0x8d, 0x87,
	0xaa, 0x51, 0x4f, 0xc0, 0x3d, 0x6b, 0xc4, 0xbb, 0xff, 0x39, 0x0f, 0xec, 0xa2, 0x8f, 0xcc, 0xd6,
	0xa0, 0x9e, 0x3a, 0xf1, 0xd9, 0xf8, 0x06, 0xed, 0x95, 0xe3, 0xc0, 0xa5, 0xe9, 0x8e, 0x9f, 0x8e,
	0x2c, 0xdd, 0x78, 0x65, 0x83, 0x0a, 0x73, 0x88, 0x00, 0xda, 0x35, 0x12, 0x73, 0xcf, 0x49, 0x5a,
	0x10, 0xd3, 0x5b, 0x9e, 0x83, 0xba, 0x87, 0x96, 0xcc, 0xa6, 0x85, 0x32, 0x55, 0x30, 0xb4, 0x64,
	0x32, 0x29, 0xf2, 0x46, 0x71, 0xae, 0x68, 0x14, 0xd7, 0xa1, 0x8d, 0x99, 0x0b, 0x93, 0x4f, 0x8d,
	0xf3, 0xe6, 0xd0, 0x92, 0x9b, 0xb9, 0xf9, 0x37, 0x39, 0x45, 0x17, 0x2e, 0x4e, 0xd1, 0x2e, 0x34,
	0x50, 0x99, 0x76, 0x51, 0x9d, 0x73, 0x6d, 0xb5, 0x6a, 0x43, 0x4b, 0x2a, 0x37, 0xd4, 0x39, 0xc7,
	0x26, 0xce, 0xe4, 0xca, 0x60, 0x55, 0x9e, 0x26, 0xc2, 0x0f, 0xa1, 0xe6, 0xdb, 0x76, 0x1c, 0x86,
	0x6a, 0x0b, 0x05, 0xae, 0xdd, 0x42, 0x81, 0x84, 0xde, 0x8b, 0x70, 0x80, 0xe8, 0xc0, 0xd3, 0x0c,
	0x84, 0x43, 0x03, 0x7a, 0xce, 0x00, 0x0d, 0x1d, 0x08, 0x87, 0xed, 0x42, 0x95, 0x22, 0x1e, 0x7e,
	0xc6, 0x5d, 0xda, 0x54, 0x69, 0xbe, 0xf7, 0xce, 0x0d, 0x83, 0x1c, 0x82, 0x30, 0x9f, 0x51, 0x71,
	0xf5, 0x2f, 0x36, 0x04, 0x86, 0xea, 0x6c, 0xd7, 0x92, 0x52, 0xf4, 0x13, 0x4b, 0xde, 0x20, 0xbd,
	0x1f, 0x7c, 0x09, 0xbd, 0x1b, 0x05, 0x05, 0x14, 0xaa, 0x15, 0x21, 0x66, 0x40, 0xdb, 0x72, 0x1c,
	0x81, 0xbf, 0x2d, 0x97, 0x22, 0x36, 0x5c, 0x0c, 0xbf, 0x54, 0x90, 0xd6, 0xca, 0x14, 0xa0, 0x48,
	0x76, 0x7f, 0x5c, 0x82, 0x4a, 0x52, 0x29, 0x56, 0x83, 0x85, 0xe3, 0xbd, 0x4f, 0xf6, 0xf6, 0x3f,
	0xdb, 0x6b, 0xbf, 0xc0, 0xaa, 0x30, 0xb7, 0xb9, 0xf5, 0xe8, 0xf8, 0xe3, 0x76, 0x89, 0x55, 0x60,
	0x76, 0x7b, 0xef, 0xf1, 0x7e, 0x7b, 0x86, 0x01, 0xcc, 0xef, 0xed, 0x1f, 0x6d, 0x6f, 0x6c, 0xb5,
	0xcb, 0xc8, 0xfe, 0xac, 0x67, 0xec, 0x6d, 0xef, 0x7d, 0xdc, 0x9e, 0x45, 0xf6, 0x96, 0x61, 0xec,
	0x1b, 0xed, 0x39, 0xb6, 0x00, 0xe5, 0x9d, 0xfd, 0x8f, 0xdb, 0xf3, 0x88, 0x3d, 0xee, 0x1d, 0xf5,
	0x76, 0xda, 0x0b, 0xf8, 0xf3, 0xa0, 0xb7, 0xb7, 0xbd, 0xd1, 0xae, 0xa0, 0x8a, 0xcd, 0xad, 0xa3,
	0xde, 0xf6, 0x4e, 0xbb, 0x8a, 0x8a, 0x9f, 0x6c, 0xef, 0x1d, 0xb5, 0x01, 0x95, 0x6d, 0xec, 0xef,
	0x1d, 0x6d, 0x7d, 0x7e, 0xd4, 0xae, 0xb1, 0x06, 0x54, 0x0f, 0x8f, 0x7a, 0x47, 0x5b, 0xbb, 0x5b,
	0x7b, 0x47, 0xed, 0x7a, 0xf7, 0x21, 0x2c, 0x5e, 0x68, 0x1f, 0xf6, 0x12, 0xac, 0xea, 0xb2, 0x9a,
	0x3b, 0xfb, 0x1f, 0x9b, 0x1b, 0x3b, 0xbd, 0xc3, 0xc3, 0xed, 0xc7, 0xdb, 0x1b, 0xbd, 0xa3, 0xed,
	0xfd, 0xbd, 0xf6, 0x0b, 0xdd, 0x9f, 0x95, 0x61, 0x41, 0xef, 0x27, 0xa0, 0x1d, 0xa1, 0x99, 0xaa,
	0xed, 0x08, 0xfe, 0xc6, 0x69, 0x4c, 0x43, 0xc6, 0x8b, 0x70, 0x31, 0x8c, 0xb9, 0xb6, 0x24, 0x75,
	0x0d, 0x7e, 0x8a, 0x18, 0x7b, 0x08, 0xb3, 0xb1, 0x27, 0x22, 0x9a, 0x6a, 0xb5, 0xf7, 0x5e, 0xbe,
	0x74, 0x89, 0x3c, 0x8c, 0x42, 0xe1, 0x0d, 0x0c, 0x22, 0xb3, 0x6f, 0x03, 0x9c, 0xf8, 0x7e, 0xa2,
	0x76, 0xf6, 0x66, 0x59, 0xab, 0x98, 0x45, 0x7d, 0xf4, 0xbb, 0xe8, 0x13, 0x48, 0x9e, 0x28, 0x98,
	0xbb, 0x99, 0x02, 0xa0, 0x3c, 0x4a, 0xc3, 0xfb, 0x30, 0x2f, 0xfd, 0x38, 0xb4, 0x95, 0x6d, 0xba,
	0x41, 0x66, 0x4d, 0xc7, 0x4f, 0xab, 0x5f, 0x64, 0xa2, 0x68, 0x6e, 0xdf, 0xe4, 0xd3, 0x2a, 0x0f,
	0x9a, 0xb0, 0x9c, 0x06, 0x1c, 0x9f, 0x34, 0xf3, 0x6f, 0xae, 0x01, 0x87, 0x64, 0xf7, 0x87, 0x73,
	0x50, 0xcb, 0xed, 0xe5, 0xd0, 0xea, 0x8b, 0x01, 0xb4, 0xed, 0x9f, 0xf1, 0x70, 0x4c, 0x7d, 0x88,
	0xab, 0xaf, 0x67, 0x68, 0x04, 0x97, 0xc1, 0xa4, 0x27, 0xcf, 0x69, 0x62, 0x27, 0x6b, 0x83, 0x72,
	0x9e, 0x97, 0xb4, 0xf0, 0x73, 0x9c, 0xb1, 0xc9, 0x22, 0x71, 0x04, 0x4c, 0x46, 0x96, 0xe7, 0x9c,
	0x14, 0x76, 0x26, 0x6a, 0x57, 0x44, 0x37, 0x87, 0x8a, 0x9e, 0xdb, 0x4b, 0x91, 0x13, 0x88, 0x64,
	0x5f, 0xc0, 0x72, 0xa2, 0xb5, 0x10, 0x8b, 0xd4, 0xaf, 0x98, 0xa4, 0x5a, 0x6f, 0x61, 0x27, 0x45,
	0x5e, 0xc0, 0x64, 0xbe, 0xc4, 0xb9, 0x38, 0xa4, 0x71, 0x7d, 0x89, 0xb3, 0x28, 0x24, 0x29, 0x71,
	0x2e, 0x7c, 0xba, 0x0f, 0x75, 0x21, 0x4d, 0x19, 0x85, 0xdc, 0x1a, 0xa1, 0xaf, 0xb4, 0xac, 0x2c,
	0xb5, 0x90, 0x87, 0x09, 0x84, 0xfe, 0x4a, 0xc8, 0x6d, 0x8e, 0x9e, 0x7a, 0xda, 0xb2, 0x2b, 0xd4,
	0xb2, 0x2d, 0x8d, 0xa7, 0xad, 0xfa, 0x06, 0x86, 0xa0, 0x81, 0x6b, 0x8d, 0x33, 0xe6, 0x2d, 0x62,
	0x36, 0x15, 0x9c, 0x12, 0x5f, 0x85, 0xa6, 0x15, 0x04, 0xee, 0x98, 0x22, 0x04, 0xd3, 0xb5, 0x06,
	0x9d, 0xdb, 0xb4, 0x98, 0xd5, 0x09, 0xc5, 0x00, 0x61, 0xc7, 0x1a, 0xb0, 0x2d, 0xfc, 0x32, 0xa9,
	0x4b, 0x0f, 0x18, 0x3a, 0x9d, 0x6b, 0xd7, 0x02, 0x5d, 0x84, 0x14, 0x60, 0xef, 0xc0, 0xf2, 0xa4,
	0x1a, 0xd3, 0x1a, 0xf0, 0xce, 0x1d, 0xfa, 0x24, 0x9b, 0xa0, 0xf7, 0x06, 0xbc, 0xfb, 0x10, 0xda,
	0x93, 0xdd, 0x4d, 0x9e, 0xbe, 0x2b, 0x70, 0x90, 0x59, 0x8e, 0x13, 0x6a, 0x53, 0x02, 0x0a, 0xea,
	0x39, 0x4e, 0xd8, 0xfd, 0xc5, 0x0c, 0xb0, 0x8b, 0x9d, 0x49, 0xfe, 0x4a, 0x32, 0x26, 0xb2, 0x15,
	0x3f, 0xe9, 0xe1, 0x89, 0x55, 0x79, 0xa6, 0xb8, 0x2a, 0xb7, 0xa1, 0x8c, 0x4b, 0x98, 0x5a, 0xe8,
	0xf1, 0x27, 0x76, 0x06, 0x36, 0x91, 0x9e, 0x1b, 0xca, 0xff, 0x50, 0xfe, 0x4b, 0x2b, 0x87, 0xa3,
	0x0b, 0x82, 0x9d, 0xa1, 0x0b, 0x3c, 0xf4, 0x65, 0x44, 0x4c, 0xe5, 0xd5, 0x36, 0x15, 0xfc, 0x44,
	0xa3, 0xb9, 0x9a, 0x05, 0xe8, 0xb0, 0xcd, 0xab, 0x12, 0x2a, 0xe8, 0x00, 0xbd, 0xb6, 0xef, 0x40,
	0x23, 0x59, 0x51, 0x95, 0x5b, 0xb2, 0x70, 0x6d, 0x27, 0xd4, 0x75, 0x06, 0xe5, 0xb5, 0xbc, 0x02,
	0x0d, 0x39, 0xf6, 0x6c, 0x33, 0x08, 0x85, 0x1f, 0x8a, 0x68, 0xac, 0xfd, 0xdd, 0x3a, 0x82, 0x07,
	0x1a, 0xa3, 0x48, 0x09, 0x49, 0x38, 0xba, 0x39, 0xb9, 0x04, 0xe8, 0xb6, 0x8d, 0x3d, 0x1b, 0x87,
	0x2b, 0xef, 0xfe, 0x70, 0x26, 0xed, 0x94, 0x2c, 0x58, 0xbe, 0xb6, 0x71, 0xd1, 0x0d, 0x25, 0x7d,
	0x89, 0x1b, 0x8a, 0x09, 0x2a, 0x0f, 0xd6, 0x37, 0x1d, 0xa5, 0x65, 0x7d, 0x90, 0xc3, 0xbd, 0x28,
	0x1d, 0xa3, 0xaf, 0x41, 0xf3, 0x59, 0x28, 0xa2, 0xdc, 0xa8, 0x57, 0x0d, 0xdd, 0x20, 0x34, 0x4f,
	0xeb, 0xbb, 0xb1, 0x1c, 0x66, 0x34, 0xd5, 0xca, 0x0d, 0x42, 0xaf, 0x9a, 0x1a, 0xf3, 0x53, 0xa7,
	0x46, 0xe2, 0xe1, 0xe1, 0xa4, 0x58, 0xc8, 0x3c, 0xbc, 0x1d, 0x6b, 0xd0, 0xfd, 0xa3, 0x59, 0x58,
	0xd0, 0x9b, 0xeb, 0x37, 0x89, 0x94, 0xae, 0x18, 0x58, 0x05, 0xef, 0xab, 0x3c, 0xe1, 0x7d, 0xe9,
	0x51, 0x37, 0x4b, 0xf0, 0xa5, 0xa3, 0x6e, 0x6e, 0xfa, 0xa8, 0x9b, 0x98, 0x26, 0xf3, 0x93, 0xd3,
	0xe4, 0x7f, 0x3e, 0x98, 0x3e, 0x00, 0xa0, 0x40, 0x47, 0xe5, 0xae, 0x5c, 0x9b, 0xbb, 0x8a, 0x6c,
	0x95, 0xf5, 0x43, 0xa8, 0xa5, 0xdb, 0x87, 0xa1, 0x8a, 0x93, 0xaf, 0xf1, 0x2b, 0x93, 0x1d, 0xcd,
	0x30, 0x62, 0x1f, 0x41, 0x9d, 0x46, 0x8f, 0x69, 0x0f, 0x2d, 0x6f, 0xc0, 0x6f, 0xe0, 0x95, 0xd6,
	0x88, 0xbf, 0x41, 0x74, 0x0c, 0x7d, 0x9e, 0x59, 0x02, 0xdd, 0x11, 0x1d, 0x63, 0x25, 0xc9, 0x6c,
	0x8c, 0xd6, 0xf3, 0x63, 0xf4, 0x75, 0x68, 0x21, 0x41, 0x6d, 0xe5, 0xa9, 0xa0, 0xb4, 0xa1, 0xc7,
	0x9f, 0x25, 0x22, 0xda, 0xa5, 0xa3, 0xe0, 0xf4, 0x1e, 0x40, 0xc6, 0xa3, 0x8d, 0x9c, 0xaa, 0x51,
	0x4d, 0x29, 0xdd, 0xaf, 0xc0, 0xd2, 0x94, 0x93, 0x8c, 0x69, 0x1e, 0x51, 0xf7, 0xf7, 0x4a, 0xb0,
	0x32, 0xf5, 0x4c, 0x02, 0xc7, 0x78, 0xfe, 0x84, 0x23, 0x1d, 0x6e, 0x8d, 0xdc, 0x59, 0x85, 0x73,
	0xce, 0xde, 0x02, 0xe6, 0x08, 0x79, 0x6a, 0x06, 0x56, 0x18, 0x09, 0xb5, 0x23, 0x97, 0x0e, 0xbd,
	0x36, 0x4a, 0x0e, 0x12, 0xc1, 0xe4, 0xf0, 0x2c, 0x17, 0x87, 0x67, 0xb6, 0xa7, 0x30, 0x9b, 0xdf,
	0x53, 0xe8, 0xfe, 0xa4, 0x06, 0xf3, 0x6a, 0xb7, 0x89, 0x1d, 0x03, 0xd3, 0x3b, 0x52, 0xb9, 0x95,
	0x96, 0x8a, 0x75, 0xd9, 0xae, 0x9c, 0xca, 0x58, 0xd8, 0x9f, 0x94, 0x93, 0x10, 0x4e, 0x8c, 0x44,
	0xad, 0xa3, 0x6d, 0x46, 0x45, 0xb3, 0x68, 0xce, 0x69, 0xa1, 0xb4, 0xfd, 0x80, 0x6b, 0xab, 0x51,
	0x53, 0xd8, 0x21, 0x42, 0xec, 0x73, 0x58, 0x92, 0xf6, 0x90, 0x3b, 0xb1, 0xcb, 0xf3, 0xc7, 0xb0,
	0x70, 0xc5, 0x31, 0xec, 0x61, 0xc2, 0xcf, 0x6d, 0x17, 0xca, 0x0b, 0x18, 0xdb, 0x4f, 0x77, 0xd6,
	0x32, 0xb5, 0xb5, 0x2b, 0x8e, 0x49, 0x77, 0xd5, 0xde, 0x5c, 0xb6, 0x73, 0x3a, 0x2a, 0x02, 0x6c,
	0x07, 0x5a, 0x76, 0x10, 0x17, 0x9a, 0xaf, 0x4e, 0xfa, 0xa6, 0x6f, 0xc4, 0x6e, 0x1c, 0x1c, 0xe7,
	0xdb, 0xae, 0x69, 0x07, 0x71, 0xbe, 0xe1, 0x9e, 0x00, 0x22, 0x79, 0x67, 0x4a, 0xb9, 0x26, 0xf7,
	0x2f, 0x53, 0x96, 0x39, 0x52, 0x0d, 0x3b, 0x88, 0x73, 0x4e, 0x94, 0xd6, 0x94, 0x73, 0x72, 0x9a,
	0x57, 0x6b, 0xca, 0xea, 0x88, 0x9a, 0x72, 0xce, 0xcd, 0x11, 0x30, 0x8f, 0x47, 0xcf, 0xfc, 0xf0,
	0x34, 0x5f, 0xae, 0xd6, 0x15, 0x2e, 0xd3, 0x9e, 0xa2, 0xe7, 0x9c, 0x3c, 0x6f, 0x02, 0x29, 0x68,
	0xcd, 0x95, 0xb1, 0x7d, 0xbd, 0xd6, 0x9c, 0x23, 0xe6, 0x4d, 0x20, 0x92, 0x7d, 0x02, 0x2d, 0x9a,
	0x3b, 0xb9, 0x82, 0x2e, 0x5e, 0xb1, 0x79, 0xbf, 0x29, 0x64, 0xae, 0x94, 0x4d, 0x27, 0x9f, 0xa4,
	0xb3, 0x65, 0x52, 0x56, 0x70, 0x42, 0xd9, 0x15, 0x67, 0xcb, 0xa8, 0xae, 0x70, 0xb6, 0xec, 0x14,
	0x81, 0xac, 0x7c, 0xb9, 0x2a, 0x2f, 0x5d, 0x53, 0xbe, 0xac, 0xbe, 0x54, 0xbe, 0x5c, 0x65, 0x07,
	0x70, 0x67, 0xc2, 0x50, 0xe4, 0xaa, 0xbd, 0x4c, 0x6a, 0xbf, 0x7a, 0xa9, 0xda, 0xd4, 0x88, 0x64,
	0xf5, 0xbf, 0xed, 0x4c, 0xc5, 0x25, 0x1b, 0xc1, 0xdd, 0x49, 0x8b, 0x94, 0x6f, 0x92, 0x15, 0xfa,
	0xd4, 0xd7, 0xae, 0xff, 0x54, 0xbe, 0x6d, 0xee, 0x38, 0x97, 0x48, 0xa6, 0xd5, 0x2b, 0xd7, 0x5c,
	0xb7, 0x6e, 0x5a, 0xaf, 0xac, 0xdd, 0x8a, 0xf5, 0xca, 0x35, 0xe0, 0x13, 0xb8, 0x8f, 0x2b, 0xbd,
	0xe9, 0x88, 0x90, 0x14, 0x8c, 0xcd, 0x29, 0x86, 0xf7, 0x25, 0x32, 0xaa, 0xf7, 0x90, 0xb8, 0x99,
	0xf0, 0x36, 0x27, 0xad, 0xf0, 0x37, 0xe0, 0x36, 0x05, 0x4d, 0x53, 0xf2, 0xbf, 0xac, 0xae, 0xd5,
	0xa0, 0xf8, 0x42, 0xb6, 0xd7, 0xa1, 0x45, 0xd9, 0x62, 0x99, 0x1e, 0x3d, 0xac, 0xd1, 0x36, 0x7f,
	0x03, 0xe1, 0x63, 0xa9, 0xcf, 0x1b, 0xba, 0xbf, 0x53, 0x86, 0xc5, 0x0b, 0x86, 0x97, 0x6d, 0xc1,
	0x2c, 0x2d, 0x68, 0x25, 0xda, 0x24, 0x79, 0xf7, 0x66, 0xe6, 0x5a, 0x23, 0xb8, 0xe8, 0x19, 0x94,
	0x9d, 0x1d, 0x42, 0x4d, 0x72, 0xb7, 0x4f, 0xfe, 0x2d, 0x57, 0xe6, 0xba, 0x76, 0xc9, 0x56, 0xce,
	0x05, 0x6d, 0x87, 0xdc, 0xed, 0x3f, 0xa1, 0x7c, 0x4f, 0x5e, 0x30, 0x40, 0xa6, 0x29, 0x76, 0x00,
	0x60, 0x8d, 0xac, 0xe7, 0x38, 0x26, 0x1d, 0xa9, 0x03, 0xff, 0xb7, 0x6f, 0xa6, 0xb3, 0x47, 0xf9,
	0x8c, 0xcd, 0xc3, 0x27, 0x2f, 0x18, 0x55, 0xa5, 0xc4, 0x70, 0x24, 0x7b, 0x1f, 0x28, 0xb8, 0xa7,
	0xe8, 0xe3, 0x06, 0x5e, 0x43, 0x05, 0xc9, 0x98, 0xec, 0xee, 0x01, 0x64, 0x75, 0x66, 0xb7, 0x80,
	0x1d, 0x6e, 0xed, 0x3c, 0x36, 0x9f, 0xec, 0x1f, 0x1e, 0x6d, 0x6d, 0x9a, 0x87, 0xdf, 0x3f, 0x3c,
	0xda, 0xda, 0x6d, 0xbf, 0xc0, 0x56, 0x60, 0xb1, 0xb7, 0xdb, 0xfb, 0x62, 0x7f, 0xcf, 0x34, 0x36,
	0x0f, 0x13, 0xb8, 0xc4, 0x16, 0xa1, 0xf1, 0x64, 0xcb, 0xd8, 0xff, 0xe4, 0x38, 0x81, 0x66, 0x1e,
	0xcd, 0xc3, 0x2c, 0x0e, 0x7f, 0xec, 0x94, 0xbb, 0x57, 0x34, 0x08, 0x5b, 0x85, 0x4a, 0x1a, 0x32,
	0x28, 0x07, 0x21, 0x4d, 0xb3, 0x2e, 0xd4, 0xad, 0xd0, 0x1e, 0x8a, 0x88, 0xdb, 0x51, 0x1c, 0xa6,
	0xbb, 0x26, 0x79, 0x0c, 0xdd, 0x45, 0x3f, 0xe0, 0xa1, 0x85, 0xde, 0x8d, 0x3e, 0x37, 0xd2, 0x6b,
	0x65, 0x2b, 0xc5, 0xf5, 0x32, 0xbe, 0x0a, 0x95, 0xc0, 0xb5, 0x22, 0x2c, 0x85, 0x76, 0xaf, 0xd3,
	0x34, 0xba, 0xcc, 0xc9, 0x6f, 0xb3, 0x6f, 0x8d, 0x84, 0x3b, 0x4e, 0x02, 0x98, 0x04, 0x7e, 0x4c,
	0x28, 0x7e, 0x2f, 0x25, 0x26, 0x07, 0x67, 0xca, 0xf1, 0x4c, 0x15, 0x24, 0x5b, 0xd5, 0x0f, 0x61,
	0xe5, 0x4c, 0x84, 0x51, 0x6c, 0xb9, 0xe2, 0xb9, 0x3e, 0x84, 0x55, 0xe5, 0x5b, 0x20, 0xfe, 0x72,
	0x51, 0xa8, 0x0b, 0xf9, 0x1a, 0x34, 0x4f, 0x79, 0xe8, 0x71, 0x37, 0xd5, 0x5e, 0x51, 0x9e, 0x98,
	0x42, 0x13, 0xdd, 0xff, 0x07, 0x56, 0x53, 0x97, 0x3c, 0x75, 0x22, 0xb8, 0x17, 0x89, 0xbe, 0xe0,
	0xa1, 0x0e, 0x68, 0x3a, 0x09, 0x43, 0xb7, 0x7f, 0x2a, 0xef, 0xfe, 0x41, 0x05, 0x56, 0x2f, 0x1f,
	0x51, 0xe8, 0x12, 0x85, 0x7c, 0x90, 0xf8, 0x38, 0x55, 0x43, 0xa7, 0xb0, 0x6c, 0xc2, 0xc3, 0x80,
	0xc7, 0xe6, 0x6a, 0x0b, 0x52, 0xf7, 0x48, 0x23, 0x41, 0x69, 0xdb, 0x4c, 0x6d, 0xa2, 0x68, 0x9a,
	0x8e, 0x28, 0xab, 0x06, 0x24, 0xd0, 0xb6, 0x83, 0xfa, 0xd1, 0x56, 0xc5, 0x52, 0x77, 0x83, 0x4e,
	0xd1, 0xd1, 0xc6, 0x99, 0x25, 0x5c, 0xeb, 0x44, 0xb8, 0x22, 0x1a, 0x9b, 0xcf, 0x7d, 0x2f, 0xf1,
	0xfd, 0xdb, 0x79, 0xc1, 0x17, 0xbe, 0xc7, 0xd9, 0xdb, 0xb0, 0x14, 0xc4, 0x27, 0xae, 0xb0, 0xdd,
	0xb1, 0x69, 0xd9, 0x36, 0x97, 0x52, 0x9c, 0xb8, 0xc9, 0x81, 0x09, 0x4b, 0x44, 0xbd, 0x54, 0x82,
	0x3e, 0x20, 0x9d, 0x5c, 0x98, 0xd6, 0x73, 0x7d, 0x5e, 0xb2, 0x40, 0xe9, 0xde, 0x73, 0xf6, 0x6d,
	0xb8, 0x2b, 0xb9, 0xed, 0x7b, 0x8e, 0x15, 0x8e, 0xcd, 0x8b, 0x45, 0x50, 0x3d, 0x70, 0x27, 0xa5,
	0xf4, 0x26, 0xcb, 0xf2, 0x1a, 0x34, 0x6d, 0xcb, 0xb4, 0x79, 0x18, 0xa9, 0x3d, 0xc3, 0x24, 0xa4,
	0x6c, 0xd8, 0xd6, 0x46, 0x06, 0xb2, 0x0f, 0x61, 0xd5, 0x8a, 0x23, 0x5f, 0xdd, 0x24, 0x4c, 0xef,
	0x15, 0xc6, 0xc1, 0x20, 0xb4, 0x1c, 0x35, 0x5b, 0x2b, 0xc6, 0x6d, 0x64, 0xd0, 0x75, 0x42, 0xdd,
	0xd5, 0xc7, 0x4a, 0x9c, 0x65, 0xb6, 0x7e, 0x30, 0x25, 0x73, 0x2d, 0x97, 0x19, 0x09, 0x13, 0x99,
	0xbf, 0x0b, 0x2f, 0x06, 0xb4, 0xec, 0x85, 0xdc, 0x31, 0x47, 0x96, 0xf0, 0x22, 0xee, 0x51, 0xff,
	0x3c, 0x13, 0x9e, 0xe3, 0x3f, 0xd3, 0xd1, 0xc0, 0x6a, 0xca, 0xd9, 0xcd, 0x28, 0x9f, 0x11, 0x83,
	0x7d, 0x13, 0x6e, 0x67, 0x1a, 0x30, 0x46, 0x8a, 0x83, 0x24, 0xb3, 0x8a, 0x03, 0x56, 0x52, 0xf1,
	0x23, 0x92, 0xea, 0x7c, 0x07, 0x70, 0xcb, 0xb5, 0x22, 0x2e, 0x23, 0x33, 0xe4, 0x32, 0xf2, 0x43,
	0x74, 0xe2, 0x95, 0x75, 0x6a, 0x5c, 0x6b, 0x9d, 0x96, 0x55, 0x4e, 0x23, 0xcd, 0x88, 0x22, 0xf6,
	0x1d, 0x78, 0x51, 0x7f, 0x3f, 0xe4, 0x11, 0x0e, 0x69, 0xdf, 0x33, 0x03, 0x1e, 0x0a, 0xdf, 0x31,
	0x1d, 0x6b, 0xac, 0xce, 0x8b, 0xe7, 0x8c, 0x3b, 0x8a, 0x63, 0x24, 0x94, 0x03, 0x62, 0x6c, 0x5a,
	0x63, 0x89, 0x73, 0x7d, 0x64, 0xc9, 0x48, 0x9f, 0x93, 0x92, 0xe5, 0x69, 0xab, 0xb9, 0xae, 0xe0,
	0x63, 0x8d, 0xe2, 0xc2, 0x23, 0x3c, 0x11, 0x09, 0xcb, 0x35, 0x9d, 0x13, 0x15, 0x89, 0x2e, 0x26,
	0x03, 0x9e, 0xe0, 0xcd, 0x13, 0x8a, 0x43, 0x3f, 0x00, 0x7d, 0x0a, 0x4b, 0x27, 0x08, 0xec, 0xfa,
	0x28, 0x51, 0xb3, 0x7b, 0x11, 0x8e, 0x62, 0xee, 0x0d, 0xb1, 0x9d, 0x1d, 0x73, 0xe4, 0x7b, 0x22,
	0xf2, 0x43, 0x8c, 0xda, 0x96, 0xd4, 0x28, 0x4e, 0x44, 0xbb, 0xa9, 0x84, 0x7d, 0x1d, 0x6e, 0x05,
	0x56, 0x68, 0x8d, 0x38, 0x96, 0x5f, 0xed, 0x6b, 0xe9, 0xb9, 0xb4, 0xae, 0xac, 0x4a, 0x2a, 0xed,
	0xa1, 0xf0, 0x50, 0xcd, 0xac, 0x42, 0xae, 0x60, 0x20, 0xa5, 0xc9, 0x3d, 0x6c, 0x50, 0xa7, 0xf3,
	0x15, 0xfa, 0x52, 0x96, 0xeb, 0x60, 0x20, 0xe5, 0x96, 0x92, 0x75, 0x7f, 0x54, 0x02, 0x76, 0x31,
	0x62, 0x60, 0x6f, 0xc2, 0xa2, 0xeb, 0x5b, 0x8e, 0x69, 0x9d, 0xf1, 0xd0, 0x1a, 0x70, 0xf3, 0xdd,
	0x91, 0x50, 0x96, 0xa2, 0x64, 0xb4, 0x50, 0xd0, 0x53, 0x38, 0xc2, 0x17, 0xb8, 0xdf, 0x40, 0xee,
	0xcc, 0x05, 0x2e, 0xc2, 0x18, 0xd2, 0x15, 0xf5, 0x12, 0xb9, 0x4c, 0xe4, 0x76, 0x5e, 0x31, 0xe2,
	0xdd, 0x3f, 0x9c, 0x87, 0xd6, 0x44, 0xdc, 0x81, 0x96, 0x27, 0xf2, 0x23, 0xcb, 0xd5, 0x5e, 0x42,
	0x89, 0xbc, 0x04, 0x20, 0x48, 0x5d, 0x04, 0xb8, 0x0f, 0x75, 0xdb, 0xc2, 0x1a, 0x69, 0xc6, 0x0c,
	0x31, 0x6a, 0x0a, 0x53, 0x94, 0x57, 0xa0, 0x71, 0x12, 0xf7, 0xfb, 0x3c, 0x4c, 0xae, 0x14, 0x94,
	0x89, 0x53, 0xd7, 0xa0, 0x22, 0xd1, 0x61, 0x29, 0xe7, 0x9a, 0x31, 0x4b, 0x8c, 0x2a, 0x22, 0x4a,
	0xfc, 0x06, 0xb4, 0x68, 0xe3, 0x06, 0xc7, 0xa0, 0xe6, 0xcc, 0xa9, 0x8b, 0x09, 0x29, 0xac, 0x88,
	0x2f, 0x43, 0xcd, 0x11, 0x61, 0x34, 0xd6, 0xa4, 0x79, 0x55, 0x60, 0x82, 0xd2, 0x0f, 0x49, 0xd7,
	0x3a, 0xd1, 0xf2, 0x05, 0xf5, 0x21, 0x44, 0xd2, 0xfa, 0x8c, 0xac, 0x20, 0x48, 0xeb, 0x53, 0x51,
	0xf5, 0x51, 0x98, 0xa2, 0xbc, 0x09, 0x8b, 0x01, 0xb6, 0xa6, 0x0a, 0x9f, 0x35, 0xaf, 0x4a, 0xbc,
	0x16, 0x0a, 0x54, 0x14, 0x9e, 0xaa, 0xd3, 0xf7, 0x24, 0x14, 0x0d, 0x94, 0x3a, 0x85, 0x29, 0x0a,
	0xad, 0x01, 0x05, 0x52, 0x4d, 0xf9, 0x62, 0x09, 0x9a, 0xb6, 0x80, 0xb6, 0xa3, 0x6e, 0xc2, 0xab,
	0xab, 0x16, 0x48, 0x61, 0x45, 0x7c, 0x1d, 0x5a, 0xf2, 0x99, 0x15, 0xe4, 0x9d, 0x3b, 0x75, 0xaf,
	0xa4, 0x81, 0x70, 0xea, 0xdc, 0xb1, 0x75, 0x68, 0x13, 0x2f, 0xdf, 0xbf, 0xea, 0x26, 0x49, 0x13,
	0xf1, 0xa3, 0xac, 0x8f, 0xdf, 0x85, 0x95, 0x61, 0x3c, 0xe0, 0x26, 0x56, 0x4e, 0xd2, 0xb1, 0xaa,
	0xa6, 0x2f, 0x13, 0x9d, 0xa1, 0xf0, 0x00, 0x65, 0x87, 0xe2, 0x79, 0x56, 0x88, 0x5c, 0x16, 0xec,
	0x47, 0xda, 0x75, 0x9e, 0x35, 0x1a, 0x29, 0xf9, 0x71, 0xc8, 0x39, 0x9d, 0x5c, 0x66, 0x3c, 0x2a,
	0x0a, 0x6d, 0x3a, 0xcf, 0x1a, 0xcd, 0x94, 0x48, 0x25, 0x61, 0x0f, 0x60, 0x29, 0xc7, 0x0c, 0xb9,
	0xe4, 0xe1, 0x19, 0x77, 0x68, 0xe7, 0x79, 0xd6, 0x58, 0x4c, 0xc9, 0x86, 0x16, 0xe0, 0xd8, 0xcf,
	0x17, 0x3a, 0x0e, 0x03, 0x37, 0x96, 0xb4, 0x01, 0x3d, 0x6b, 0xb4, 0xb3, 0x12, 0x2b, 0x9c, 0x16,
	0xca, 0xdc, 0x1e, 0x99, 0xaa, 0xde, 0x4b, 0x8a, 0x9c, 0x13, 0x28, 0xb7, 0xf8, 0x97, 0x25, 0x68,
	0x16, 0x03, 0x6a, 0xb6, 0x0c, 0x73, 0x23, 0xdf, 0xe1, 0xc9, 0x29, 0xba, 0x4a, 0x60, 0xed, 0x68,
	0x22, 0xe4, 0xdb, 0x4c, 0x6d, 0xa8, 0x34, 0x09, 0xcf, 0xda, 0xeb, 0x2e, 0x54, 0x65, 0xc0, 0xd1,
	0x64, 0x0d, 0x9f, 0xeb, 0x09, 0x5a, 0x21, 0x60, 0x77, 0xf8, 0x9c, 0x76, 0x2e, 0x7c, 0xfb, 0x94,
	0x47, 0xa6, 0xed, 0xc7, 0x5e, 0xa4, 0xf7, 0xf6, 0x6a, 0x0a, 0xdb, 0x40, 0x08, 0x5b, 0x27, 0x18,
	0x8e, 0xa5, 0xa0, 0x1b, 0x01, 0x7e, 0xc8, 0x35, 0x53, 0x9d, 0x13, 0x2f, 0x26, 0xa2, 0x0d, 0x3f,
	0xe4, 0x8a, 0x4f, 0x96, 0x61, 0x30, 0x49, 0x57, 0x9b, 0xc7, 0x6d, 0x2d, 0x49, 0xd9, 0xdd, 0x37,
	0xa0, 0x9e, 0x8f, 0xf9, 0xd9, 0x6d, 0x58, 0xa0, 0x5c, 0xe9, 0xe1, 0xfe, 0x3c, 0x26, 0xb7, 0x9d,
	0xee, 0x8f, 0xcb, 0xc4, 0xcc, 0xec, 0x07, 0x32, 0x83, 0x38, 0xb7, 0xe9, 0x34, 0x6f, 0x07, 0xb1,
	0x3e, 0x88, 0xc6, 0xb5, 0x02, 0xd7, 0x19, 0x9b, 0x7b, 0x91, 0xb6, 0x60, 0x35, 0xc4, 0x0e, 0x14,
	0x84, 0x13, 0x43, 0x3b, 0x62, 0x09, 0x49, 0x35, 0x4c, 0x43, 0xa1, 0x09, 0xed, 0x3e, 0xd4, 0x85,
	0xe3, 0xf2, 0x94, 0x34, 0xab, 0x34, 0x21, 0x96, 0xa3, 0x78, 0xc2, 0xce, 0x28, 0x73, 0x8a, 0x82,
	0x58, 0xee, 0x63, 0xc2, 0xa7, 0xad, 0xb8, 0x84, 0x34, 0xaf, 0x3e, 0xa6, 0xd0, 0x84, 0x86, 0x9e,
	0x58, 0xf8, 0x34, 0xe5, 0x2c, 0x10, 0x07, 0x44, 0xf8, 0x34, 0x21, 0xe0, 0xac, 0xf2, 0xfb, 0x91,
	0x99, 0x67, 0x55, 0x88, 0xd5, 0x44, 0x7c, 0x3b, 0x63, 0xbe, 0x02, 0x0d, 0x19, 0x71, 0xcb, 0x4d,
	0x69, 0x55, 0xa2, 0xd5, 0x09, 0xcc, 0x91, 0x06, 0x31, 0xae, 0xf5, 0x09, 0x09, 0x14, 0x89, 0xc0,
	0x84, 0xf4, 0x16, 0x30, 0x45, 0x2a, 0x54, 0xb2, 0xa6, 0xcc, 0x3c, 0x49, 0xf6, 0xb2, 0x9a, 0x76,
	0x3f, 0x80, 0xf6, 0xe4, 0x46, 0x89, 0xb2, 0x41, 0x11, 0x0f, 0xfb, 0x96, 0xcd, 0xcd, 0x5c, 0xe4,
	0xd0, 0x48, 0x51, 0xba, 0x17, 0xf1, 0xd7, 0xa5, 0x34, 0x6f, 0x61, 0x89, 0x48, 0x76, 0x54, 0x72,
	0xbb, 0xf8, 0x1a, 0xc2, 0xae, 0xde, 0x83, 0x57, 0xa3, 0xd0, 0xf2, 0xe4, 0x48, 0x44, 0x66, 0x34,
	0x0c, 0xfd, 0x78, 0x30, 0x0c, 0xe2, 0x48, 0x4d, 0x07, 0x2c, 0xad, 0xa9, 0xdc, 0x40, 0xbd, 0x74,
	0xac, 0x25, 0xdc, 0xa3, 0x94, 0x4a, 0x53, 0xe4, 0x80, 0x87, 0x87, 0xc4, 0x63, 0x3b, 0xf0, 0x4a,
	0x72, 0xa4, 0x75, 0x95, 0x3a, 0xb5, 0xca, 0xbc, 0xac, 0xa9, 0x97, 0x69, 0xeb, 0xbe, 0x03, 0x8d,
	0xc2, 0x76, 0x0c, 0xad, 0x20, 0xfc, 0x4c, 0x14, 0x1b, 0x02, 0x14, 0x44, 0xad, 0xf0, 0xd3, 0x12,
	0xb4, 0x26, 0xb6, 0x5c, 0xd0, 0x15, 0x56, 0x7b, 0x36, 0xd9, 0x8d, 0x35, 0xda, 0x84, 0x51, 0xbb,
	0xf5, 0x24, 0xa2, 0x98, 0x59, 0x6f, 0x4a, 0x22, 0x40, 0x61, 0xe1, 0x8b, 0x50, 0x4d, 0x77, 0x0b,
	0xd3, 0xcb, 0x2e, 0x09, 0x40, 0xa1, 0x51, 0xe8, 0x9f, 0x09, 0x74, 0x3c, 0xb9, 0x63, 0x0a, 0x3f,
	0x50, 0x4b, 0x63, 0xc3, 0x68, 0xe5, 0xf0, 0x6d, 0x3f, 0x90, 0xa8, 0x88, 0x7b, 0x76, 0x38, 0x0e,
	0x30, 0x96, 0x56, 0x17, 0xd9, 0x32, 0xa0, 0xfb, 0x93, 0x59, 0x55, 0xcb, 0xac, 0xd7, 0xae, 0x28,
	0xf0, 0x87, 0xb0, 0x1a, 0x72, 0xcb, 0x31, 0x75, 0xb4, 0xe7, 0x7b, 0x17, 0x7a, 0xa9, 0x64, 0xdc,
	0x46, 0xc6, 0x7e, 0x4a, 0xc8, 0x3a, 0xe7, 0x1b, 0x40, 0x22, 0x69, 0x8e, 0x78, 0x38, 0xe0, 0xce,
	0x64, 0x87, 0x94, 0x8c, 0x65, 0x12, 0xef, 0x92, 0x34, 0xcb, 0xf6, 0x2e, 0xac, 0xa8, 0x0e, 0xa4,
	0x2f, 0xe7, 0x32, 0xa9, 0xd9, 0xcc, 0x48, 0x68, 0x70, 0x2b, 0x97, 0x65, 0x1d, 0xda, 0xd6, 0xd9,
	0x40, 0x65, 0x40, 0xb7, 0xd6, 0xb3, 0xc7, 0x7a, 0x62, 0x37, 0xad, 0xb3, 0x01, 0x72, 0x77, 0x14,
	0xca, 0x3e, 0x82, 0xbb, 0xea, 0x2c, 0x68, 0x7a, 0x8d, 0xd4, 0x44, 0xef, 0x10, 0x65, 0x5a, 0x95,
	0xde, 0x07, 0x25, 0x9b, 0x56, 0x27, 0x65, 0x00, 0x56, 0x94, 0x7c, 0xb2, 0x52, 0xef, 0x43, 0x47,
	0x55, 0x0a, 0xc5, 0x11, 0xf7, 0xf2, 0x19, 0x95, 0x4d, 0x50, 0x95, 0xfe, 0x4c, 0x89, 0xb3, 0x8c,
	0x6f, 0x62, 0xd8, 0x36, 0x30, 0xf5, 0x01, 0x96, 0xae, 0x9b, 0x32, 0x0f, 0x2d, 0xeb, 0x6c, 0xf0,
	0x19, 0x1d, 0x61, 0xe9, 0xca, 0xbd, 0x0a, 0x58, 0x5d, 0xf3, 0x69, 0xcc, 0x63, 0x7d, 0xe5, 0x09,
	0xd4, 0xf1, 0x9c, 0x75, 0x36, 0xf8, 0x1e, 0x82, 0x74, 0xed, 0xe9, 0x6d, 0x58, 0x8a, 0x23, 0x91,
	0x86, 0xcd, 0x89, 0x8d, 0xa8, 0xab, 0xd6, 0xcd, 0x89, 0x12, 0x2b, 0xf1, 0x2d, 0xb8, 0x35, 0x7d,
	0xbb, 0x8e, 0xbd, 0x04, 0x30, 0xc2, 0x55, 0x21, 0xf0, 0x85, 0x17, 0x25, 0xd3, 0x23, 0x43, 0xba,
	0xbf, 0x28, 0x41, 0xe7, 0xb2, 0xed, 0xb7, 0x4b, 0x0e, 0x19, 0x4a, 0x97, 0x1f, 0x32, 0xa4, 0x83,
	0x74, 0xa6, 0x38, 0x48, 0xdf, 0x80, 0x56, 0x5f, 0xb8, 0x5c, 0x2f, 0x10, 0x34, 0xb7, 0xd4, 0xf4,
	0x69, 0x66, 0x30, 0xcd, 0xb0, 0x22, 0xd1, 0x0f, 0xa2, 0x24, 0x46, 0xce, 0x11, 0xf7, 0x83, 0x88,
	0xfc, 0xb0, 0xac, 0x54, 0xb9, 0x43, 0xb2, 0x46, 0x8a, 0xd2, 0xec, 0xff, 0xf5, 0xd2, 0x44, 0xcb,
	0x64, 0x73, 0xea, 0xcb, 0x55, 0xee, 0x1e, 0x40, 0xce, 0x45, 0x53, 0xc6, 0xaf, 0x1a, 0xa7, 0xee,
	0xd9, 0x84, 0xe7, 0x5d, 0x9e, 0xf4, 0xbc, 0xbb, 0xbf, 0x9c, 0x85, 0x66, 0xf1, 0xfe, 0x7b, 0xf1,
	0x60, 0xb0, 0x34, 0x71, 0x30, 0xb8, 0x0c, 0x73, 0xea, 0x06, 0xae, 0xba, 0x96, 0xa6, 0x12, 0x58,
	0x0a, 0xf5, 0x19, 0x8a, 0x20, 0xd5, 0x14, 0xad, 0x12, 0x42, 0xa1, 0x21, 0x83, 0xd9, 0xd0, 0x7f,
	0xa6, 0x9a, 0xac, 0x6c, 0xd0, 0x6f, 0x72, 0x30, 0xe9, 0x85, 0xa0, 0x79, 0xe2, 0x9e, 0x4a, 0x73,
	0x28, 0x22, 0x7d, 0xcb, 0xae, 0xa1, 0xe0, 0x47, 0xee, 0xa9, 0x7c, 0x22, 0xd4, 0x52, 0x98, 0xe3,
	0xe1, 0x44, 0xa5, 0xb9, 0x56, 0x36, 0x9a, 0x19, 0x11, 0xe7, 0x29, 0x7a, 0x2f, 0x79, 0x26, 0x7a,
	0xeb, 0x82, 0x3b, 0xfa, 0x00, 0x75, 0x31, 0x23, 0x6f, 0x2a, 0xc1, 0x24, 0x5f, 0x4f, 0x2f, 0x9a,
	0x53, 0x05, 0xbe, 0x9e, 0x58, 0x38, 0x47, 0xd4, 0x65, 0xc9, 0xb4, 0xc0, 0x55, 0x75, 0x61, 0x81,
	0xd0, 0xa4, 0xbc, 0xaf, 0x43, 0x2b, 0xc7, 0xa2, 0xe2, 0x82, 0xaa, 0x57, 0x4a, 0xa3, 0xd2, 0x92,
	0xef, 0x94, 0xf2, 0x92, 0xc2, 0xd6, 0x88, 0xda, 0x4e, 0xa9, 0x49, 0x59, 0x8b, 0xec, 0xa4, 0xa8,
	0xf5, 0x09, 0x76, 0xae, 0xa4, 0x11, 0x1f, 0x05, 0xb9, 0x22, 0x34, 0x54, 0x49, 0x11, 0x4d, 0x4b,
	0xf0, 0x26, 0x2c, 0x66, 0xac, 0x44, 0x65, 0x93, 0x88, 0xad, 0x84, 0x98, 0x68, 0xec, 0x42, 0xe3,
	0xc4, 0x3d, 0x55, 0x66, 0x92, 0xfa, 0xb8, 0xa5, 0x9c, 0x9f, 0x13, 0xf7, 0x14, 0x75, 0x51, 0x2f,
	0xbf, 0x0a, 0x4d, 0xe4, 0x28, 0x7b, 0x43, 0xa4, 0xb6, 0x72, 0x33, 0x4e, 0xdc, 0x53, 0x32, 0x36,
	0xb4, 0xa1, 0xf9, 0xf3, 0x12, 0xdc, 0xbe, 0xe4, 0x45, 0xc6, 0x85, 0x77, 0x93, 0xa5, 0xff, 0xb5,
	0x77, 0x93, 0x33, 0x57, 0xbd, 0x9b, 0xdc, 0x00, 0xc8, 0xed, 0xd1, 0x97, 0x6f, 0xfe, 0xd8, 0x25,
	0x97, 0xad, 0xfb, 0xa3, 0x19, 0xa8, 0xe5, 0x5e, 0xaf, 0x5c, 0x3d, 0x8b, 0x26, 0x2e, 0x37, 0xce,
	0x7c, 0xa9, 0xcb, 0x8d, 0xf7, 0x00, 0xc2, 0xd8, 0xc3, 0x06, 0x36, 0x47, 0x32, 0x99, 0x6c, 0x1a,
	0xd9, 0x25, 0x0b, 0x94, 0xde, 0x4d, 0xa5, 0x0f, 0xea, 0x3b, 0x50, 0xe9, 0x8d, 0x55, 0x2a, 0x25,
	0x5a, 0x86, 0xa1, 0x25, 0x4d, 0x7e, 0x1e, 0xb8, 0x96, 0xf0, 0xf4, 0xa5, 0x1f, 0x18, 0x5a, 0x72,
	0x4b, 0x21, 0xa8, 0x47, 0x0b, 0x4d, 0x3f, 0x8e, 0x82, 0x38, 0xd2, 0x37, 0x7e, 0x1a, 0x1a, 0xdd,
	0x27, 0x10, 0x7d, 0xcb, 0x84, 0x46, 0x0f, 0x43, 0xf5, 0x6d, 0x9f, 0xba, 0x06, 0xe9, 0x55, 0x68,
	0xf7, 0xf7, 0xab, 0xb0, 0x34, 0xe5, 0x7d, 0x0c, 0xba, 0xd4, 0xd9, 0x4b, 0x9b, 0xec, 0x06, 0x43,
	0xfa, 0x6a, 0xc6, 0x39, 0x47, 0xfd, 0x29, 0x25, 0xe7, 0xfc, 0xa4, 0xf9, 0xc8, 0x3c, 0x3f, 0x81,
	0xd6, 0x99, 0xe0, 0xcf, 0x4c, 0x87, 0xf7, 0x69, 0x0b, 0x48, 0x5f, 0xe7, 0xb8, 0xc1, 0xad, 0xb3,
	0x26, 0xe6, 0xdb, 0x4c, 0xb3, 0xb1, 0x6d, 0xba, 0x18, 0x1e, 0x8f, 0x3c, 0x49, 0xe7, 0xce, 0x97,
	0xed, 0xfb, 0x4f, 0xa9, 0xcc, 0x83, 0x0d, 0xca, 0x67, 0x24, 0xf9, 0xd9, 0x31, 0xd4, 0x6c, 0xdf,
	0x93, 0x51, 0x68, 0x09, 0x2f, 0x92, 0x9d, 0x39, 0x52, 0xf7, 0xf0, 0x4b, 0xa8, 0x4b, 0xf2, 0x1a,
	0x79, 0x3d, 0xe4, 0xce, 0xf1, 0x50, 0x0a, 0x89, 0x2b, 0x37, 0x57, 0x6d, 0x92, 0xec, 0x74, 0x67,
	0x38, 0x35, 0xcb, 0x4b, 0x00, 0x7d, 0xe1, 0xba, 0x7d, 0x0b, 0x3f, 0xa2, 0x6f, 0xe9, 0xe6, 0x10,
	0x5c, 0x19, 0x71, 0x0c, 0xf8, 0xc2, 0x49, 0x5e, 0x15, 0x2c, 0x0c, 0x2d, 0xb9, 0x2f, 0xe8, 0xb9,
	0x66, 0x07, 0x45, 0xfa, 0x59, 0x84, 0xda, 0x5a, 0x1e, 0x0a, 0xd7, 0x09, 0xb9, 0x47, 0x66, 0xaf,
	0x62, 0xdc, 0x1a, 0x5a, 0x72, 0x3b, 0x13, 0x6f, 0x68, 0x29, 0x0e, 0x7c, 0xcc, 0x19, 0xf9, 0x96,
	0x8c, 0xf4, 0xe6, 0x29, 0x7e, 0xe5, 0x08, 0xd3, 0x13, 0xb7, 0xd9, 0x6b, 0x37, 0xbe, 0xcd, 0x5e,
	0xbf, 0xfc, 0x36, 0xfb, 0xd7, 0x80, 0xf1, 0x73, 0xdb, 0x8d, 0xa5, 0x38, 0xe3, 0x2e, 0x5d, 0xad,
	0x39, 0xe5, 0xca, 0xe0, 0x55, 0x8c, 0xc5, 0x9c, 0x64, 0x87, 0x04, 0xab, 0x3f, 0x2b, 0xc1, 0xbc,
	0xea, 0xa9, 0xf4, 0x02, 0xc4, 0x4c, 0xee, 0x4a, 0x28, 0xfa, 0xd9, 0x56, 0x64, 0xe5, 0x7d, 0x81,
	0x0a, 0x02, 0xd4, 0x9e, 0x9b, 0xd0, 0x70, 0x78, 0xdf, 0x8a, 0xdd, 0x2f, 0x79, 0xb1, 0xb3, 0xae,
	0x73, 0xa9, 0x9b, 0x99, 0x77, 0xa0, 0xe2, 0xf9, 0x91, 0xe9, 0xc5, 0xae, 0xab, 0x7d, 0xec, 0x05,
	0xcf, 0x8f, 0x90, 0x4e, 0x47, 0x21, 0xbe, 0x14, 0xe9, 0xd5, 0xa0, 0x39, 0x23, 0x4d, 0xaf, 0xfe,
	0xe3, 0x0c, 0x40, 0x36, 0x26, 0xd8, 0x3b, 0xb0, 0xdc, 0xf7, 0x43, 0x2e, 0x06, 0x9e, 0x39, 0x65,
	0x0a, 0x31, 0x2d, 0x33, 0x72, 0x33, 0x69, 0x5a, 0x75, 0x99, 0x3e, 0x85, 0x53, 0x35, 0x55, 0x47,
	0x6a, 0xaf, 0x41, 0x33, 0x1b, 0x6f, 0x38, 0xa5, 0x92, 0x4b, 0x4f, 0x19, 0xba, 0xc9, 0xfb, 0xfa,
	0x09, 0x05, 0xcd, 0x94, 0x39, 0x7a, 0xda, 0x91, 0x0e, 0x7c, 0x74, 0x96, 0x74, 0xd1, 0x12, 0xc6,
	0x3c, 0x31, 0x9a, 0x1a, 0xde, 0xd0, 0xc4, 0x07, 0xb0, 0x94, 0x10, 0xe3, 0xc0, 0xb1, 0x22, 0x3d,
	0x9a, 0xd5, 0x39, 0xcc, 0xa2, 0x16, 0x1d, 0x93, 0x84, 0xda, 0x3f, 0xc7, 0x77, 0xb8, 0xcb, 0x13,
	0x7e, 0xa5, 0xc0, 0xdf, 0x24, 0x09, 0xf1, 0xdf, 0x82, 0xa4, 0x1d, 0xcc, 0x91, 0x15, 0xd9, 0x43,
	0x45, 0x57, 0x67, 0x00, 0x6d, 0x2d, 0xd9, 0x45, 0x01, 0xb2, 0xbb, 0x7f, 0x3f, 0x07, 0x8b, 0x17,
	0x9e, 0xd9, 0xdd, 0xc4, 0x44, 0xdd, 0x03, 0x98, 0xd8, 0x9a, 0x29, 0x1b, 0x55, 0x99, 0xee, 0xca,
	0xdc, 0x81, 0x8a, 0xe4, 0x4f, 0x4d, 0x69, 0x5b, 0x5e, 0x72, 0x5f, 0x5f, 0xf2, 0xa7, 0x87, 0xb6,
	0x45, 0x6f, 0x01, 0x50, 0x14, 0xd1, 0xa6, 0xb9, 0xe5, 0x68, 0x07, 0x09, 0x24, 0x7f, 0x7a, 0x14,
	0x07, 0xb4, 0x48, 0xdf, 0x81, 0x8a, 0x70, 0xce, 0x55, 0x66, 0xe5, 0x1f, 0x2d, 0x08, 0xe7, 0x9c,
	0x32, 0x77, 0xa1, 0x81, 0x22, 0xcc, 0xdc, 0xe7, 0x91, 0x3d, 0xd4, 0x6e, 0x51, 0x4d, 0x38, 0xe7,
	0x47, 0x71, 0xf0, 0x18, 0x21, 0xb6, 0x0a, 0x55, 0x8f, 0x18, 0x42, 0xbf, 0x46, 0x29, 0x1b, 0x0b,
	0xde, 0x51, 0x1c, 0x6c, 0x7b, 0x32, 0x93, 0xc5, 0x81, 0xa3, 0xbd, 0x1e, 0x92, 0x1d, 0x07, 0x4e,
	0x26, 0x73, 0xb8, 0xab, 0xdd, 0x1c, 0x92, 0x6d, 0x72, 0x97, 0xdd, 0x87, 0x86, 0x92, 0xd1, 0x7f,
	0x20, 0x04, 0x89, 0x7f, 0x03, 0x28, 0x7f, 0xe2, 0x47, 0x98, 0xfd, 0x45, 0x00, 0xcf, 0x74, 0x29,
	0xb6, 0x8e, 0x03, 0xed, 0xd4, 0x54, 0xbc, 0x1d, 0x8c, 0xa0, 0xe3, 0x40, 0x49, 0x1d, 0x72, 0x25,
	0xe2, 0x40, 0x3b, 0x31, 0x15, 0x6f, 0x13, 0xfd, 0x88, 0x38, 0x60, 0x5f, 0x83, 0x25, 0xcf, 0x1c,
	0xf9, 0x8e, 0x29, 0x05, 0x5a, 0x1d, 0x3d, 0xb1, 0xb4, 0x07, 0xd3, 0xf6, 0x76, 0x7d, 0xe7, 0x10,
	0x05, 0x3d, 0x85, 0xa3, 0xd7, 0x41, 0xcf, 0xd8, 0x32, 0x5f, 0x87, 0x29, 0x5f, 0x07, 0xd1, 0xd4,
	0xd7, 0xe9, 0x42, 0x23, 0x63, 0xa1, 0xeb, 0xb6, 0xa4, 0xda, 0x2a, 0x21, 0xa1, 0xe7, 0xa6, 0xdb,
	0x33, 0x53, 0xb4, 0x9c, 0xb6, 0x67, 0xaa, 0x67, 0x0d, 0xea, 0x29, 0x07, 0xd5, 0xac, 0xa8, 0xaa,
	0x6b, 0x8a, 0xf6, 0xff, 0xc8, 0xf4, 0xe5, 0xf4, 0xdc, 0x52, 0xfe, 0x1f, 0xc1, 0xa9, 0x26, 0xf4,
	0xd1, 0x32, 0x1e, 0xea, 0xd2, 0xd7, 0x5f, 0x53, 0x1a, 0x6a, 0x43, 0x56, 0xb1, 0x50, 0x1d, 0xcd,
	0xca, 0x97, 0xaa, 0x0b, 0x8d, 0xa8, 0x50, 0x2c, 0x75, 0xad, 0xb5, 0x16, 0x65, 0xe5, 0xea, 0xfe,
	0xc9, 0x0c, 0x34, 0x0a, 0xcf, 0x3d, 0x6f, 0x32, 0xb2, 0xbf, 0xab, 0xcd, 0xc3, 0x0c, 0x1d, 0xd2,
	0xbf, 0x75, 0xfd, 0x1b, 0xd2, 0x07, 0xe9, 0xa5, 0x34, 0x6d, 0x4c, 0x26, 0x3c, 0x9d, 0xf2, 0x97,
	0xf2, 0x74, 0xbe, 0x09, 0xb7, 0xad, 0x20, 0x08, 0xfd, 0x73, 0x31, 0x42, 0xe3, 0x90, 0x57, 0xa4,
	0x5e, 0xb6, 0xac, 0xe4, 0xc4, 0xfb, 0x69, 0xbe, 0xee, 0x31, 0x54, 0xb3, 0xcb, 0x71, 0x8b, 0xd0,
	0xd8, 0xed, 0xed, 0x1d, 0xf7, 0x76, 0xcc, 0x4f, 0x7b, 0x1b, 0xc7, 0xc7, 0xbb, 0xed, 0x17, 0x58,
	0x0b, 0x6a, 0xbd, 0xe3, 0xa3, 0xfd, 0x04, 0x28, 0x31, 0x06, 0x4d, 0xcd, 0xe9, 0xed, 0xf5, 0x76,
	0xbe, 0xff, 0xc5, 0x56, 0x7b, 0x86, 0xb5, 0xa1, 0x4e, 0xa4, 0x04, 0x29, 0x77, 0xff, 0x7d, 0x06,
	0xda, 0x93, 0x0f, 0x5c, 0x71, 0xc1, 0xd0, 0x8f, 0x64, 0x33, 0x3f, 0x4f, 0xbd, 0x79, 0x55, 0xfb,
	0x93, 0x85, 0x26, 0x9e, 0xb9, 0xd8, 0xc4, 0x39, 0x33, 0x5a, 0x2e, 0x9a, 0xd1, 0x54, 0x73, 0x66,
	0x82, 0x95, 0x66, 0xb4, 0xbe, 0x8f, 0x2f, 0x18, 0xe9, 0x1b, 0xbe, 0x11, 0x98, 0xb0, 0xe2, 0xf7,
	0x00, 0x84, 0x34, 0x83, 0x50, 0x8c, 0xac, 0x70, 0x9c, 0xbc, 0x4d, 0x14, 0xf2, 0x40, 0x01, 0x54,
	0x06, 0x69, 0xc6, 0x9e, 0x78, 0x1a, 0x73, 0x7d, 0x3a, 0x5b, 0x11, 0xf2, 0x98, 0xd2, 0x64, 0x9b,
	0xa4, 0x7a, 0x46, 0x98, 0xb8, 0x0f, 0x42, 0xd2, 0xb3, 0xc0, 0x09, 0xcf, 0xa3, 0x7a, 0xc1, 0xf3,
	0xc0, 0xcf, 0x52, 0xdd, 0x68, 0x78, 0xe9, 0x17, 0xae, 0x84, 0x90, 0x29, 0xfe, 0x8f, 0x12, 0x34,
	0x8b, 0xaf, 0x7e, 0xaf, 0x6e, 0xe7, 0xeb, 0x2d, 0x70, 0x6a, 0x44, 0xcb, 0x45, 0x23, 0xaa, 0x27,
	0xf4, 0xa4, 0x05, 0x56, 0x36, 0x34, 0x99, 0x5c, 0xd7, 0x9a, 0xd9, 0x0b, 0xa6, 0x63, 0xe1, 0x7a,
	0xd3, 0x51, 0x99, 0x34, 0x1d, 0xdd, 0xdf, 0x2e, 0xc3, 0xd2, 0x94, 0x57, 0xc9, 0x38, 0x8a, 0xb2,
	0xf7, 0xcd, 0xd9, 0x44, 0x4d, 0xdf, 0x2a, 0xab, 0xb7, 0x8e, 0xae, 0xe5, 0x0d, 0x62, 0x6b, 0x90,
	0x7a, 0x2d, 0x49, 0x9a, 0x8e, 0xf5, 0xd5, 0x4b, 0x90, 0xe4, 0x58, 0x5f, 0x3d, 0xf4, 0xc0, 0x46,
	0x53, 0xcf, 0x34, 0x4e, 0x44, 0x72, 0x63, 0xb9, 0xaa, 0x90, 0x47, 0xc2, 0xcb, 0x5d, 0xc0, 0x9c,
	0x2f, 0x3c, 0xea, 0xa4, 0x5b, 0x08, 0x32, 0x76, 0x23, 0xbd, 0xee, 0xea, 0x14, 0x7b, 0x11, 0xaa,
	0xd6, 0x60, 0x10, 0xf2, 0x41, 0x72, 0xce, 0x5e, 0x31, 0x32, 0x00, 0x73, 0xe9, 0x63, 0x69, 0xe5,
	0x12, 0xea, 0x14, 0x7a, 0xb3, 0x92, 0xdb, 0x71, 0x28, 0xa2, 0xb1, 0xf2, 0xde, 0x79, 0xa8, 0x0f,
	0xcd, 0x5b, 0x09, 0xbe, 0xa9, 0x60, 0xfc, 0x80, 0xcb, 0xad, 0xd3, 0x20, 0xf4, 0xe9, 0x35, 0x29,
	0x7d, 0x20, 0x05, 0xd4, 0xe5, 0x85, 0x50, 0xd8, 0x91, 0x76, 0xfd, 0x74, 0x0a, 0xe3, 0x9c, 0x90,
	0x47, 0x71, 0xe8, 0x49, 0x53, 0x72, 0x75, 0x39, 0xb6, 0x62, 0x80, 0x86, 0x0e, 0x79, 0x84, 0x4d,
	0x77, 0xe6, 0xe3, 0x7c, 0x74, 0x55, 0x54, 0x5b, 0x35, 0xd2, 0x74, 0xf7, 0x37, 0x4a, 0xb0, 0x78,
	0xe1, 0x25, 0xf7, 0x4d, 0xfa, 0xe3, 0xbf, 0xb5, 0x4d, 0x72, 0x17, 0xaa, 0x74, 0x97, 0x89, 0xa4,
	0xb3, 0xfa, 0xf8, 0x86, 0xbb, 0x7d, 0x14, 0x9e, 0xcc, 0x93, 0xad, 0x7c, 0xf8, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd5, 0x94, 0x7d, 0xc4, 0xa3, 0x49, 0x00, 0x00,
}
