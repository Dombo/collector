// Code generated by protoc-gen-go.
// source: full_snapshot.proto
// DO NOT EDIT!

package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogLine_SourceType int32

const (
	LogLine_PostgresSource  LogLine_SourceType = 0
	LogLine_AmazonRdsSource LogLine_SourceType = 1
)

var LogLine_SourceType_name = map[int32]string{
	0: "PostgresSource",
	1: "AmazonRdsSource",
}
var LogLine_SourceType_value = map[string]int32{
	"PostgresSource":  0,
	"AmazonRdsSource": 1,
}

func (x LogLine_SourceType) String() string {
	return proto.EnumName(LogLine_SourceType_name, int32(x))
}
func (LogLine_SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5, 0} }

type SystemInformation_SystemType int32

const (
	SystemInformation_SELF_HOSTED_SYSTEM SystemInformation_SystemType = 0
	SystemInformation_AMAZON_RDS_SYSTEM  SystemInformation_SystemType = 1
	SystemInformation_HEROKU_SYSTEM      SystemInformation_SystemType = 2
)

var SystemInformation_SystemType_name = map[int32]string{
	0: "SELF_HOSTED_SYSTEM",
	1: "AMAZON_RDS_SYSTEM",
	2: "HEROKU_SYSTEM",
}
var SystemInformation_SystemType_value = map[string]int32{
	"SELF_HOSTED_SYSTEM": 0,
	"AMAZON_RDS_SYSTEM":  1,
	"HEROKU_SYSTEM":      2,
}

func (x SystemInformation_SystemType) String() string {
	return proto.EnumName(SystemInformation_SystemType_name, int32(x))
}
func (SystemInformation_SystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{11, 0}
}

type RelationEvent_EventType int32

const (
	RelationEvent_MANUAL_VACUUM  RelationEvent_EventType = 0
	RelationEvent_AUTO_VACUUM    RelationEvent_EventType = 1
	RelationEvent_MANUAL_ANALYZE RelationEvent_EventType = 2
	RelationEvent_AUTO_ANALYZE   RelationEvent_EventType = 3
)

var RelationEvent_EventType_name = map[int32]string{
	0: "MANUAL_VACUUM",
	1: "AUTO_VACUUM",
	2: "MANUAL_ANALYZE",
	3: "AUTO_ANALYZE",
}
var RelationEvent_EventType_value = map[string]int32{
	"MANUAL_VACUUM":  0,
	"AUTO_VACUUM":    1,
	"MANUAL_ANALYZE": 2,
	"AUTO_ANALYZE":   3,
}

func (x RelationEvent_EventType) String() string {
	return proto.EnumName(RelationEvent_EventType_name, int32(x))
}
func (RelationEvent_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{32, 0} }

type FullSnapshot struct {
	// Basic information about this snapshot
	SnapshotVersionMajor  int32                      `protobuf:"varint,1,opt,name=snapshot_version_major,json=snapshotVersionMajor" json:"snapshot_version_major,omitempty"`
	SnapshotVersionMinor  int32                      `protobuf:"varint,2,opt,name=snapshot_version_minor,json=snapshotVersionMinor" json:"snapshot_version_minor,omitempty"`
	CollectorVersion      string                     `protobuf:"bytes,3,opt,name=collector_version,json=collectorVersion" json:"collector_version,omitempty"`
	FailedRun             bool                       `protobuf:"varint,4,opt,name=failed_run,json=failedRun" json:"failed_run,omitempty"`
	SnapshotUuid          string                     `protobuf:"bytes,10,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,12,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	CollectorStatistic    *CollectorStatistic        `protobuf:"bytes,20,opt,name=collector_statistic,json=collectorStatistic" json:"collector_statistic,omitempty"`
	CollectorErrors       []string                   `protobuf:"bytes,21,rep,name=collector_errors,json=collectorErrors" json:"collector_errors,omitempty"`
	// Per server (and hence snapshot)
	System                 *System                  `protobuf:"bytes,100,opt,name=system" json:"system,omitempty"`
	PostgresVersion        *PostgresVersion         `protobuf:"bytes,101,opt,name=postgres_version,json=postgresVersion" json:"postgres_version,omitempty"`
	RoleReferences         []*RoleReference         `protobuf:"bytes,102,rep,name=role_references,json=roleReferences" json:"role_references,omitempty"`
	DatabaseReferences     []*DatabaseReference     `protobuf:"bytes,103,rep,name=database_references,json=databaseReferences" json:"database_references,omitempty"`
	RoleInformations       []*RoleInformation       `protobuf:"bytes,110,rep,name=role_informations,json=roleInformations" json:"role_informations,omitempty"`
	DatabaseInformations   []*DatabaseInformation   `protobuf:"bytes,111,rep,name=database_informations,json=databaseInformations" json:"database_informations,omitempty"`
	Logs                   []*LogLine               `protobuf:"bytes,120,rep,name=logs" json:"logs,omitempty"`
	Backends               []*Backend               `protobuf:"bytes,121,rep,name=backends" json:"backends,omitempty"`
	Settings               []*Setting               `protobuf:"bytes,122,rep,name=settings" json:"settings,omitempty"`
	TablespaceReferences   []*TablespaceReference   `protobuf:"bytes,130,rep,name=tablespace_references,json=tablespaceReferences" json:"tablespace_references,omitempty"`
	TablespaceInformations []*TablespaceInformation `protobuf:"bytes,131,rep,name=tablespace_informations,json=tablespaceInformations" json:"tablespace_informations,omitempty"`
	// Per database
	QueryReferences         []*QueryReference          `protobuf:"bytes,200,rep,name=query_references,json=queryReferences" json:"query_references,omitempty"`
	RelationReferences      []*RelationReference       `protobuf:"bytes,201,rep,name=relation_references,json=relationReferences" json:"relation_references,omitempty"`
	IndexReferences         []*IndexReference          `protobuf:"bytes,202,rep,name=index_references,json=indexReferences" json:"index_references,omitempty"`
	FunctionReferences      []*FunctionReference       `protobuf:"bytes,203,rep,name=function_references,json=functionReferences" json:"function_references,omitempty"`
	QueryInformations       []*QueryInformation        `protobuf:"bytes,210,rep,name=query_informations,json=queryInformations" json:"query_informations,omitempty"`
	QueryStatistics         []*QueryStatistic          `protobuf:"bytes,211,rep,name=query_statistics,json=queryStatistics" json:"query_statistics,omitempty"`
	QueryExplains           []*QueryExplain            `protobuf:"bytes,212,rep,name=query_explains,json=queryExplains" json:"query_explains,omitempty"`
	HistoricQueryStatistics []*HistoricQueryStatistics `protobuf:"bytes,213,rep,name=historic_query_statistics,json=historicQueryStatistics" json:"historic_query_statistics,omitempty"`
	RelationInformations    []*RelationInformation     `protobuf:"bytes,220,rep,name=relation_informations,json=relationInformations" json:"relation_informations,omitempty"`
	RelationStatistics      []*RelationStatistic       `protobuf:"bytes,221,rep,name=relation_statistics,json=relationStatistics" json:"relation_statistics,omitempty"`
	// reserved 222, used to be relation_bloat_statistics
	RelationEvents       []*RelationEvent       `protobuf:"bytes,223,rep,name=relation_events,json=relationEvents" json:"relation_events,omitempty"`
	IndexInformations    []*IndexInformation    `protobuf:"bytes,224,rep,name=index_informations,json=indexInformations" json:"index_informations,omitempty"`
	IndexStatistics      []*IndexStatistic      `protobuf:"bytes,225,rep,name=index_statistics,json=indexStatistics" json:"index_statistics,omitempty"`
	FunctionInformations []*FunctionInformation `protobuf:"bytes,227,rep,name=function_informations,json=functionInformations" json:"function_informations,omitempty"`
	FunctionStatistics   []*FunctionStatistic   `protobuf:"bytes,228,rep,name=function_statistics,json=functionStatistics" json:"function_statistics,omitempty"`
}

func (m *FullSnapshot) Reset()                    { *m = FullSnapshot{} }
func (m *FullSnapshot) String() string            { return proto.CompactTextString(m) }
func (*FullSnapshot) ProtoMessage()               {}
func (*FullSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *FullSnapshot) GetSnapshotVersionMajor() int32 {
	if m != nil {
		return m.SnapshotVersionMajor
	}
	return 0
}

func (m *FullSnapshot) GetSnapshotVersionMinor() int32 {
	if m != nil {
		return m.SnapshotVersionMinor
	}
	return 0
}

func (m *FullSnapshot) GetCollectorVersion() string {
	if m != nil {
		return m.CollectorVersion
	}
	return ""
}

func (m *FullSnapshot) GetFailedRun() bool {
	if m != nil {
		return m.FailedRun
	}
	return false
}

func (m *FullSnapshot) GetSnapshotUuid() string {
	if m != nil {
		return m.SnapshotUuid
	}
	return ""
}

func (m *FullSnapshot) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *FullSnapshot) GetCollectedIntervalSecs() uint32 {
	if m != nil {
		return m.CollectedIntervalSecs
	}
	return 0
}

func (m *FullSnapshot) GetCollectorStatistic() *CollectorStatistic {
	if m != nil {
		return m.CollectorStatistic
	}
	return nil
}

func (m *FullSnapshot) GetCollectorErrors() []string {
	if m != nil {
		return m.CollectorErrors
	}
	return nil
}

func (m *FullSnapshot) GetSystem() *System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *FullSnapshot) GetPostgresVersion() *PostgresVersion {
	if m != nil {
		return m.PostgresVersion
	}
	return nil
}

func (m *FullSnapshot) GetRoleReferences() []*RoleReference {
	if m != nil {
		return m.RoleReferences
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseReferences() []*DatabaseReference {
	if m != nil {
		return m.DatabaseReferences
	}
	return nil
}

func (m *FullSnapshot) GetRoleInformations() []*RoleInformation {
	if m != nil {
		return m.RoleInformations
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseInformations() []*DatabaseInformation {
	if m != nil {
		return m.DatabaseInformations
	}
	return nil
}

func (m *FullSnapshot) GetLogs() []*LogLine {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *FullSnapshot) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *FullSnapshot) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceReferences() []*TablespaceReference {
	if m != nil {
		return m.TablespaceReferences
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceInformations() []*TablespaceInformation {
	if m != nil {
		return m.TablespaceInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryReferences() []*QueryReference {
	if m != nil {
		return m.QueryReferences
	}
	return nil
}

func (m *FullSnapshot) GetRelationReferences() []*RelationReference {
	if m != nil {
		return m.RelationReferences
	}
	return nil
}

func (m *FullSnapshot) GetIndexReferences() []*IndexReference {
	if m != nil {
		return m.IndexReferences
	}
	return nil
}

func (m *FullSnapshot) GetFunctionReferences() []*FunctionReference {
	if m != nil {
		return m.FunctionReferences
	}
	return nil
}

func (m *FullSnapshot) GetQueryInformations() []*QueryInformation {
	if m != nil {
		return m.QueryInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryStatistics() []*QueryStatistic {
	if m != nil {
		return m.QueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetQueryExplains() []*QueryExplain {
	if m != nil {
		return m.QueryExplains
	}
	return nil
}

func (m *FullSnapshot) GetHistoricQueryStatistics() []*HistoricQueryStatistics {
	if m != nil {
		return m.HistoricQueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationInformations() []*RelationInformation {
	if m != nil {
		return m.RelationInformations
	}
	return nil
}

func (m *FullSnapshot) GetRelationStatistics() []*RelationStatistic {
	if m != nil {
		return m.RelationStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationEvents() []*RelationEvent {
	if m != nil {
		return m.RelationEvents
	}
	return nil
}

func (m *FullSnapshot) GetIndexInformations() []*IndexInformation {
	if m != nil {
		return m.IndexInformations
	}
	return nil
}

func (m *FullSnapshot) GetIndexStatistics() []*IndexStatistic {
	if m != nil {
		return m.IndexStatistics
	}
	return nil
}

func (m *FullSnapshot) GetFunctionInformations() []*FunctionInformation {
	if m != nil {
		return m.FunctionInformations
	}
	return nil
}

func (m *FullSnapshot) GetFunctionStatistics() []*FunctionStatistic {
	if m != nil {
		return m.FunctionStatistics
	}
	return nil
}

type CollectorStatistic struct {
	GoVersion string `protobuf:"bytes,10,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	// Statistics from after the collection input step
	MemoryHeapAllocatedBytes uint64 `protobuf:"varint,13,opt,name=memory_heap_allocated_bytes,json=memoryHeapAllocatedBytes" json:"memory_heap_allocated_bytes,omitempty"`
	MemoryHeapObjects        uint64 `protobuf:"varint,14,opt,name=memory_heap_objects,json=memoryHeapObjects" json:"memory_heap_objects,omitempty"`
	MemorySystemBytes        uint64 `protobuf:"varint,15,opt,name=memory_system_bytes,json=memorySystemBytes" json:"memory_system_bytes,omitempty"`
	MemoryRssBytes           uint64 `protobuf:"varint,16,opt,name=memory_rss_bytes,json=memoryRssBytes" json:"memory_rss_bytes,omitempty"`
	ActiveGoroutines         int32  `protobuf:"varint,20,opt,name=active_goroutines,json=activeGoroutines" json:"active_goroutines,omitempty"`
	// Diff-ed statistics between two runs
	CgoCalls int64 `protobuf:"varint,30,opt,name=cgo_calls,json=cgoCalls" json:"cgo_calls,omitempty"`
}

func (m *CollectorStatistic) Reset()                    { *m = CollectorStatistic{} }
func (m *CollectorStatistic) String() string            { return proto.CompactTextString(m) }
func (*CollectorStatistic) ProtoMessage()               {}
func (*CollectorStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CollectorStatistic) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *CollectorStatistic) GetMemoryHeapAllocatedBytes() uint64 {
	if m != nil {
		return m.MemoryHeapAllocatedBytes
	}
	return 0
}

func (m *CollectorStatistic) GetMemoryHeapObjects() uint64 {
	if m != nil {
		return m.MemoryHeapObjects
	}
	return 0
}

func (m *CollectorStatistic) GetMemorySystemBytes() uint64 {
	if m != nil {
		return m.MemorySystemBytes
	}
	return 0
}

func (m *CollectorStatistic) GetMemoryRssBytes() uint64 {
	if m != nil {
		return m.MemoryRssBytes
	}
	return 0
}

func (m *CollectorStatistic) GetActiveGoroutines() int32 {
	if m != nil {
		return m.ActiveGoroutines
	}
	return 0
}

func (m *CollectorStatistic) GetCgoCalls() int64 {
	if m != nil {
		return m.CgoCalls
	}
	return 0
}

type RoleInformation struct {
	RoleIdx            int32          `protobuf:"varint,1,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Inherit            bool           `protobuf:"varint,2,opt,name=inherit" json:"inherit,omitempty"`
	Login              bool           `protobuf:"varint,3,opt,name=login" json:"login,omitempty"`
	CreateDb           bool           `protobuf:"varint,4,opt,name=create_db,json=createDb" json:"create_db,omitempty"`
	CreateRole         bool           `protobuf:"varint,5,opt,name=create_role,json=createRole" json:"create_role,omitempty"`
	SuperUser          bool           `protobuf:"varint,6,opt,name=super_user,json=superUser" json:"super_user,omitempty"`
	Replication        bool           `protobuf:"varint,7,opt,name=replication" json:"replication,omitempty"`
	BypassRls          bool           `protobuf:"varint,8,opt,name=bypass_rls,json=bypassRls" json:"bypass_rls,omitempty"`
	ConnectionLimit    int32          `protobuf:"varint,9,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	PasswordValidUntil *NullTimestamp `protobuf:"bytes,10,opt,name=password_valid_until,json=passwordValidUntil" json:"password_valid_until,omitempty"`
	Config             []string       `protobuf:"bytes,11,rep,name=config" json:"config,omitempty"`
	MemberOf           []int32        `protobuf:"varint,12,rep,packed,name=member_of,json=memberOf" json:"member_of,omitempty"`
}

func (m *RoleInformation) Reset()                    { *m = RoleInformation{} }
func (m *RoleInformation) String() string            { return proto.CompactTextString(m) }
func (*RoleInformation) ProtoMessage()               {}
func (*RoleInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RoleInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *RoleInformation) GetInherit() bool {
	if m != nil {
		return m.Inherit
	}
	return false
}

func (m *RoleInformation) GetLogin() bool {
	if m != nil {
		return m.Login
	}
	return false
}

func (m *RoleInformation) GetCreateDb() bool {
	if m != nil {
		return m.CreateDb
	}
	return false
}

func (m *RoleInformation) GetCreateRole() bool {
	if m != nil {
		return m.CreateRole
	}
	return false
}

func (m *RoleInformation) GetSuperUser() bool {
	if m != nil {
		return m.SuperUser
	}
	return false
}

func (m *RoleInformation) GetReplication() bool {
	if m != nil {
		return m.Replication
	}
	return false
}

func (m *RoleInformation) GetBypassRls() bool {
	if m != nil {
		return m.BypassRls
	}
	return false
}

func (m *RoleInformation) GetConnectionLimit() int32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *RoleInformation) GetPasswordValidUntil() *NullTimestamp {
	if m != nil {
		return m.PasswordValidUntil
	}
	return nil
}

func (m *RoleInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RoleInformation) GetMemberOf() []int32 {
	if m != nil {
		return m.MemberOf
	}
	return nil
}

type DatabaseInformation struct {
	DatabaseIdx      int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	OwnerRoleIdx     int32  `protobuf:"varint,2,opt,name=owner_role_idx,json=ownerRoleIdx" json:"owner_role_idx,omitempty"`
	Encoding         string `protobuf:"bytes,3,opt,name=encoding" json:"encoding,omitempty"`
	Collate          string `protobuf:"bytes,4,opt,name=collate" json:"collate,omitempty"`
	CType            string `protobuf:"bytes,5,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	IsTemplate       bool   `protobuf:"varint,6,opt,name=is_template,json=isTemplate" json:"is_template,omitempty"`
	AllowConnections bool   `protobuf:"varint,7,opt,name=allow_connections,json=allowConnections" json:"allow_connections,omitempty"`
	ConnectionLimit  int32  `protobuf:"varint,8,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	// All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent transaction ID wraparound or to
	// allow pg_clog to be shrunk. It is the minimum of the per-table pg_class.relfrozenxid values.
	FrozenXid uint32 `protobuf:"varint,9,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	// All multixact IDs before this one have been replaced with a transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent multixact ID wraparound or to
	// allow pg_multixact to be shrunk. It is the minimum of the per-table pg_class.relminmxid values.
	MinimumMultixactXid uint32 `protobuf:"varint,10,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
	// Whether the collector was able to connect to this database and fetch local catalog data (e.g. schema)
	CollectedLocalCatalogData bool `protobuf:"varint,11,opt,name=collected_local_catalog_data,json=collectedLocalCatalogData" json:"collected_local_catalog_data,omitempty"`
}

func (m *DatabaseInformation) Reset()                    { *m = DatabaseInformation{} }
func (m *DatabaseInformation) String() string            { return proto.CompactTextString(m) }
func (*DatabaseInformation) ProtoMessage()               {}
func (*DatabaseInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *DatabaseInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *DatabaseInformation) GetOwnerRoleIdx() int32 {
	if m != nil {
		return m.OwnerRoleIdx
	}
	return 0
}

func (m *DatabaseInformation) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *DatabaseInformation) GetCollate() string {
	if m != nil {
		return m.Collate
	}
	return ""
}

func (m *DatabaseInformation) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *DatabaseInformation) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

func (m *DatabaseInformation) GetAllowConnections() bool {
	if m != nil {
		return m.AllowConnections
	}
	return false
}

func (m *DatabaseInformation) GetConnectionLimit() int32 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *DatabaseInformation) GetFrozenXid() uint32 {
	if m != nil {
		return m.FrozenXid
	}
	return 0
}

func (m *DatabaseInformation) GetMinimumMultixactXid() uint32 {
	if m != nil {
		return m.MinimumMultixactXid
	}
	return 0
}

func (m *DatabaseInformation) GetCollectedLocalCatalogData() bool {
	if m != nil {
		return m.CollectedLocalCatalogData
	}
	return false
}

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *PostgresVersion) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func (m *PostgresVersion) GetShort() string {
	if m != nil {
		return m.Short
	}
	return ""
}

func (m *PostgresVersion) GetNumeric() int64 {
	if m != nil {
		return m.Numeric
	}
	return 0
}

type LogLine struct {
	OccurredAt      int64              `protobuf:"varint,1,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Source          LogLine_SourceType `protobuf:"varint,2,opt,name=source,enum=pganalyze.collector.LogLine_SourceType" json:"source,omitempty"`
	ClientIp        *NullString        `protobuf:"bytes,3,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	LogLevel        string             `protobuf:"bytes,4,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	BackendPid      int32              `protobuf:"varint,5,opt,name=backend_pid,json=backendPid" json:"backend_pid,omitempty"`
	Content         string             `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	AdditionalLines []*LogLine         `protobuf:"bytes,7,rep,name=additional_lines,json=additionalLines" json:"additional_lines,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *LogLine) GetOccurredAt() int64 {
	if m != nil {
		return m.OccurredAt
	}
	return 0
}

func (m *LogLine) GetSource() LogLine_SourceType {
	if m != nil {
		return m.Source
	}
	return LogLine_PostgresSource
}

func (m *LogLine) GetClientIp() *NullString {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *LogLine) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *LogLine) GetBackendPid() int32 {
	if m != nil {
		return m.BackendPid
	}
	return 0
}

func (m *LogLine) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *LogLine) GetAdditionalLines() []*LogLine {
	if m != nil {
		return m.AdditionalLines
	}
	return nil
}

type Setting struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Setting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Setting) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func (m *Setting) GetUnit() *NullString {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Setting) GetBootValue() *NullString {
	if m != nil {
		return m.BootValue
	}
	return nil
}

func (m *Setting) GetResetValue() *NullString {
	if m != nil {
		return m.ResetValue
	}
	return nil
}

func (m *Setting) GetSource() *NullString {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Setting) GetSourceFile() *NullString {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Setting) GetSourceLine() *NullString {
	if m != nil {
		return m.SourceLine
	}
	return nil
}

type Backend struct {
	DatabaseIdx     int32                      `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	RoleIdx         int32                      `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	QueryIdx        int32                      `protobuf:"varint,3,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Pid             int64                      `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	ApplicationName string                     `protobuf:"bytes,5,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientAddr      string                     `protobuf:"bytes,6,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	XactStart       *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=xact_start,json=xactStart" json:"xact_start,omitempty"`
	QueryStart      *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=query_start,json=queryStart" json:"query_start,omitempty"`
	StateChange     *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=state_change,json=stateChange" json:"state_change,omitempty"`
	Waiting         bool                       `protobuf:"varint,11,opt,name=waiting" json:"waiting,omitempty"`
	State           string                     `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Backend) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *Backend) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *Backend) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *Backend) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Backend) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *Backend) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *Backend) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *Backend) GetXactStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.XactStart
	}
	return nil
}

func (m *Backend) GetQueryStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.QueryStart
	}
	return nil
}

func (m *Backend) GetStateChange() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateChange
	}
	return nil
}

func (m *Backend) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

func (m *Backend) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type TablespaceReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TablespaceReference) Reset()                    { *m = TablespaceReference{} }
func (m *TablespaceReference) String() string            { return proto.CompactTextString(m) }
func (*TablespaceReference) ProtoMessage()               {}
func (*TablespaceReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *TablespaceReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TablespaceInformation struct {
	TablespaceIdx    int32    `protobuf:"varint,1,opt,name=tablespace_idx,json=tablespaceIdx" json:"tablespace_idx,omitempty"`
	DiskPartitionIdx int32    `protobuf:"varint,2,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	RoleIdx          int32    `protobuf:"varint,3,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Config           []string `protobuf:"bytes,4,rep,name=config" json:"config,omitempty"`
}

func (m *TablespaceInformation) Reset()                    { *m = TablespaceInformation{} }
func (m *TablespaceInformation) String() string            { return proto.CompactTextString(m) }
func (*TablespaceInformation) ProtoMessage()               {}
func (*TablespaceInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *TablespaceInformation) GetTablespaceIdx() int32 {
	if m != nil {
		return m.TablespaceIdx
	}
	return 0
}

func (m *TablespaceInformation) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *TablespaceInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *TablespaceInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

type System struct {
	SystemInformation             *SystemInformation          `protobuf:"bytes,1,opt,name=system_information,json=systemInformation" json:"system_information,omitempty"`
	SystemId                      string                      `protobuf:"bytes,2,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	SystemScope                   string                      `protobuf:"bytes,3,opt,name=system_scope,json=systemScope" json:"system_scope,omitempty"`
	SchedulerStatistic            *SchedulerStatistic         `protobuf:"bytes,10,opt,name=scheduler_statistic,json=schedulerStatistic" json:"scheduler_statistic,omitempty"`
	MemoryStatistic               *MemoryStatistic            `protobuf:"bytes,11,opt,name=memory_statistic,json=memoryStatistic" json:"memory_statistic,omitempty"`
	CpuInformation                *CPUInformation             `protobuf:"bytes,12,opt,name=cpu_information,json=cpuInformation" json:"cpu_information,omitempty"`
	CpuReferences                 []*CPUReference             `protobuf:"bytes,13,rep,name=cpu_references,json=cpuReferences" json:"cpu_references,omitempty"`
	CpuStatistics                 []*CPUStatistic             `protobuf:"bytes,14,rep,name=cpu_statistics,json=cpuStatistics" json:"cpu_statistics,omitempty"`
	NetworkReferences             []*NetworkReference         `protobuf:"bytes,15,rep,name=network_references,json=networkReferences" json:"network_references,omitempty"`
	NetworkStatistics             []*NetworkStatistic         `protobuf:"bytes,16,rep,name=network_statistics,json=networkStatistics" json:"network_statistics,omitempty"`
	DiskReferences                []*DiskReference            `protobuf:"bytes,17,rep,name=disk_references,json=diskReferences" json:"disk_references,omitempty"`
	DiskInformations              []*DiskInformation          `protobuf:"bytes,18,rep,name=disk_informations,json=diskInformations" json:"disk_informations,omitempty"`
	DiskStatistics                []*DiskStatistic            `protobuf:"bytes,19,rep,name=disk_statistics,json=diskStatistics" json:"disk_statistics,omitempty"`
	DiskPartitionReferences       []*DiskPartitionReference   `protobuf:"bytes,20,rep,name=disk_partition_references,json=diskPartitionReferences" json:"disk_partition_references,omitempty"`
	DiskPartitionInformations     []*DiskPartitionInformation `protobuf:"bytes,21,rep,name=disk_partition_informations,json=diskPartitionInformations" json:"disk_partition_informations,omitempty"`
	DiskPartitionStatistics       []*DiskPartitionStatistic   `protobuf:"bytes,22,rep,name=disk_partition_statistics,json=diskPartitionStatistics" json:"disk_partition_statistics,omitempty"`
	DataDirectoryDiskPartitionIdx int32                       `protobuf:"varint,30,opt,name=data_directory_disk_partition_idx,json=dataDirectoryDiskPartitionIdx" json:"data_directory_disk_partition_idx,omitempty"`
	XlogDiskPartitionIdx          int32                       `protobuf:"varint,31,opt,name=xlog_disk_partition_idx,json=xlogDiskPartitionIdx" json:"xlog_disk_partition_idx,omitempty"`
	XlogUsedBytes                 uint64                      `protobuf:"varint,32,opt,name=xlog_used_bytes,json=xlogUsedBytes" json:"xlog_used_bytes,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *System) GetSystemInformation() *SystemInformation {
	if m != nil {
		return m.SystemInformation
	}
	return nil
}

func (m *System) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *System) GetSystemScope() string {
	if m != nil {
		return m.SystemScope
	}
	return ""
}

func (m *System) GetSchedulerStatistic() *SchedulerStatistic {
	if m != nil {
		return m.SchedulerStatistic
	}
	return nil
}

func (m *System) GetMemoryStatistic() *MemoryStatistic {
	if m != nil {
		return m.MemoryStatistic
	}
	return nil
}

func (m *System) GetCpuInformation() *CPUInformation {
	if m != nil {
		return m.CpuInformation
	}
	return nil
}

func (m *System) GetCpuReferences() []*CPUReference {
	if m != nil {
		return m.CpuReferences
	}
	return nil
}

func (m *System) GetCpuStatistics() []*CPUStatistic {
	if m != nil {
		return m.CpuStatistics
	}
	return nil
}

func (m *System) GetNetworkReferences() []*NetworkReference {
	if m != nil {
		return m.NetworkReferences
	}
	return nil
}

func (m *System) GetNetworkStatistics() []*NetworkStatistic {
	if m != nil {
		return m.NetworkStatistics
	}
	return nil
}

func (m *System) GetDiskReferences() []*DiskReference {
	if m != nil {
		return m.DiskReferences
	}
	return nil
}

func (m *System) GetDiskInformations() []*DiskInformation {
	if m != nil {
		return m.DiskInformations
	}
	return nil
}

func (m *System) GetDiskStatistics() []*DiskStatistic {
	if m != nil {
		return m.DiskStatistics
	}
	return nil
}

func (m *System) GetDiskPartitionReferences() []*DiskPartitionReference {
	if m != nil {
		return m.DiskPartitionReferences
	}
	return nil
}

func (m *System) GetDiskPartitionInformations() []*DiskPartitionInformation {
	if m != nil {
		return m.DiskPartitionInformations
	}
	return nil
}

func (m *System) GetDiskPartitionStatistics() []*DiskPartitionStatistic {
	if m != nil {
		return m.DiskPartitionStatistics
	}
	return nil
}

func (m *System) GetDataDirectoryDiskPartitionIdx() int32 {
	if m != nil {
		return m.DataDirectoryDiskPartitionIdx
	}
	return 0
}

func (m *System) GetXlogDiskPartitionIdx() int32 {
	if m != nil {
		return m.XlogDiskPartitionIdx
	}
	return 0
}

func (m *System) GetXlogUsedBytes() uint64 {
	if m != nil {
		return m.XlogUsedBytes
	}
	return 0
}

type SystemInformation struct {
	Type SystemInformation_SystemType `protobuf:"varint,1,opt,name=type,enum=pganalyze.collector.SystemInformation_SystemType" json:"type,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*SystemInformation_SelfHosted
	//	*SystemInformation_AmazonRds
	Info     isSystemInformation_Info   `protobuf_oneof:"info"`
	BootTime *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
}

func (m *SystemInformation) Reset()                    { *m = SystemInformation{} }
func (m *SystemInformation) String() string            { return proto.CompactTextString(m) }
func (*SystemInformation) ProtoMessage()               {}
func (*SystemInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

type isSystemInformation_Info interface {
	isSystemInformation_Info()
}

type SystemInformation_SelfHosted struct {
	SelfHosted *SystemInformationSelfHosted `protobuf:"bytes,2,opt,name=self_hosted,json=selfHosted,oneof"`
}
type SystemInformation_AmazonRds struct {
	AmazonRds *SystemInformationAmazonRDS `protobuf:"bytes,3,opt,name=amazon_rds,json=amazonRds,oneof"`
}

func (*SystemInformation_SelfHosted) isSystemInformation_Info() {}
func (*SystemInformation_AmazonRds) isSystemInformation_Info()  {}

func (m *SystemInformation) GetInfo() isSystemInformation_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SystemInformation) GetType() SystemInformation_SystemType {
	if m != nil {
		return m.Type
	}
	return SystemInformation_SELF_HOSTED_SYSTEM
}

func (m *SystemInformation) GetSelfHosted() *SystemInformationSelfHosted {
	if x, ok := m.GetInfo().(*SystemInformation_SelfHosted); ok {
		return x.SelfHosted
	}
	return nil
}

func (m *SystemInformation) GetAmazonRds() *SystemInformationAmazonRDS {
	if x, ok := m.GetInfo().(*SystemInformation_AmazonRds); ok {
		return x.AmazonRds
	}
	return nil
}

func (m *SystemInformation) GetBootTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SystemInformation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SystemInformation_OneofMarshaler, _SystemInformation_OneofUnmarshaler, _SystemInformation_OneofSizer, []interface{}{
		(*SystemInformation_SelfHosted)(nil),
		(*SystemInformation_AmazonRds)(nil),
	}
}

func _SystemInformation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelfHosted); err != nil {
			return err
		}
	case *SystemInformation_AmazonRds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmazonRds); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SystemInformation.Info has unexpected type %T", x)
	}
	return nil
}

func _SystemInformation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SystemInformation)
	switch tag {
	case 2: // info.self_hosted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationSelfHosted)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_SelfHosted{msg}
		return true, err
	case 3: // info.amazon_rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationAmazonRDS)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_AmazonRds{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SystemInformation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		s := proto.Size(x.SelfHosted)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SystemInformation_AmazonRds:
		s := proto.Size(x.AmazonRds)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SystemInformationSelfHosted struct {
	Hostname                 string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Architecture             string `protobuf:"bytes,2,opt,name=architecture" json:"architecture,omitempty"`
	OperatingSystem          string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Platform                 string `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	PlatformFamily           string `protobuf:"bytes,5,opt,name=platform_family,json=platformFamily" json:"platform_family,omitempty"`
	PlatformVersion          string `protobuf:"bytes,6,opt,name=platform_version,json=platformVersion" json:"platform_version,omitempty"`
	VirtualizationSystem     string `protobuf:"bytes,7,opt,name=virtualization_system,json=virtualizationSystem" json:"virtualization_system,omitempty"`
	KernelVersion            string `protobuf:"bytes,8,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	DatabaseSystemIdentifier string `protobuf:"bytes,9,opt,name=database_system_identifier,json=databaseSystemIdentifier" json:"database_system_identifier,omitempty"`
}

func (m *SystemInformationSelfHosted) Reset()                    { *m = SystemInformationSelfHosted{} }
func (m *SystemInformationSelfHosted) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationSelfHosted) ProtoMessage()               {}
func (*SystemInformationSelfHosted) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *SystemInformationSelfHosted) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetVirtualizationSystem() string {
	if m != nil {
		return m.VirtualizationSystem
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *SystemInformationSelfHosted) GetDatabaseSystemIdentifier() string {
	if m != nil {
		return m.DatabaseSystemIdentifier
	}
	return ""
}

type SystemInformationAmazonRDS struct {
	Region                     string                     `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	InstanceClass              string                     `protobuf:"bytes,2,opt,name=instance_class,json=instanceClass" json:"instance_class,omitempty"`
	InstanceId                 string                     `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status                     string                     `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	AvailabilityZone           string                     `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone" json:"availability_zone,omitempty"`
	PubliclyAccessible         bool                       `protobuf:"varint,6,opt,name=publicly_accessible,json=publiclyAccessible" json:"publicly_accessible,omitempty"`
	MultiAz                    bool                       `protobuf:"varint,7,opt,name=multi_az,json=multiAz" json:"multi_az,omitempty"`
	SecondaryAvailabilityZone  string                     `protobuf:"bytes,8,opt,name=secondary_availability_zone,json=secondaryAvailabilityZone" json:"secondary_availability_zone,omitempty"`
	CaCertificate              string                     `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate" json:"ca_certificate,omitempty"`
	AutoMinorVersionUpgrade    bool                       `protobuf:"varint,10,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade" json:"auto_minor_version_upgrade,omitempty"`
	AutoMajorVersionUpgrade    bool                       `protobuf:"varint,11,opt,name=auto_major_version_upgrade,json=autoMajorVersionUpgrade" json:"auto_major_version_upgrade,omitempty"`
	PreferredMaintenanceWindow string                     `protobuf:"bytes,12,opt,name=preferred_maintenance_window,json=preferredMaintenanceWindow" json:"preferred_maintenance_window,omitempty"`
	PreferredBackupWindow      string                     `protobuf:"bytes,14,opt,name=preferred_backup_window,json=preferredBackupWindow" json:"preferred_backup_window,omitempty"`
	LatestRestorableTime       *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=latest_restorable_time,json=latestRestorableTime" json:"latest_restorable_time,omitempty"`
	BackupRetentionPeriodDays  int32                      `protobuf:"varint,15,opt,name=backup_retention_period_days,json=backupRetentionPeriodDays" json:"backup_retention_period_days,omitempty"`
	MasterUsername             string                     `protobuf:"bytes,16,opt,name=master_username,json=masterUsername" json:"master_username,omitempty"`
	InitialDbName              string                     `protobuf:"bytes,17,opt,name=initial_db_name,json=initialDbName" json:"initial_db_name,omitempty"`
	CreatedAt                  *google_protobuf.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	EnhancedMonitoring         bool                       `protobuf:"varint,19,opt,name=enhanced_monitoring,json=enhancedMonitoring" json:"enhanced_monitoring,omitempty"`
	ParameterApplyStatus       string                     `protobuf:"bytes,40,opt,name=parameter_apply_status,json=parameterApplyStatus" json:"parameter_apply_status,omitempty"`
	ParameterPgssEnabled       bool                       `protobuf:"varint,41,opt,name=parameter_pgss_enabled,json=parameterPgssEnabled" json:"parameter_pgss_enabled,omitempty"`
}

func (m *SystemInformationAmazonRDS) Reset()                    { *m = SystemInformationAmazonRDS{} }
func (m *SystemInformationAmazonRDS) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationAmazonRDS) ProtoMessage()               {}
func (*SystemInformationAmazonRDS) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *SystemInformationAmazonRDS) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInstanceClass() string {
	if m != nil {
		return m.InstanceClass
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetPubliclyAccessible() bool {
	if m != nil {
		return m.PubliclyAccessible
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetMultiAz() bool {
	if m != nil {
		return m.MultiAz
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetSecondaryAvailabilityZone() string {
	if m != nil {
		return m.SecondaryAvailabilityZone
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetAutoMinorVersionUpgrade() bool {
	if m != nil {
		return m.AutoMinorVersionUpgrade
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetAutoMajorVersionUpgrade() bool {
	if m != nil {
		return m.AutoMajorVersionUpgrade
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetPreferredMaintenanceWindow() string {
	if m != nil {
		return m.PreferredMaintenanceWindow
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetPreferredBackupWindow() string {
	if m != nil {
		return m.PreferredBackupWindow
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetLatestRestorableTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LatestRestorableTime
	}
	return nil
}

func (m *SystemInformationAmazonRDS) GetBackupRetentionPeriodDays() int32 {
	if m != nil {
		return m.BackupRetentionPeriodDays
	}
	return 0
}

func (m *SystemInformationAmazonRDS) GetMasterUsername() string {
	if m != nil {
		return m.MasterUsername
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetInitialDbName() string {
	if m != nil {
		return m.InitialDbName
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SystemInformationAmazonRDS) GetEnhancedMonitoring() bool {
	if m != nil {
		return m.EnhancedMonitoring
	}
	return false
}

func (m *SystemInformationAmazonRDS) GetParameterApplyStatus() string {
	if m != nil {
		return m.ParameterApplyStatus
	}
	return ""
}

func (m *SystemInformationAmazonRDS) GetParameterPgssEnabled() bool {
	if m != nil {
		return m.ParameterPgssEnabled
	}
	return false
}

type SchedulerStatistic struct {
	LoadAverage_1Min  float64 `protobuf:"fixed64,1,opt,name=load_average_1min,json=loadAverage1min" json:"load_average_1min,omitempty"`
	LoadAverage_5Min  float64 `protobuf:"fixed64,2,opt,name=load_average_5min,json=loadAverage5min" json:"load_average_5min,omitempty"`
	LoadAverage_15Min float64 `protobuf:"fixed64,3,opt,name=load_average_15min,json=loadAverage15min" json:"load_average_15min,omitempty"`
}

func (m *SchedulerStatistic) Reset()                    { *m = SchedulerStatistic{} }
func (m *SchedulerStatistic) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStatistic) ProtoMessage()               {}
func (*SchedulerStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *SchedulerStatistic) GetLoadAverage_1Min() float64 {
	if m != nil {
		return m.LoadAverage_1Min
	}
	return 0
}

func (m *SchedulerStatistic) GetLoadAverage_5Min() float64 {
	if m != nil {
		return m.LoadAverage_5Min
	}
	return 0
}

func (m *SchedulerStatistic) GetLoadAverage_15Min() float64 {
	if m != nil {
		return m.LoadAverage_15Min
	}
	return 0
}

type MemoryStatistic struct {
	TotalBytes         uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	CachedBytes        uint64 `protobuf:"varint,2,opt,name=cached_bytes,json=cachedBytes" json:"cached_bytes,omitempty"`
	BuffersBytes       uint64 `protobuf:"varint,3,opt,name=buffers_bytes,json=buffersBytes" json:"buffers_bytes,omitempty"`
	FreeBytes          uint64 `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes" json:"free_bytes,omitempty"`
	WritebackBytes     uint64 `protobuf:"varint,5,opt,name=writeback_bytes,json=writebackBytes" json:"writeback_bytes,omitempty"`
	DirtyBytes         uint64 `protobuf:"varint,6,opt,name=dirty_bytes,json=dirtyBytes" json:"dirty_bytes,omitempty"`
	SlabBytes          uint64 `protobuf:"varint,7,opt,name=slab_bytes,json=slabBytes" json:"slab_bytes,omitempty"`
	MappedBytes        uint64 `protobuf:"varint,8,opt,name=mapped_bytes,json=mappedBytes" json:"mapped_bytes,omitempty"`
	PageTablesBytes    uint64 `protobuf:"varint,9,opt,name=page_tables_bytes,json=pageTablesBytes" json:"page_tables_bytes,omitempty"`
	ActiveBytes        uint64 `protobuf:"varint,10,opt,name=active_bytes,json=activeBytes" json:"active_bytes,omitempty"`
	InactiveBytes      uint64 `protobuf:"varint,11,opt,name=inactive_bytes,json=inactiveBytes" json:"inactive_bytes,omitempty"`
	AvailableBytes     uint64 `protobuf:"varint,12,opt,name=available_bytes,json=availableBytes" json:"available_bytes,omitempty"`
	SwapUsedBytes      uint64 `protobuf:"varint,13,opt,name=swap_used_bytes,json=swapUsedBytes" json:"swap_used_bytes,omitempty"`
	SwapTotalBytes     uint64 `protobuf:"varint,14,opt,name=swap_total_bytes,json=swapTotalBytes" json:"swap_total_bytes,omitempty"`
	HugePagesSizeBytes uint64 `protobuf:"varint,20,opt,name=huge_pages_size_bytes,json=hugePagesSizeBytes" json:"huge_pages_size_bytes,omitempty"`
	HugePagesFree      uint64 `protobuf:"varint,21,opt,name=huge_pages_free,json=hugePagesFree" json:"huge_pages_free,omitempty"`
	HugePagesTotal     uint64 `protobuf:"varint,22,opt,name=huge_pages_total,json=hugePagesTotal" json:"huge_pages_total,omitempty"`
	HugePagesReserved  uint64 `protobuf:"varint,23,opt,name=huge_pages_reserved,json=hugePagesReserved" json:"huge_pages_reserved,omitempty"`
	HugePagesSurplus   uint64 `protobuf:"varint,24,opt,name=huge_pages_surplus,json=hugePagesSurplus" json:"huge_pages_surplus,omitempty"`
	ApplicationBytes   uint64 `protobuf:"varint,30,opt,name=application_bytes,json=applicationBytes" json:"application_bytes,omitempty"`
}

func (m *MemoryStatistic) Reset()                    { *m = MemoryStatistic{} }
func (m *MemoryStatistic) String() string            { return proto.CompactTextString(m) }
func (*MemoryStatistic) ProtoMessage()               {}
func (*MemoryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *MemoryStatistic) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *MemoryStatistic) GetCachedBytes() uint64 {
	if m != nil {
		return m.CachedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetBuffersBytes() uint64 {
	if m != nil {
		return m.BuffersBytes
	}
	return 0
}

func (m *MemoryStatistic) GetFreeBytes() uint64 {
	if m != nil {
		return m.FreeBytes
	}
	return 0
}

func (m *MemoryStatistic) GetWritebackBytes() uint64 {
	if m != nil {
		return m.WritebackBytes
	}
	return 0
}

func (m *MemoryStatistic) GetDirtyBytes() uint64 {
	if m != nil {
		return m.DirtyBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSlabBytes() uint64 {
	if m != nil {
		return m.SlabBytes
	}
	return 0
}

func (m *MemoryStatistic) GetMappedBytes() uint64 {
	if m != nil {
		return m.MappedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetPageTablesBytes() uint64 {
	if m != nil {
		return m.PageTablesBytes
	}
	return 0
}

func (m *MemoryStatistic) GetActiveBytes() uint64 {
	if m != nil {
		return m.ActiveBytes
	}
	return 0
}

func (m *MemoryStatistic) GetInactiveBytes() uint64 {
	if m != nil {
		return m.InactiveBytes
	}
	return 0
}

func (m *MemoryStatistic) GetAvailableBytes() uint64 {
	if m != nil {
		return m.AvailableBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSwapUsedBytes() uint64 {
	if m != nil {
		return m.SwapUsedBytes
	}
	return 0
}

func (m *MemoryStatistic) GetSwapTotalBytes() uint64 {
	if m != nil {
		return m.SwapTotalBytes
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesSizeBytes() uint64 {
	if m != nil {
		return m.HugePagesSizeBytes
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesFree() uint64 {
	if m != nil {
		return m.HugePagesFree
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesTotal() uint64 {
	if m != nil {
		return m.HugePagesTotal
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesReserved() uint64 {
	if m != nil {
		return m.HugePagesReserved
	}
	return 0
}

func (m *MemoryStatistic) GetHugePagesSurplus() uint64 {
	if m != nil {
		return m.HugePagesSurplus
	}
	return 0
}

func (m *MemoryStatistic) GetApplicationBytes() uint64 {
	if m != nil {
		return m.ApplicationBytes
	}
	return 0
}

type CPUInformation struct {
	Model             string  `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	CacheSizeBytes    int32   `protobuf:"varint,2,opt,name=cache_size_bytes,json=cacheSizeBytes" json:"cache_size_bytes,omitempty"`
	SpeedMhz          float64 `protobuf:"fixed64,3,opt,name=speed_mhz,json=speedMhz" json:"speed_mhz,omitempty"`
	SocketCount       int32   `protobuf:"varint,4,opt,name=socket_count,json=socketCount" json:"socket_count,omitempty"`
	PhysicalCoreCount int32   `protobuf:"varint,5,opt,name=physical_core_count,json=physicalCoreCount" json:"physical_core_count,omitempty"`
	LogicalCoreCount  int32   `protobuf:"varint,6,opt,name=logical_core_count,json=logicalCoreCount" json:"logical_core_count,omitempty"`
}

func (m *CPUInformation) Reset()                    { *m = CPUInformation{} }
func (m *CPUInformation) String() string            { return proto.CompactTextString(m) }
func (*CPUInformation) ProtoMessage()               {}
func (*CPUInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *CPUInformation) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CPUInformation) GetCacheSizeBytes() int32 {
	if m != nil {
		return m.CacheSizeBytes
	}
	return 0
}

func (m *CPUInformation) GetSpeedMhz() float64 {
	if m != nil {
		return m.SpeedMhz
	}
	return 0
}

func (m *CPUInformation) GetSocketCount() int32 {
	if m != nil {
		return m.SocketCount
	}
	return 0
}

func (m *CPUInformation) GetPhysicalCoreCount() int32 {
	if m != nil {
		return m.PhysicalCoreCount
	}
	return 0
}

func (m *CPUInformation) GetLogicalCoreCount() int32 {
	if m != nil {
		return m.LogicalCoreCount
	}
	return 0
}

type CPUReference struct {
	CoreId string `protobuf:"bytes,1,opt,name=core_id,json=coreId" json:"core_id,omitempty"`
}

func (m *CPUReference) Reset()                    { *m = CPUReference{} }
func (m *CPUReference) String() string            { return proto.CompactTextString(m) }
func (*CPUReference) ProtoMessage()               {}
func (*CPUReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *CPUReference) GetCoreId() string {
	if m != nil {
		return m.CoreId
	}
	return ""
}

type CPUStatistic struct {
	CpuIdx           int32   `protobuf:"varint,1,opt,name=cpu_idx,json=cpuIdx" json:"cpu_idx,omitempty"`
	UserPercent      float64 `protobuf:"fixed64,2,opt,name=user_percent,json=userPercent" json:"user_percent,omitempty"`
	SystemPercent    float64 `protobuf:"fixed64,3,opt,name=system_percent,json=systemPercent" json:"system_percent,omitempty"`
	IdlePercent      float64 `protobuf:"fixed64,4,opt,name=idle_percent,json=idlePercent" json:"idle_percent,omitempty"`
	NicePercent      float64 `protobuf:"fixed64,5,opt,name=nice_percent,json=nicePercent" json:"nice_percent,omitempty"`
	IowaitPercent    float64 `protobuf:"fixed64,6,opt,name=iowait_percent,json=iowaitPercent" json:"iowait_percent,omitempty"`
	IrqPercent       float64 `protobuf:"fixed64,7,opt,name=irq_percent,json=irqPercent" json:"irq_percent,omitempty"`
	SoftIrqPercent   float64 `protobuf:"fixed64,8,opt,name=soft_irq_percent,json=softIrqPercent" json:"soft_irq_percent,omitempty"`
	StealPercent     float64 `protobuf:"fixed64,9,opt,name=steal_percent,json=stealPercent" json:"steal_percent,omitempty"`
	GuestPercent     float64 `protobuf:"fixed64,10,opt,name=guest_percent,json=guestPercent" json:"guest_percent,omitempty"`
	GuestNicePercent float64 `protobuf:"fixed64,11,opt,name=guest_nice_percent,json=guestNicePercent" json:"guest_nice_percent,omitempty"`
}

func (m *CPUStatistic) Reset()                    { *m = CPUStatistic{} }
func (m *CPUStatistic) String() string            { return proto.CompactTextString(m) }
func (*CPUStatistic) ProtoMessage()               {}
func (*CPUStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *CPUStatistic) GetCpuIdx() int32 {
	if m != nil {
		return m.CpuIdx
	}
	return 0
}

func (m *CPUStatistic) GetUserPercent() float64 {
	if m != nil {
		return m.UserPercent
	}
	return 0
}

func (m *CPUStatistic) GetSystemPercent() float64 {
	if m != nil {
		return m.SystemPercent
	}
	return 0
}

func (m *CPUStatistic) GetIdlePercent() float64 {
	if m != nil {
		return m.IdlePercent
	}
	return 0
}

func (m *CPUStatistic) GetNicePercent() float64 {
	if m != nil {
		return m.NicePercent
	}
	return 0
}

func (m *CPUStatistic) GetIowaitPercent() float64 {
	if m != nil {
		return m.IowaitPercent
	}
	return 0
}

func (m *CPUStatistic) GetIrqPercent() float64 {
	if m != nil {
		return m.IrqPercent
	}
	return 0
}

func (m *CPUStatistic) GetSoftIrqPercent() float64 {
	if m != nil {
		return m.SoftIrqPercent
	}
	return 0
}

func (m *CPUStatistic) GetStealPercent() float64 {
	if m != nil {
		return m.StealPercent
	}
	return 0
}

func (m *CPUStatistic) GetGuestPercent() float64 {
	if m != nil {
		return m.GuestPercent
	}
	return 0
}

func (m *CPUStatistic) GetGuestNicePercent() float64 {
	if m != nil {
		return m.GuestNicePercent
	}
	return 0
}

type NetworkReference struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *NetworkReference) Reset()                    { *m = NetworkReference{} }
func (m *NetworkReference) String() string            { return proto.CompactTextString(m) }
func (*NetworkReference) ProtoMessage()               {}
func (*NetworkReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *NetworkReference) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type NetworkStatistic struct {
	NetworkIdx                       int32  `protobuf:"varint,1,opt,name=network_idx,json=networkIdx" json:"network_idx,omitempty"`
	TransmitThroughputBytesPerSecond uint64 `protobuf:"varint,2,opt,name=transmit_throughput_bytes_per_second,json=transmitThroughputBytesPerSecond" json:"transmit_throughput_bytes_per_second,omitempty"`
	ReceiveThroughputBytesPerSecond  uint64 `protobuf:"varint,3,opt,name=receive_throughput_bytes_per_second,json=receiveThroughputBytesPerSecond" json:"receive_throughput_bytes_per_second,omitempty"`
}

func (m *NetworkStatistic) Reset()                    { *m = NetworkStatistic{} }
func (m *NetworkStatistic) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatistic) ProtoMessage()               {}
func (*NetworkStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *NetworkStatistic) GetNetworkIdx() int32 {
	if m != nil {
		return m.NetworkIdx
	}
	return 0
}

func (m *NetworkStatistic) GetTransmitThroughputBytesPerSecond() uint64 {
	if m != nil {
		return m.TransmitThroughputBytesPerSecond
	}
	return 0
}

func (m *NetworkStatistic) GetReceiveThroughputBytesPerSecond() uint64 {
	if m != nil {
		return m.ReceiveThroughputBytesPerSecond
	}
	return 0
}

type DiskReference struct {
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
}

func (m *DiskReference) Reset()                    { *m = DiskReference{} }
func (m *DiskReference) String() string            { return proto.CompactTextString(m) }
func (*DiskReference) ProtoMessage()               {}
func (*DiskReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *DiskReference) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type DiskInformation struct {
	DiskIdx         int32  `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	DiskType        string `protobuf:"bytes,2,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	Scheduler       string `protobuf:"bytes,3,opt,name=scheduler" json:"scheduler,omitempty"`
	ProvisionedIops uint32 `protobuf:"varint,4,opt,name=provisioned_iops,json=provisionedIops" json:"provisioned_iops,omitempty"`
	Encrypted       bool   `protobuf:"varint,5,opt,name=encrypted" json:"encrypted,omitempty"`
}

func (m *DiskInformation) Reset()                    { *m = DiskInformation{} }
func (m *DiskInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskInformation) ProtoMessage()               {}
func (*DiskInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *DiskInformation) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskInformation) GetDiskType() string {
	if m != nil {
		return m.DiskType
	}
	return ""
}

func (m *DiskInformation) GetScheduler() string {
	if m != nil {
		return m.Scheduler
	}
	return ""
}

func (m *DiskInformation) GetProvisionedIops() uint32 {
	if m != nil {
		return m.ProvisionedIops
	}
	return 0
}

func (m *DiskInformation) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

type DiskStatistic struct {
	DiskIdx                  int32   `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	ReadOperationsPerSecond  float64 `protobuf:"fixed64,2,opt,name=read_operations_per_second,json=readOperationsPerSecond" json:"read_operations_per_second,omitempty"`
	ReadsMergedPerSecond     float64 `protobuf:"fixed64,3,opt,name=reads_merged_per_second,json=readsMergedPerSecond" json:"reads_merged_per_second,omitempty"`
	BytesReadPerSecond       float64 `protobuf:"fixed64,4,opt,name=bytes_read_per_second,json=bytesReadPerSecond" json:"bytes_read_per_second,omitempty"`
	AvgReadLatency           float64 `protobuf:"fixed64,5,opt,name=avg_read_latency,json=avgReadLatency" json:"avg_read_latency,omitempty"`
	WriteOperationsPerSecond float64 `protobuf:"fixed64,6,opt,name=write_operations_per_second,json=writeOperationsPerSecond" json:"write_operations_per_second,omitempty"`
	WritesMergedPerSecond    float64 `protobuf:"fixed64,7,opt,name=writes_merged_per_second,json=writesMergedPerSecond" json:"writes_merged_per_second,omitempty"`
	BytesWrittenPerSecond    float64 `protobuf:"fixed64,8,opt,name=bytes_written_per_second,json=bytesWrittenPerSecond" json:"bytes_written_per_second,omitempty"`
	AvgWriteLatency          float64 `protobuf:"fixed64,9,opt,name=avg_write_latency,json=avgWriteLatency" json:"avg_write_latency,omitempty"`
	AvgQueueSize             int32   `protobuf:"varint,10,opt,name=avg_queue_size,json=avgQueueSize" json:"avg_queue_size,omitempty"`
	UtilizationPercent       float64 `protobuf:"fixed64,12,opt,name=utilization_percent,json=utilizationPercent" json:"utilization_percent,omitempty"`
}

func (m *DiskStatistic) Reset()                    { *m = DiskStatistic{} }
func (m *DiskStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskStatistic) ProtoMessage()               {}
func (*DiskStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *DiskStatistic) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskStatistic) GetReadOperationsPerSecond() float64 {
	if m != nil {
		return m.ReadOperationsPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetReadsMergedPerSecond() float64 {
	if m != nil {
		return m.ReadsMergedPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetBytesReadPerSecond() float64 {
	if m != nil {
		return m.BytesReadPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetAvgReadLatency() float64 {
	if m != nil {
		return m.AvgReadLatency
	}
	return 0
}

func (m *DiskStatistic) GetWriteOperationsPerSecond() float64 {
	if m != nil {
		return m.WriteOperationsPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetWritesMergedPerSecond() float64 {
	if m != nil {
		return m.WritesMergedPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetBytesWrittenPerSecond() float64 {
	if m != nil {
		return m.BytesWrittenPerSecond
	}
	return 0
}

func (m *DiskStatistic) GetAvgWriteLatency() float64 {
	if m != nil {
		return m.AvgWriteLatency
	}
	return 0
}

func (m *DiskStatistic) GetAvgQueueSize() int32 {
	if m != nil {
		return m.AvgQueueSize
	}
	return 0
}

func (m *DiskStatistic) GetUtilizationPercent() float64 {
	if m != nil {
		return m.UtilizationPercent
	}
	return 0
}

type DiskPartitionReference struct {
	Mountpoint string `protobuf:"bytes,1,opt,name=mountpoint" json:"mountpoint,omitempty"`
}

func (m *DiskPartitionReference) Reset()                    { *m = DiskPartitionReference{} }
func (m *DiskPartitionReference) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionReference) ProtoMessage()               {}
func (*DiskPartitionReference) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *DiskPartitionReference) GetMountpoint() string {
	if m != nil {
		return m.Mountpoint
	}
	return ""
}

type DiskPartitionInformation struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	DiskIdx          int32  `protobuf:"varint,2,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	FilesystemType   string `protobuf:"bytes,3,opt,name=filesystem_type,json=filesystemType" json:"filesystem_type,omitempty"`
	FilesystemOpts   string `protobuf:"bytes,4,opt,name=filesystem_opts,json=filesystemOpts" json:"filesystem_opts,omitempty"`
	PartitionName    string `protobuf:"bytes,5,opt,name=partition_name,json=partitionName" json:"partition_name,omitempty"`
}

func (m *DiskPartitionInformation) Reset()                    { *m = DiskPartitionInformation{} }
func (m *DiskPartitionInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionInformation) ProtoMessage()               {}
func (*DiskPartitionInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *DiskPartitionInformation) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *DiskPartitionInformation) GetDiskIdx() int32 {
	if m != nil {
		return m.DiskIdx
	}
	return 0
}

func (m *DiskPartitionInformation) GetFilesystemType() string {
	if m != nil {
		return m.FilesystemType
	}
	return ""
}

func (m *DiskPartitionInformation) GetFilesystemOpts() string {
	if m != nil {
		return m.FilesystemOpts
	}
	return ""
}

func (m *DiskPartitionInformation) GetPartitionName() string {
	if m != nil {
		return m.PartitionName
	}
	return ""
}

type DiskPartitionStatistic struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	UsedBytes        uint64 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes" json:"used_bytes,omitempty"`
	TotalBytes       uint64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
}

func (m *DiskPartitionStatistic) Reset()                    { *m = DiskPartitionStatistic{} }
func (m *DiskPartitionStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionStatistic) ProtoMessage()               {}
func (*DiskPartitionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *DiskPartitionStatistic) GetDiskPartitionIdx() int32 {
	if m != nil {
		return m.DiskPartitionIdx
	}
	return 0
}

func (m *DiskPartitionStatistic) GetUsedBytes() uint64 {
	if m != nil {
		return m.UsedBytes
	}
	return 0
}

func (m *DiskPartitionStatistic) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

type QueryStatistic struct {
	QueryIdx          int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Calls             int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime         float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	Rows              int64   `protobuf:"varint,4,opt,name=rows" json:"rows,omitempty"`
	SharedBlksHit     int64   `protobuf:"varint,5,opt,name=shared_blks_hit,json=sharedBlksHit" json:"shared_blks_hit,omitempty"`
	SharedBlksRead    int64   `protobuf:"varint,6,opt,name=shared_blks_read,json=sharedBlksRead" json:"shared_blks_read,omitempty"`
	SharedBlksDirtied int64   `protobuf:"varint,7,opt,name=shared_blks_dirtied,json=sharedBlksDirtied" json:"shared_blks_dirtied,omitempty"`
	SharedBlksWritten int64   `protobuf:"varint,8,opt,name=shared_blks_written,json=sharedBlksWritten" json:"shared_blks_written,omitempty"`
	LocalBlksHit      int64   `protobuf:"varint,9,opt,name=local_blks_hit,json=localBlksHit" json:"local_blks_hit,omitempty"`
	LocalBlksRead     int64   `protobuf:"varint,10,opt,name=local_blks_read,json=localBlksRead" json:"local_blks_read,omitempty"`
	LocalBlksDirtied  int64   `protobuf:"varint,11,opt,name=local_blks_dirtied,json=localBlksDirtied" json:"local_blks_dirtied,omitempty"`
	LocalBlksWritten  int64   `protobuf:"varint,12,opt,name=local_blks_written,json=localBlksWritten" json:"local_blks_written,omitempty"`
	TempBlksRead      int64   `protobuf:"varint,13,opt,name=temp_blks_read,json=tempBlksRead" json:"temp_blks_read,omitempty"`
	TempBlksWritten   int64   `protobuf:"varint,14,opt,name=temp_blks_written,json=tempBlksWritten" json:"temp_blks_written,omitempty"`
	BlkReadTime       float64 `protobuf:"fixed64,15,opt,name=blk_read_time,json=blkReadTime" json:"blk_read_time,omitempty"`
	BlkWriteTime      float64 `protobuf:"fixed64,16,opt,name=blk_write_time,json=blkWriteTime" json:"blk_write_time,omitempty"`
}

func (m *QueryStatistic) Reset()                    { *m = QueryStatistic{} }
func (m *QueryStatistic) String() string            { return proto.CompactTextString(m) }
func (*QueryStatistic) ProtoMessage()               {}
func (*QueryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *QueryStatistic) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QueryStatistic) GetCalls() int64 {
	if m != nil {
		return m.Calls
	}
	return 0
}

func (m *QueryStatistic) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *QueryStatistic) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksHit() int64 {
	if m != nil {
		return m.SharedBlksHit
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksRead() int64 {
	if m != nil {
		return m.SharedBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksDirtied() int64 {
	if m != nil {
		return m.SharedBlksDirtied
	}
	return 0
}

func (m *QueryStatistic) GetSharedBlksWritten() int64 {
	if m != nil {
		return m.SharedBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksHit() int64 {
	if m != nil {
		return m.LocalBlksHit
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksRead() int64 {
	if m != nil {
		return m.LocalBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksDirtied() int64 {
	if m != nil {
		return m.LocalBlksDirtied
	}
	return 0
}

func (m *QueryStatistic) GetLocalBlksWritten() int64 {
	if m != nil {
		return m.LocalBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetTempBlksRead() int64 {
	if m != nil {
		return m.TempBlksRead
	}
	return 0
}

func (m *QueryStatistic) GetTempBlksWritten() int64 {
	if m != nil {
		return m.TempBlksWritten
	}
	return 0
}

func (m *QueryStatistic) GetBlkReadTime() float64 {
	if m != nil {
		return m.BlkReadTime
	}
	return 0
}

func (m *QueryStatistic) GetBlkWriteTime() float64 {
	if m != nil {
		return m.BlkWriteTime
	}
	return 0
}

type HistoricQueryStatistics struct {
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,2,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	Statistics            []*QueryStatistic          `protobuf:"bytes,3,rep,name=statistics" json:"statistics,omitempty"`
}

func (m *HistoricQueryStatistics) Reset()                    { *m = HistoricQueryStatistics{} }
func (m *HistoricQueryStatistics) String() string            { return proto.CompactTextString(m) }
func (*HistoricQueryStatistics) ProtoMessage()               {}
func (*HistoricQueryStatistics) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *HistoricQueryStatistics) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *HistoricQueryStatistics) GetCollectedIntervalSecs() uint32 {
	if m != nil {
		return m.CollectedIntervalSecs
	}
	return 0
}

func (m *HistoricQueryStatistics) GetStatistics() []*QueryStatistic {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type QueryExplain struct {
	QueryIdx      int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	OccurredAt    int64   `protobuf:"varint,4,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Runtime       float64 `protobuf:"fixed64,5,opt,name=runtime" json:"runtime,omitempty"`
	ExplainOutput string  `protobuf:"bytes,6,opt,name=explain_output,json=explainOutput" json:"explain_output,omitempty"`
	ExplainError  string  `protobuf:"bytes,7,opt,name=explain_error,json=explainError" json:"explain_error,omitempty"`
}

func (m *QueryExplain) Reset()                    { *m = QueryExplain{} }
func (m *QueryExplain) String() string            { return proto.CompactTextString(m) }
func (*QueryExplain) ProtoMessage()               {}
func (*QueryExplain) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *QueryExplain) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QueryExplain) GetOccurredAt() int64 {
	if m != nil {
		return m.OccurredAt
	}
	return 0
}

func (m *QueryExplain) GetRuntime() float64 {
	if m != nil {
		return m.Runtime
	}
	return 0
}

func (m *QueryExplain) GetExplainOutput() string {
	if m != nil {
		return m.ExplainOutput
	}
	return ""
}

func (m *QueryExplain) GetExplainError() string {
	if m != nil {
		return m.ExplainError
	}
	return ""
}

type RelationInformation struct {
	RelationIdx            int32                             `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	RelationType           string                            `protobuf:"bytes,2,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	ViewDefinition         *NullString                       `protobuf:"bytes,3,opt,name=view_definition,json=viewDefinition" json:"view_definition,omitempty"`
	Columns                []*RelationInformation_Column     `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	Constraints            []*RelationInformation_Constraint `protobuf:"bytes,5,rep,name=constraints" json:"constraints,omitempty"`
	PersistenceType        string                            `protobuf:"bytes,6,opt,name=persistence_type,json=persistenceType" json:"persistence_type,omitempty"`
	Fillfactor             int32                             `protobuf:"varint,7,opt,name=fillfactor" json:"fillfactor,omitempty"`
	HasOids                bool                              `protobuf:"varint,8,opt,name=has_oids,json=hasOids" json:"has_oids,omitempty"`
	HasInheritanceChildren bool                              `protobuf:"varint,9,opt,name=has_inheritance_children,json=hasInheritanceChildren" json:"has_inheritance_children,omitempty"`
	HasToast               bool                              `protobuf:"varint,10,opt,name=has_toast,json=hasToast" json:"has_toast,omitempty"`
	FrozenXid              uint32                            `protobuf:"varint,11,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	MinimumMultixactXid    uint32                            `protobuf:"varint,12,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
	// True if another process is currently holding an AccessExclusiveLock on this
	// relation, this also means we won't have columns/index/constraints information
	ExclusivelyLocked bool `protobuf:"varint,13,opt,name=exclusively_locked,json=exclusivelyLocked" json:"exclusively_locked,omitempty"`
}

func (m *RelationInformation) Reset()                    { *m = RelationInformation{} }
func (m *RelationInformation) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation) ProtoMessage()               {}
func (*RelationInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *RelationInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationInformation) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *RelationInformation) GetViewDefinition() *NullString {
	if m != nil {
		return m.ViewDefinition
	}
	return nil
}

func (m *RelationInformation) GetColumns() []*RelationInformation_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation) GetConstraints() []*RelationInformation_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *RelationInformation) GetPersistenceType() string {
	if m != nil {
		return m.PersistenceType
	}
	return ""
}

func (m *RelationInformation) GetFillfactor() int32 {
	if m != nil {
		return m.Fillfactor
	}
	return 0
}

func (m *RelationInformation) GetHasOids() bool {
	if m != nil {
		return m.HasOids
	}
	return false
}

func (m *RelationInformation) GetHasInheritanceChildren() bool {
	if m != nil {
		return m.HasInheritanceChildren
	}
	return false
}

func (m *RelationInformation) GetHasToast() bool {
	if m != nil {
		return m.HasToast
	}
	return false
}

func (m *RelationInformation) GetFrozenXid() uint32 {
	if m != nil {
		return m.FrozenXid
	}
	return 0
}

func (m *RelationInformation) GetMinimumMultixactXid() uint32 {
	if m != nil {
		return m.MinimumMultixactXid
	}
	return 0
}

func (m *RelationInformation) GetExclusivelyLocked() bool {
	if m != nil {
		return m.ExclusivelyLocked
	}
	return false
}

type RelationInformation_Column struct {
	Name         string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DataType     string      `protobuf:"bytes,3,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	DefaultValue *NullString `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	NotNull      bool        `protobuf:"varint,5,opt,name=not_null,json=notNull" json:"not_null,omitempty"`
	Position     int32       `protobuf:"varint,6,opt,name=position" json:"position,omitempty"`
}

func (m *RelationInformation_Column) Reset()                    { *m = RelationInformation_Column{} }
func (m *RelationInformation_Column) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation_Column) ProtoMessage()               {}
func (*RelationInformation_Column) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30, 0} }

func (m *RelationInformation_Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationInformation_Column) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *RelationInformation_Column) GetDefaultValue() *NullString {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (m *RelationInformation_Column) GetNotNull() bool {
	if m != nil {
		return m.NotNull
	}
	return false
}

func (m *RelationInformation_Column) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type RelationInformation_Constraint struct {
	ForeignRelationIdx int32   `protobuf:"varint,1,opt,name=foreign_relation_idx,json=foreignRelationIdx" json:"foreign_relation_idx,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ConstraintDef      string  `protobuf:"bytes,4,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	Columns            []int32 `protobuf:"varint,5,rep,packed,name=columns" json:"columns,omitempty"`
	ForeignColumns     []int32 `protobuf:"varint,6,rep,packed,name=foreign_columns,json=foreignColumns" json:"foreign_columns,omitempty"`
	ForeignUpdateType  string  `protobuf:"bytes,7,opt,name=foreign_update_type,json=foreignUpdateType" json:"foreign_update_type,omitempty"`
	ForeignDeleteType  string  `protobuf:"bytes,8,opt,name=foreign_delete_type,json=foreignDeleteType" json:"foreign_delete_type,omitempty"`
	ForeignMatchType   string  `protobuf:"bytes,9,opt,name=foreign_match_type,json=foreignMatchType" json:"foreign_match_type,omitempty"`
}

func (m *RelationInformation_Constraint) Reset()         { *m = RelationInformation_Constraint{} }
func (m *RelationInformation_Constraint) String() string { return proto.CompactTextString(m) }
func (*RelationInformation_Constraint) ProtoMessage()    {}
func (*RelationInformation_Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{30, 1}
}

func (m *RelationInformation_Constraint) GetForeignRelationIdx() int32 {
	if m != nil {
		return m.ForeignRelationIdx
	}
	return 0
}

func (m *RelationInformation_Constraint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelationInformation_Constraint) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RelationInformation_Constraint) GetConstraintDef() string {
	if m != nil {
		return m.ConstraintDef
	}
	return ""
}

func (m *RelationInformation_Constraint) GetColumns() []int32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation_Constraint) GetForeignColumns() []int32 {
	if m != nil {
		return m.ForeignColumns
	}
	return nil
}

func (m *RelationInformation_Constraint) GetForeignUpdateType() string {
	if m != nil {
		return m.ForeignUpdateType
	}
	return ""
}

func (m *RelationInformation_Constraint) GetForeignDeleteType() string {
	if m != nil {
		return m.ForeignDeleteType
	}
	return ""
}

func (m *RelationInformation_Constraint) GetForeignMatchType() string {
	if m != nil {
		return m.ForeignMatchType
	}
	return ""
}

type RelationStatistic struct {
	RelationIdx      int32 `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	SizeBytes        int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	SeqScan          int64 `protobuf:"varint,3,opt,name=seq_scan,json=seqScan" json:"seq_scan,omitempty"`
	SeqTupRead       int64 `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead" json:"seq_tup_read,omitempty"`
	IdxScan          int64 `protobuf:"varint,5,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupFetch      int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	NTupIns          int64 `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns" json:"n_tup_ins,omitempty"`
	NTupUpd          int64 `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd" json:"n_tup_upd,omitempty"`
	NTupDel          int64 `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel" json:"n_tup_del,omitempty"`
	NTupHotUpd       int64 `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd" json:"n_tup_hot_upd,omitempty"`
	NLiveTup         int64 `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup" json:"n_live_tup,omitempty"`
	NDeadTup         int64 `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup" json:"n_dead_tup,omitempty"`
	NModSinceAnalyze int64 `protobuf:"varint,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze" json:"n_mod_since_analyze,omitempty"`
	HeapBlksRead     int64 `protobuf:"varint,18,opt,name=heap_blks_read,json=heapBlksRead" json:"heap_blks_read,omitempty"`
	HeapBlksHit      int64 `protobuf:"varint,19,opt,name=heap_blks_hit,json=heapBlksHit" json:"heap_blks_hit,omitempty"`
	IdxBlksRead      int64 `protobuf:"varint,20,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit       int64 `protobuf:"varint,21,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
	ToastBlksRead    int64 `protobuf:"varint,22,opt,name=toast_blks_read,json=toastBlksRead" json:"toast_blks_read,omitempty"`
	ToastBlksHit     int64 `protobuf:"varint,23,opt,name=toast_blks_hit,json=toastBlksHit" json:"toast_blks_hit,omitempty"`
	TidxBlksRead     int64 `protobuf:"varint,24,opt,name=tidx_blks_read,json=tidxBlksRead" json:"tidx_blks_read,omitempty"`
	TidxBlksHit      int64 `protobuf:"varint,25,opt,name=tidx_blks_hit,json=tidxBlksHit" json:"tidx_blks_hit,omitempty"`
}

func (m *RelationStatistic) Reset()                    { *m = RelationStatistic{} }
func (m *RelationStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationStatistic) ProtoMessage()               {}
func (*RelationStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *RelationStatistic) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationStatistic) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *RelationStatistic) GetSeqScan() int64 {
	if m != nil {
		return m.SeqScan
	}
	return 0
}

func (m *RelationStatistic) GetSeqTupRead() int64 {
	if m != nil {
		return m.SeqTupRead
	}
	return 0
}

func (m *RelationStatistic) GetIdxScan() int64 {
	if m != nil {
		return m.IdxScan
	}
	return 0
}

func (m *RelationStatistic) GetIdxTupFetch() int64 {
	if m != nil {
		return m.IdxTupFetch
	}
	return 0
}

func (m *RelationStatistic) GetNTupIns() int64 {
	if m != nil {
		return m.NTupIns
	}
	return 0
}

func (m *RelationStatistic) GetNTupUpd() int64 {
	if m != nil {
		return m.NTupUpd
	}
	return 0
}

func (m *RelationStatistic) GetNTupDel() int64 {
	if m != nil {
		return m.NTupDel
	}
	return 0
}

func (m *RelationStatistic) GetNTupHotUpd() int64 {
	if m != nil {
		return m.NTupHotUpd
	}
	return 0
}

func (m *RelationStatistic) GetNLiveTup() int64 {
	if m != nil {
		return m.NLiveTup
	}
	return 0
}

func (m *RelationStatistic) GetNDeadTup() int64 {
	if m != nil {
		return m.NDeadTup
	}
	return 0
}

func (m *RelationStatistic) GetNModSinceAnalyze() int64 {
	if m != nil {
		return m.NModSinceAnalyze
	}
	return 0
}

func (m *RelationStatistic) GetHeapBlksRead() int64 {
	if m != nil {
		return m.HeapBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetHeapBlksHit() int64 {
	if m != nil {
		return m.HeapBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetIdxBlksRead() int64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetIdxBlksHit() int64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetToastBlksRead() int64 {
	if m != nil {
		return m.ToastBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetToastBlksHit() int64 {
	if m != nil {
		return m.ToastBlksHit
	}
	return 0
}

func (m *RelationStatistic) GetTidxBlksRead() int64 {
	if m != nil {
		return m.TidxBlksRead
	}
	return 0
}

func (m *RelationStatistic) GetTidxBlksHit() int64 {
	if m != nil {
		return m.TidxBlksHit
	}
	return 0
}

type RelationEvent struct {
	RelationIdx           int32                      `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Type                  RelationEvent_EventType    `protobuf:"varint,2,opt,name=type,enum=pganalyze.collector.RelationEvent_EventType" json:"type,omitempty"`
	OccurredAt            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	ApproximateOccurredAt bool                       `protobuf:"varint,4,opt,name=approximate_occurred_at,json=approximateOccurredAt" json:"approximate_occurred_at,omitempty"`
}

func (m *RelationEvent) Reset()                    { *m = RelationEvent{} }
func (m *RelationEvent) String() string            { return proto.CompactTextString(m) }
func (*RelationEvent) ProtoMessage()               {}
func (*RelationEvent) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *RelationEvent) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *RelationEvent) GetType() RelationEvent_EventType {
	if m != nil {
		return m.Type
	}
	return RelationEvent_MANUAL_VACUUM
}

func (m *RelationEvent) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *RelationEvent) GetApproximateOccurredAt() bool {
	if m != nil {
		return m.ApproximateOccurredAt
	}
	return false
}

type IndexInformation struct {
	IndexIdx      int32       `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	RelationIdx   int32       `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Columns       []int32     `protobuf:"varint,3,rep,packed,name=columns" json:"columns,omitempty"`
	IndexDef      string      `protobuf:"bytes,4,opt,name=index_def,json=indexDef" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,5,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	IsPrimary     bool        `protobuf:"varint,6,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,7,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,8,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	Fillfactor    int32       `protobuf:"varint,9,opt,name=fillfactor" json:"fillfactor,omitempty"`
	IndexType     string      `protobuf:"bytes,10,opt,name=index_type,json=indexType" json:"index_type,omitempty"`
}

func (m *IndexInformation) Reset()                    { *m = IndexInformation{} }
func (m *IndexInformation) String() string            { return proto.CompactTextString(m) }
func (*IndexInformation) ProtoMessage()               {}
func (*IndexInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *IndexInformation) GetIndexIdx() int32 {
	if m != nil {
		return m.IndexIdx
	}
	return 0
}

func (m *IndexInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *IndexInformation) GetColumns() []int32 {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *IndexInformation) GetIndexDef() string {
	if m != nil {
		return m.IndexDef
	}
	return ""
}

func (m *IndexInformation) GetConstraintDef() *NullString {
	if m != nil {
		return m.ConstraintDef
	}
	return nil
}

func (m *IndexInformation) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *IndexInformation) GetIsUnique() bool {
	if m != nil {
		return m.IsUnique
	}
	return false
}

func (m *IndexInformation) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *IndexInformation) GetFillfactor() int32 {
	if m != nil {
		return m.Fillfactor
	}
	return 0
}

func (m *IndexInformation) GetIndexType() string {
	if m != nil {
		return m.IndexType
	}
	return ""
}

type IndexStatistic struct {
	IndexIdx    int32 `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	SizeBytes   int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IdxScan     int64 `protobuf:"varint,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupRead  int64 `protobuf:"varint,4,opt,name=idx_tup_read,json=idxTupRead" json:"idx_tup_read,omitempty"`
	IdxTupFetch int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead int64 `protobuf:"varint,7,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit  int64 `protobuf:"varint,8,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
}

func (m *IndexStatistic) Reset()                    { *m = IndexStatistic{} }
func (m *IndexStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexStatistic) ProtoMessage()               {}
func (*IndexStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *IndexStatistic) GetIndexIdx() int32 {
	if m != nil {
		return m.IndexIdx
	}
	return 0
}

func (m *IndexStatistic) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *IndexStatistic) GetIdxScan() int64 {
	if m != nil {
		return m.IdxScan
	}
	return 0
}

func (m *IndexStatistic) GetIdxTupRead() int64 {
	if m != nil {
		return m.IdxTupRead
	}
	return 0
}

func (m *IndexStatistic) GetIdxTupFetch() int64 {
	if m != nil {
		return m.IdxTupFetch
	}
	return 0
}

func (m *IndexStatistic) GetIdxBlksRead() int64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return 0
}

func (m *IndexStatistic) GetIdxBlksHit() int64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return 0
}

type FunctionInformation struct {
	FunctionIdx     int32    `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Language        string   `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Source          string   `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	SourceBin       string   `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin" json:"source_bin,omitempty"`
	Config          []string `protobuf:"bytes,6,rep,name=config" json:"config,omitempty"`
	Result          string   `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Aggregate       bool     `protobuf:"varint,9,opt,name=aggregate" json:"aggregate,omitempty"`
	Window          bool     `protobuf:"varint,10,opt,name=window" json:"window,omitempty"`
	SecurityDefiner bool     `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner" json:"security_definer,omitempty"`
	Leakproof       bool     `protobuf:"varint,12,opt,name=leakproof" json:"leakproof,omitempty"`
	Strict          bool     `protobuf:"varint,13,opt,name=strict" json:"strict,omitempty"`
	ReturnsSet      bool     `protobuf:"varint,14,opt,name=returns_set,json=returnsSet" json:"returns_set,omitempty"`
	Volatile        string   `protobuf:"bytes,15,opt,name=volatile" json:"volatile,omitempty"`
}

func (m *FunctionInformation) Reset()                    { *m = FunctionInformation{} }
func (m *FunctionInformation) String() string            { return proto.CompactTextString(m) }
func (*FunctionInformation) ProtoMessage()               {}
func (*FunctionInformation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

func (m *FunctionInformation) GetFunctionIdx() int32 {
	if m != nil {
		return m.FunctionIdx
	}
	return 0
}

func (m *FunctionInformation) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *FunctionInformation) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *FunctionInformation) GetSourceBin() string {
	if m != nil {
		return m.SourceBin
	}
	return ""
}

func (m *FunctionInformation) GetConfig() []string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *FunctionInformation) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *FunctionInformation) GetAggregate() bool {
	if m != nil {
		return m.Aggregate
	}
	return false
}

func (m *FunctionInformation) GetWindow() bool {
	if m != nil {
		return m.Window
	}
	return false
}

func (m *FunctionInformation) GetSecurityDefiner() bool {
	if m != nil {
		return m.SecurityDefiner
	}
	return false
}

func (m *FunctionInformation) GetLeakproof() bool {
	if m != nil {
		return m.Leakproof
	}
	return false
}

func (m *FunctionInformation) GetStrict() bool {
	if m != nil {
		return m.Strict
	}
	return false
}

func (m *FunctionInformation) GetReturnsSet() bool {
	if m != nil {
		return m.ReturnsSet
	}
	return false
}

func (m *FunctionInformation) GetVolatile() string {
	if m != nil {
		return m.Volatile
	}
	return ""
}

type FunctionStatistic struct {
	FunctionIdx int32   `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Calls       int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime   float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	SelfTime    float64 `protobuf:"fixed64,4,opt,name=self_time,json=selfTime" json:"self_time,omitempty"`
}

func (m *FunctionStatistic) Reset()                    { *m = FunctionStatistic{} }
func (m *FunctionStatistic) String() string            { return proto.CompactTextString(m) }
func (*FunctionStatistic) ProtoMessage()               {}
func (*FunctionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *FunctionStatistic) GetFunctionIdx() int32 {
	if m != nil {
		return m.FunctionIdx
	}
	return 0
}

func (m *FunctionStatistic) GetCalls() int64 {
	if m != nil {
		return m.Calls
	}
	return 0
}

func (m *FunctionStatistic) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *FunctionStatistic) GetSelfTime() float64 {
	if m != nil {
		return m.SelfTime
	}
	return 0
}

func init() {
	proto.RegisterType((*FullSnapshot)(nil), "pganalyze.collector.FullSnapshot")
	proto.RegisterType((*CollectorStatistic)(nil), "pganalyze.collector.CollectorStatistic")
	proto.RegisterType((*RoleInformation)(nil), "pganalyze.collector.RoleInformation")
	proto.RegisterType((*DatabaseInformation)(nil), "pganalyze.collector.DatabaseInformation")
	proto.RegisterType((*PostgresVersion)(nil), "pganalyze.collector.PostgresVersion")
	proto.RegisterType((*LogLine)(nil), "pganalyze.collector.LogLine")
	proto.RegisterType((*Setting)(nil), "pganalyze.collector.Setting")
	proto.RegisterType((*Backend)(nil), "pganalyze.collector.Backend")
	proto.RegisterType((*TablespaceReference)(nil), "pganalyze.collector.TablespaceReference")
	proto.RegisterType((*TablespaceInformation)(nil), "pganalyze.collector.TablespaceInformation")
	proto.RegisterType((*System)(nil), "pganalyze.collector.System")
	proto.RegisterType((*SystemInformation)(nil), "pganalyze.collector.SystemInformation")
	proto.RegisterType((*SystemInformationSelfHosted)(nil), "pganalyze.collector.SystemInformationSelfHosted")
	proto.RegisterType((*SystemInformationAmazonRDS)(nil), "pganalyze.collector.SystemInformationAmazonRDS")
	proto.RegisterType((*SchedulerStatistic)(nil), "pganalyze.collector.SchedulerStatistic")
	proto.RegisterType((*MemoryStatistic)(nil), "pganalyze.collector.MemoryStatistic")
	proto.RegisterType((*CPUInformation)(nil), "pganalyze.collector.CPUInformation")
	proto.RegisterType((*CPUReference)(nil), "pganalyze.collector.CPUReference")
	proto.RegisterType((*CPUStatistic)(nil), "pganalyze.collector.CPUStatistic")
	proto.RegisterType((*NetworkReference)(nil), "pganalyze.collector.NetworkReference")
	proto.RegisterType((*NetworkStatistic)(nil), "pganalyze.collector.NetworkStatistic")
	proto.RegisterType((*DiskReference)(nil), "pganalyze.collector.DiskReference")
	proto.RegisterType((*DiskInformation)(nil), "pganalyze.collector.DiskInformation")
	proto.RegisterType((*DiskStatistic)(nil), "pganalyze.collector.DiskStatistic")
	proto.RegisterType((*DiskPartitionReference)(nil), "pganalyze.collector.DiskPartitionReference")
	proto.RegisterType((*DiskPartitionInformation)(nil), "pganalyze.collector.DiskPartitionInformation")
	proto.RegisterType((*DiskPartitionStatistic)(nil), "pganalyze.collector.DiskPartitionStatistic")
	proto.RegisterType((*QueryStatistic)(nil), "pganalyze.collector.QueryStatistic")
	proto.RegisterType((*HistoricQueryStatistics)(nil), "pganalyze.collector.HistoricQueryStatistics")
	proto.RegisterType((*QueryExplain)(nil), "pganalyze.collector.QueryExplain")
	proto.RegisterType((*RelationInformation)(nil), "pganalyze.collector.RelationInformation")
	proto.RegisterType((*RelationInformation_Column)(nil), "pganalyze.collector.RelationInformation.Column")
	proto.RegisterType((*RelationInformation_Constraint)(nil), "pganalyze.collector.RelationInformation.Constraint")
	proto.RegisterType((*RelationStatistic)(nil), "pganalyze.collector.RelationStatistic")
	proto.RegisterType((*RelationEvent)(nil), "pganalyze.collector.RelationEvent")
	proto.RegisterType((*IndexInformation)(nil), "pganalyze.collector.IndexInformation")
	proto.RegisterType((*IndexStatistic)(nil), "pganalyze.collector.IndexStatistic")
	proto.RegisterType((*FunctionInformation)(nil), "pganalyze.collector.FunctionInformation")
	proto.RegisterType((*FunctionStatistic)(nil), "pganalyze.collector.FunctionStatistic")
	proto.RegisterEnum("pganalyze.collector.LogLine_SourceType", LogLine_SourceType_name, LogLine_SourceType_value)
	proto.RegisterEnum("pganalyze.collector.SystemInformation_SystemType", SystemInformation_SystemType_name, SystemInformation_SystemType_value)
	proto.RegisterEnum("pganalyze.collector.RelationEvent_EventType", RelationEvent_EventType_name, RelationEvent_EventType_value)
}

func init() { proto.RegisterFile("full_snapshot.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 5741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x7b, 0xc9, 0x6f, 0x24, 0xd9,
	0x71, 0xf7, 0x14, 0x8b, 0x4b, 0x55, 0xd4, 0xca, 0x47, 0xb2, 0xbb, 0xba, 0x7b, 0x16, 0x4e, 0xcd,
	0x46, 0x8d, 0x46, 0x3d, 0x9b, 0x46, 0x23, 0x61, 0x34, 0x9a, 0xe1, 0x90, 0xdd, 0xea, 0x86, 0x7a,
	0x53, 0x92, 0x1c, 0x2d, 0xc0, 0xf7, 0x25, 0x92, 0x99, 0xaf, 0x8a, 0x4f, 0x9d, 0x95, 0x99, 0x9d,
	0x2f, 0x93, 0x4d, 0xf6, 0xed, 0xfb, 0x0c, 0x18, 0xbe, 0x19, 0xf0, 0xd1, 0x17, 0xc3, 0x86, 0xe1,
	0xab, 0x04, 0x1f, 0x04, 0x1f, 0x7d, 0x32, 0xbc, 0x1c, 0x0c, 0x2f, 0x3a, 0x59, 0xde, 0x60, 0x03,
	0x06, 0x7c, 0xd0, 0xc5, 0xff, 0x80, 0x11, 0x11, 0xef, 0x65, 0x66, 0x15, 0x8b, 0x6c, 0xca, 0xf0,
	0x85, 0xe0, 0xfb, 0xc5, 0x2f, 0x22, 0xe3, 0x6d, 0x91, 0x11, 0x2f, 0x5f, 0xc1, 0xda, 0x28, 0x0f,
	0x43, 0x57, 0x47, 0x5e, 0xa2, 0x8f, 0xe2, 0xec, 0x66, 0x92, 0xc6, 0x59, 0x2c, 0xd6, 0x92, 0xb1,
	0x17, 0x79, 0xe1, 0xe9, 0x33, 0x79, 0xd3, 0x8f, 0xc3, 0x50, 0xfa, 0x59, 0x9c, 0x5e, 0x7f, 0x65,
	0x1c, 0xc7, 0xe3, 0x50, 0xbe, 0x4b, 0x94, 0xc3, 0x7c, 0xf4, 0x6e, 0xa6, 0x26, 0x52, 0x67, 0xde,
	0x24, 0x61, 0xad, 0xeb, 0x6d, 0x7d, 0xe4, 0xa5, 0x32, 0xe0, 0xd6, 0xf0, 0xaf, 0xd7, 0xa1, 0x7d,
	0x3b, 0x0f, 0xc3, 0x3d, 0x63, 0x5a, 0x7c, 0x1d, 0xae, 0xd8, 0xc7, 0xb8, 0xc7, 0x32, 0xd5, 0x2a,
	0x8e, 0xdc, 0x89, 0xf7, 0x93, 0x38, 0x1d, 0xd4, 0x36, 0x6b, 0x5b, 0x4b, 0xce, 0xba, 0x95, 0x7e,
	0xc9, 0xc2, 0xfb, 0x28, 0x9b, 0xaf, 0xa5, 0xa2, 0x38, 0x1d, 0x2c, 0xcc, 0xd7, 0x42, 0x99, 0xf8,
	0x2a, 0xac, 0x16, 0x8e, 0x5b, 0xb5, 0x41, 0x7d, 0xb3, 0xb6, 0xd5, 0x74, 0xfa, 0x85, 0xc0, 0x68,
	0x88, 0x97, 0x00, 0x46, 0x9e, 0x0a, 0x65, 0xe0, 0xa6, 0x79, 0x34, 0x58, 0xdc, 0xac, 0x6d, 0x35,
	0x9c, 0x26, 0x23, 0x4e, 0x1e, 0x89, 0xd7, 0xa0, 0x53, 0x78, 0x90, 0xe7, 0x2a, 0x18, 0x00, 0xd9,
	0x69, 0x5b, 0xf0, 0x20, 0x57, 0x81, 0xf8, 0x14, 0xda, 0xc6, 0xae, 0x0c, 0x5c, 0x2f, 0x1b, 0xb4,
	0x36, 0x6b, 0x5b, 0xad, 0x0f, 0xae, 0xdf, 0xe4, 0x31, 0xbb, 0x69, 0xc7, 0xec, 0xe6, 0xbe, 0x1d,
	0x33, 0xa7, 0x55, 0xf0, 0xb7, 0x33, 0xf1, 0x0d, 0xb8, 0x5a, 0xaa, 0xab, 0x28, 0x93, 0xe9, 0xb1,
	0x17, 0xba, 0x5a, 0xfa, 0x7a, 0xd0, 0xde, 0xac, 0x6d, 0x75, 0x9c, 0x8d, 0x42, 0x7c, 0xd7, 0x48,
	0xf7, 0xa4, 0xaf, 0xc5, 0x0f, 0x61, 0xad, 0xec, 0xa7, 0xce, 0xbc, 0x4c, 0xe9, 0x4c, 0xf9, 0x83,
	0x75, 0x7a, 0xfa, 0x5b, 0x37, 0xe7, 0x4c, 0xe3, 0xcd, 0x1d, 0xfb, 0xdf, 0x9e, 0xa5, 0x3b, 0xc2,
	0x3f, 0x83, 0x89, 0xaf, 0x40, 0x39, 0x50, 0xae, 0x4c, 0xd3, 0x38, 0xd5, 0x83, 0x8d, 0xcd, 0xfa,
	0x56, 0xd3, 0xe9, 0x15, 0xf8, 0x2d, 0x82, 0xc5, 0x87, 0xb0, 0xac, 0x4f, 0x75, 0x26, 0x27, 0x83,
	0x80, 0x9e, 0x7b, 0x63, 0xee, 0x73, 0xf7, 0x88, 0xe2, 0x18, 0xaa, 0x78, 0x08, 0xfd, 0x24, 0xd6,
	0xd9, 0x38, 0x95, 0xba, 0x98, 0x20, 0x49, 0xea, 0xaf, 0xcf, 0x55, 0x7f, 0x64, 0xc8, 0x66, 0xd2,
	0x9c, 0x5e, 0x32, 0x0d, 0x88, 0xef, 0x41, 0x2f, 0x8d, 0x43, 0xe9, 0xa6, 0x72, 0x24, 0x53, 0x19,
	0xf9, 0x52, 0x0f, 0x46, 0x9b, 0xf5, 0xad, 0xd6, 0x07, 0xc3, 0xb9, 0xf6, 0x9c, 0x38, 0x94, 0x8e,
	0xa5, 0x3a, 0xdd, 0xb4, 0xda, 0xd4, 0xe2, 0x07, 0xb0, 0x16, 0x78, 0x99, 0x77, 0xe8, 0xe9, 0x29,
	0x83, 0x63, 0x32, 0xf8, 0xe6, 0x5c, 0x83, 0xbb, 0x86, 0x5f, 0x1a, 0x15, 0xc1, 0x2c, 0xa4, 0xc5,
	0xf7, 0x61, 0x95, 0xbc, 0x54, 0xd1, 0x28, 0x4e, 0x27, 0x5e, 0xa6, 0xe2, 0x48, 0x0f, 0x22, 0x32,
	0xfb, 0xfa, 0xb9, 0x7e, 0xde, 0x2d, 0xc9, 0x4e, 0x3f, 0x9d, 0x06, 0xb4, 0xf8, 0x3f, 0xb0, 0x51,
	0xf8, 0x3a, 0x65, 0x36, 0x26, 0xb3, 0x5b, 0x17, 0x7a, 0x5b, 0x35, 0xbd, 0x1e, 0x9c, 0x05, 0xb5,
	0x78, 0x0f, 0x16, 0xc3, 0x78, 0xac, 0x07, 0x27, 0x64, 0xed, 0xc5, 0xb9, 0xd6, 0xee, 0xc5, 0xe3,
	0x7b, 0x2a, 0x92, 0x0e, 0x31, 0xc5, 0x37, 0xa1, 0x71, 0xe8, 0xf9, 0x8f, 0x65, 0x14, 0xe8, 0xc1,
	0xe9, 0x05, 0x5a, 0x5f, 0x30, 0xc9, 0x29, 0xd8, 0xa8, 0xa9, 0x65, 0x96, 0xa9, 0x68, 0xac, 0x07,
	0xcf, 0x2e, 0xd0, 0xdc, 0x63, 0x92, 0x53, 0xb0, 0xc5, 0xff, 0x85, 0x8d, 0xcc, 0x3b, 0x0c, 0xa5,
	0x4e, 0x3c, 0x7f, 0x6a, 0xca, 0xfe, 0x7f, 0xed, 0x82, 0x51, 0xd8, 0x2f, 0x54, 0xca, 0x59, 0x5b,
	0xcf, 0xce, 0x82, 0x5a, 0x04, 0x70, 0xb5, 0x62, 0x7f, 0x6a, 0x98, 0x7f, 0x83, 0x9f, 0xf0, 0xf6,
	0x73, 0x9e, 0x50, 0x1d, 0xe9, 0x2b, 0xd9, 0x3c, 0x58, 0xe3, 0xa6, 0x78, 0x92, 0xcb, 0xf4, 0xb4,
	0xda, 0x81, 0x3f, 0x67, 0xf3, 0xaf, 0xcd, 0x35, 0xff, 0x7d, 0x64, 0x97, 0xbe, 0xf7, 0x9e, 0x4c,
	0xb5, 0x29, 0x3e, 0xa4, 0x32, 0x24, 0xeb, 0x55, 0x9b, 0x7f, 0x51, 0xbb, 0x60, 0x21, 0x3b, 0x46,
	0xa1, 0xb2, 0x90, 0xd3, 0x59, 0x88, 0x5c, 0x55, 0x51, 0x20, 0x4f, 0xaa, 0x66, 0xff, 0xf2, 0x22,
	0x57, 0xef, 0x22, 0xbb, 0xe2, 0xaa, 0x9a, 0x6a, 0x93, 0xab, 0xa3, 0x3c, 0xf2, 0x67, 0x5d, 0xfd,
	0xab, 0x8b, 0x5c, 0xbd, 0x6d, 0x14, 0x2a, 0xae, 0x8e, 0x66, 0x21, 0x2d, 0x0e, 0x40, 0xf0, 0xa8,
	0x4e, 0x4d, 0xdb, 0xdf, 0xb2, 0xe1, 0x37, 0xce, 0x1f, 0xd7, 0xea, 0x8c, 0xad, 0x3e, 0x99, 0x41,
	0x2a, 0x93, 0x55, 0xc4, 0x5d, 0x3d, 0xf8, 0xbb, 0xe7, 0x4e, 0x56, 0x19, 0x75, 0x79, 0xb2, 0x8a,
	0xb6, 0x16, 0x77, 0xa1, 0xcb, 0x06, 0xe5, 0x49, 0x12, 0x7a, 0x2a, 0xd2, 0x83, 0xbf, 0x67, 0x73,
	0xaf, 0x9e, 0x6f, 0xee, 0x16, 0x53, 0x9d, 0xce, 0x93, 0x4a, 0x4b, 0x0b, 0x05, 0xd7, 0x8e, 0x94,
	0xce, 0xe2, 0x54, 0xf9, 0xee, 0x19, 0x27, 0x7f, 0xc1, 0x56, 0xdf, 0x99, 0x6b, 0xf5, 0x8e, 0x51,
	0x9b, 0x76, 0x56, 0x3b, 0x57, 0x8f, 0xe6, 0x0b, 0x70, 0xe7, 0x15, 0x4b, 0x6c, 0x6a, 0x80, 0x7f,
	0x79, 0xd1, 0xce, 0xb3, 0x8b, 0x6c, 0x2a, 0xfe, 0xa4, 0x67, 0xc1, 0xe9, 0x25, 0x5c, 0xe9, 0xc4,
	0x3f, 0x5e, 0x66, 0x09, 0x57, 0x5e, 0x71, 0xe9, 0x2c, 0xa4, 0xc5, 0x3d, 0xe8, 0x15, 0x96, 0xe5,
	0xb1, 0x8c, 0x32, 0x3d, 0xf8, 0xe7, 0xda, 0x45, 0xaf, 0x0c, 0x43, 0xbe, 0x85, 0x5c, 0xa7, 0x9b,
	0x56, 0x9b, 0xb4, 0xca, 0x78, 0x43, 0x4c, 0x0d, 0xc2, 0xbf, 0x5c, 0xb4, 0xca, 0x68, 0x4b, 0x4c,
	0xad, 0x32, 0x35, 0x83, 0x54, 0xf6, 0x59, 0xa5, 0xef, 0xff, 0xfa, 0xdc, 0x7d, 0x56, 0x59, 0x65,
	0x6a, 0xaa, 0x4d, 0xf3, 0x55, 0xec, 0xb3, 0x29, 0x57, 0xff, 0xed, 0xa2, 0xf9, 0xb2, 0x3b, 0x6d,
	0x6a, 0xbe, 0x46, 0x67, 0xc1, 0xe9, 0x7d, 0x5c, 0xf1, 0xf9, 0xdf, 0x2f, 0xb3, 0x8f, 0x2b, 0xf3,
	0x35, 0x9a, 0x85, 0xf4, 0xf0, 0xcf, 0x16, 0x40, 0x9c, 0xcd, 0x5e, 0x30, 0x7d, 0x1b, 0xc7, 0x45,
	0x0e, 0xc1, 0xc9, 0x59, 0x73, 0x1c, 0xdb, 0xbc, 0xe0, 0x53, 0xb8, 0x31, 0x91, 0x93, 0x38, 0x3d,
	0x75, 0x8f, 0xa4, 0x97, 0xb8, 0x5e, 0x18, 0xc6, 0xbe, 0x87, 0x69, 0xd6, 0xe1, 0x69, 0x26, 0xf5,
	0xa0, 0xb3, 0x59, 0xdb, 0x5a, 0x74, 0x06, 0x4c, 0xb9, 0x23, 0xbd, 0x64, 0xdb, 0x12, 0xbe, 0x40,
	0xb9, 0xb8, 0x09, 0x6b, 0x55, 0xf5, 0xf8, 0xf0, 0x27, 0xd2, 0xcf, 0xf4, 0xa0, 0x4b, 0x6a, 0xab,
	0xa5, 0xda, 0x43, 0x16, 0x54, 0xf8, 0x9c, 0xe8, 0x98, 0xc7, 0xf4, 0xaa, 0x7c, 0x4e, 0x85, 0xd8,
	0xfe, 0x16, 0xf4, 0x0d, 0x3f, 0xd5, 0xda, 0x90, 0xfb, 0x44, 0xee, 0x32, 0xee, 0x68, 0xcd, 0xcc,
	0xaf, 0xc2, 0xaa, 0xe7, 0x67, 0xea, 0x58, 0xba, 0xe3, 0x38, 0x8d, 0xf3, 0x4c, 0x45, 0x52, 0x53,
	0xa6, 0xb7, 0xe4, 0xf4, 0x59, 0xf0, 0xdd, 0x02, 0x17, 0x37, 0xa0, 0xe9, 0x8f, 0x63, 0xd7, 0xf7,
	0xc2, 0x50, 0x0f, 0x5e, 0xde, 0xac, 0x6d, 0xd5, 0x9d, 0x86, 0x3f, 0x8e, 0x77, 0xb0, 0x3d, 0xfc,
	0x59, 0x1d, 0x7a, 0x33, 0x79, 0x85, 0xb8, 0x06, 0x0d, 0x4e, 0x4c, 0x82, 0x13, 0x93, 0x8f, 0xaf,
	0x50, 0xa6, 0x11, 0x9c, 0x88, 0x01, 0xac, 0xa8, 0xe8, 0x48, 0xa6, 0x2a, 0xa3, 0x9c, 0xbb, 0xe1,
	0xd8, 0xa6, 0x58, 0x87, 0xa5, 0x30, 0x1e, 0x2b, 0x4e, 0xad, 0x1b, 0x0e, 0x37, 0xe8, 0xd9, 0xa9,
	0xf4, 0x32, 0xe9, 0x06, 0x87, 0x26, 0x9d, 0x6e, 0x30, 0xb0, 0x7b, 0x28, 0x5e, 0x81, 0x96, 0x11,
	0xa2, 0xf9, 0xc1, 0x12, 0x89, 0x81, 0x21, 0xf4, 0x09, 0xa7, 0x53, 0xe7, 0x89, 0x4c, 0xdd, 0x5c,
	0xcb, 0x74, 0xb0, 0xcc, 0xd9, 0x38, 0x21, 0x07, 0x5a, 0xa6, 0x62, 0x13, 0x5a, 0xa9, 0x4c, 0x42,
	0xe5, 0x93, 0xdb, 0x83, 0x15, 0x92, 0x57, 0x21, 0x34, 0x70, 0x78, 0x9a, 0x78, 0x5a, 0xbb, 0x69,
	0xa8, 0x07, 0x0d, 0x36, 0xc0, 0x88, 0x13, 0x6a, 0x4e, 0x6c, 0xa3, 0x48, 0xf2, 0x0a, 0x0d, 0xd5,
	0x44, 0x65, 0x83, 0x26, 0x75, 0xb8, 0x57, 0xe2, 0xf7, 0x10, 0x16, 0xfb, 0xb0, 0x8e, 0x5a, 0x4f,
	0xe3, 0x34, 0x70, 0x8f, 0xbd, 0x50, 0x05, 0x6e, 0x1e, 0x65, 0x2a, 0xa4, 0x35, 0x76, 0x5e, 0x90,
	0x78, 0x90, 0x87, 0x61, 0x99, 0xe4, 0x0b, 0xab, 0xff, 0x25, 0xaa, 0x1f, 0xa0, 0xb6, 0xb8, 0x02,
	0xcb, 0x7e, 0x1c, 0x8d, 0xd4, 0x78, 0xd0, 0xa2, 0x7c, 0xda, 0xb4, 0x70, 0xd8, 0x26, 0x72, 0x72,
	0x28, 0x53, 0x37, 0x1e, 0x0d, 0xda, 0x9b, 0xf5, 0xad, 0x25, 0xa7, 0xc1, 0xc0, 0xc3, 0xd1, 0xf0,
	0x4f, 0xea, 0xb0, 0x36, 0x27, 0x67, 0x13, 0xaf, 0x42, 0xbb, 0x4c, 0xfe, 0x8a, 0xa9, 0x6b, 0x15,
	0x99, 0x5c, 0x70, 0x22, 0x5e, 0x87, 0x6e, 0xfc, 0x34, 0x92, 0xa9, 0x5b, 0xcc, 0x2f, 0x57, 0x4e,
	0x6d, 0x42, 0x1d, 0x33, 0xc9, 0xd7, 0xa1, 0x21, 0x23, 0x3f, 0x0e, 0x54, 0x34, 0x36, 0x85, 0x52,
	0xd1, 0xc6, 0x05, 0x80, 0x1d, 0xf4, 0x32, 0x49, 0xd3, 0xd9, 0x74, 0x6c, 0x53, 0x6c, 0xc0, 0xb2,
	0xef, 0x66, 0xa7, 0x09, 0x4f, 0x64, 0xd3, 0x59, 0xf2, 0xf7, 0x4f, 0x13, 0x89, 0x93, 0xac, 0xb4,
	0x9b, 0xc9, 0x49, 0x42, 0x4a, 0x3c, 0x89, 0xa0, 0xf4, 0xbe, 0x41, 0x68, 0x2d, 0x87, 0x61, 0xfc,
	0xd4, 0x2d, 0x87, 0x5c, 0x9b, 0xb9, 0xec, 0x93, 0x60, 0xa7, 0xc4, 0xe7, 0xce, 0x58, 0x63, 0xfe,
	0x8c, 0x61, 0x29, 0x97, 0xc6, 0xcf, 0x64, 0xe4, 0x9e, 0xa8, 0x80, 0xa6, 0xb5, 0xe3, 0x34, 0x19,
	0xf9, 0xa1, 0x0a, 0xc4, 0x07, 0xb0, 0x31, 0x51, 0x91, 0x9a, 0xe4, 0x13, 0x77, 0x92, 0x87, 0x99,
	0x3a, 0xf1, 0xfc, 0x8c, 0x98, 0x40, 0xcc, 0x35, 0x23, 0xbc, 0x6f, 0x65, 0xa8, 0xf3, 0x19, 0xbc,
	0x58, 0x96, 0x66, 0x18, 0x1a, 0x42, 0xd7, 0xf7, 0x32, 0x2f, 0x8c, 0xc7, 0x2e, 0x8e, 0x32, 0x55,
	0x7a, 0x0d, 0xe7, 0x5a, 0xc1, 0xb9, 0x87, 0x94, 0x1d, 0x66, 0xe0, 0x8c, 0x0d, 0x0f, 0xa0, 0x37,
	0x53, 0xbc, 0x08, 0x01, 0x8b, 0x58, 0x76, 0xd3, 0x6c, 0x35, 0x1d, 0xfa, 0x1f, 0xf7, 0x92, 0x3e,
	0x8a, 0x53, 0xde, 0x63, 0x4d, 0x87, 0x1b, 0x38, 0xf4, 0x51, 0x3e, 0x91, 0xa9, 0xf2, 0x69, 0x56,
	0xea, 0x8e, 0x6d, 0x0e, 0xff, 0x5f, 0x1d, 0x56, 0x4c, 0xde, 0x8d, 0xe3, 0x1d, 0xfb, 0x7e, 0x9e,
	0xa6, 0x5c, 0x7c, 0xd6, 0x88, 0x09, 0x16, 0xda, 0xce, 0xc4, 0x67, 0xb0, 0xac, 0xe3, 0x3c, 0xf5,
	0x25, 0x59, 0xef, 0x9e, 0x53, 0x1a, 0x1a, 0x73, 0x37, 0xf7, 0x88, 0x8a, 0x33, 0xe9, 0x18, 0x35,
	0xf1, 0x6d, 0x68, 0xfa, 0xa1, 0x92, 0x51, 0xe6, 0xaa, 0x84, 0x3c, 0x69, 0x7d, 0xf0, 0xca, 0xb9,
	0xeb, 0x7f, 0x2f, 0x4b, 0x29, 0x3b, 0x67, 0x8d, 0xbb, 0x09, 0x2e, 0x6d, 0x1c, 0xaf, 0x50, 0x1e,
	0xcb, 0xd0, 0x2c, 0xa1, 0x46, 0x18, 0x8f, 0xef, 0x61, 0x1b, 0x9d, 0x37, 0x05, 0x80, 0x9b, 0xa8,
	0x80, 0x16, 0xd2, 0x92, 0x03, 0x06, 0x7a, 0xa4, 0x02, 0x5e, 0x7e, 0x51, 0x26, 0xa3, 0x8c, 0x56,
	0x12, 0x2d, 0x3f, 0x6a, 0x8a, 0xef, 0x42, 0xdf, 0x0b, 0x02, 0x85, 0xf3, 0xef, 0x85, 0x6e, 0x48,
	0x11, 0x71, 0xe5, 0x12, 0x75, 0x4a, 0xaf, 0xd4, 0xc2, 0xb6, 0x1e, 0x7e, 0x04, 0x50, 0x76, 0x5a,
	0x08, 0xe8, 0xda, 0x19, 0x63, 0xb4, 0xff, 0x82, 0x58, 0x83, 0xde, 0xf6, 0xc4, 0x7b, 0x16, 0x47,
	0x4e, 0x60, 0xc1, 0xda, 0xf0, 0xe7, 0x75, 0x58, 0x31, 0xb5, 0x08, 0xce, 0x69, 0xe4, 0x4d, 0xa4,
	0x9d, 0x53, 0xfc, 0x5f, 0xbc, 0x06, 0x1d, 0x9a, 0x82, 0x28, 0xc3, 0xf8, 0x91, 0x4b, 0x33, 0xb7,
	0x6d, 0x03, 0x7e, 0x89, 0x98, 0xf8, 0x10, 0x16, 0xf3, 0x48, 0x65, 0x97, 0x1d, 0x55, 0x22, 0x8b,
	0xef, 0x00, 0x1c, 0xc6, 0xb1, 0x35, 0xbb, 0x78, 0x39, 0xd5, 0x26, 0xaa, 0xf0, 0x43, 0x3f, 0xc7,
	0x30, 0xaa, 0xa5, 0x35, 0xb0, 0x74, 0x39, 0x03, 0x40, 0x3a, 0x6c, 0xe1, 0xe3, 0x62, 0x49, 0x2d,
	0x5f, 0x4e, 0xd9, 0x2e, 0xa5, 0xcf, 0xa1, 0xc5, 0xff, 0xb9, 0x23, 0x15, 0x4a, 0xda, 0xf5, 0x97,
	0x79, 0x34, 0xeb, 0xdc, 0x56, 0x61, 0xd5, 0x02, 0x4e, 0x39, 0xc5, 0x82, 0xcb, 0x5b, 0xc0, 0x09,
	0x1f, 0xfe, 0x67, 0x1d, 0x56, 0x4c, 0xf9, 0x79, 0x99, 0x10, 0x5a, 0x7d, 0x39, 0x2e, 0x4c, 0xbf,
	0x1c, 0x6f, 0x40, 0xd3, 0x14, 0x17, 0xc1, 0x09, 0x4d, 0xe1, 0x92, 0xd3, 0xe0, 0x5a, 0x21, 0x38,
	0x11, 0x7d, 0xa8, 0xe3, 0x92, 0x5e, 0xa4, 0xfd, 0x88, 0xff, 0x62, 0x2c, 0xf3, 0x92, 0xe2, 0x5d,
	0xe5, 0xd2, 0x8a, 0xe1, 0xd0, 0xd9, 0xab, 0xe0, 0x0f, 0x70, 0xf1, 0xe0, 0x9b, 0x92, 0xb7, 0x9c,
	0x17, 0x04, 0xa9, 0x59, 0xfa, 0xc0, 0xd0, 0x76, 0x10, 0xa4, 0xe2, 0x33, 0xe8, 0xd8, 0x8d, 0xa3,
	0x33, 0x2f, 0xcd, 0xcc, 0x50, 0x5e, 0x74, 0xe8, 0xd4, 0x36, 0x0a, 0x7b, 0xc8, 0x17, 0xdf, 0x02,
	0xa0, 0x08, 0xc8, 0xda, 0x8d, 0xe7, 0x6a, 0x37, 0x91, 0xcd, 0xaa, 0x9f, 0x40, 0xab, 0xa8, 0x2b,
	0x52, 0x7e, 0x81, 0x5e, 0xac, 0x0b, 0xb6, 0xda, 0x49, 0x33, 0xf1, 0x29, 0xb4, 0x31, 0x33, 0x94,
	0xae, 0x7f, 0xe4, 0x45, 0x63, 0x69, 0xde, 0xa7, 0x17, 0x1e, 0x96, 0x11, 0x7f, 0x87, 0xe8, 0x18,
	0x0f, 0x9e, 0x7a, 0x0a, 0x37, 0x9d, 0x09, 0xbe, 0xb6, 0x49, 0x31, 0x14, 0x89, 0x74, 0x68, 0x86,
	0x31, 0x14, 0x1b, 0xc3, 0xaf, 0xc0, 0xda, 0x9c, 0x42, 0x7f, 0xde, 0x86, 0x1d, 0xfe, 0x5e, 0x0d,
	0x36, 0xe6, 0x96, 0xec, 0xe2, 0x0d, 0xe8, 0x56, 0x0f, 0x00, 0x8a, 0x75, 0xd2, 0xa9, 0x94, 0xf2,
	0xc1, 0x89, 0x78, 0x07, 0x44, 0xa0, 0xf4, 0x63, 0x37, 0xf1, 0xd2, 0x4c, 0x71, 0x8e, 0x5d, 0xac,
	0x99, 0x3e, 0x4a, 0x1e, 0x59, 0xc1, 0xec, 0xba, 0xaa, 0x4f, 0xaf, 0xab, 0x32, 0x4b, 0x58, 0xac,
	0x66, 0x09, 0xc3, 0x9f, 0xb6, 0x60, 0x99, 0xf3, 0x47, 0xac, 0x38, 0x4c, 0x8e, 0x59, 0xc9, 0xe3,
	0xc9, 0xad, 0xf3, 0xf2, 0x6c, 0x56, 0x9c, 0xaa, 0x38, 0xf4, 0x2c, 0x84, 0x2b, 0xda, 0x9a, 0x0d,
	0x4c, 0xc0, 0x6a, 0x18, 0x16, 0x6d, 0x16, 0x23, 0xd4, 0x7e, 0x9c, 0x48, 0x93, 0x2a, 0xb4, 0x18,
	0xdb, 0x43, 0x08, 0x0b, 0x00, 0xed, 0x1f, 0xc9, 0x20, 0x0f, 0x65, 0xf5, 0x4c, 0x12, 0x2e, 0x38,
	0x93, 0xdc, 0xb3, 0xfc, 0x4a, 0x01, 0xa0, 0xcf, 0x60, 0x58, 0x0b, 0xd9, 0xdc, 0xba, 0x30, 0xdb,
	0xba, 0xe0, 0xcc, 0xf0, 0x3e, 0x67, 0xdb, 0x65, 0x2d, 0x34, 0x99, 0x06, 0xb0, 0x02, 0xf4, 0x93,
	0x7c, 0x6a, 0xf8, 0xda, 0x64, 0x6f, 0x7e, 0x69, 0xb5, 0xf3, 0xe8, 0xa0, 0x3a, 0x76, 0x5d, 0x3f,
	0xc9, 0xab, 0x03, 0x77, 0x07, 0x10, 0xa9, 0x1e, 0x5e, 0x74, 0x2e, 0x28, 0xdf, 0x77, 0x1e, 0x1d,
	0x94, 0xc7, 0x16, 0x1d, 0x3f, 0xc9, 0x2b, 0x27, 0x16, 0xc6, 0x52, 0xa5, 0x7c, 0xea, 0x5e, 0x6c,
	0xa9, 0xec, 0x23, 0x5a, 0xaa, 0x54, 0x7b, 0xfb, 0x20, 0x22, 0x99, 0x3d, 0x8d, 0xd3, 0xc7, 0x55,
	0xbf, 0x7a, 0x17, 0x14, 0xa5, 0x0f, 0x98, 0x5e, 0xfa, 0xb6, 0x1a, 0xcd, 0x20, 0x53, 0x56, 0x2b,
	0x3e, 0xf6, 0x9f, 0x6f, 0xb5, 0xf4, 0xd3, 0x5a, 0xad, 0xf8, 0xfa, 0x3d, 0xe8, 0xd1, 0xde, 0xa9,
	0x38, 0xba, 0x7a, 0x41, 0x39, 0xbe, 0xab, 0x74, 0xc5, 0xcb, 0x6e, 0x50, 0x6d, 0xd2, 0x41, 0x2b,
	0x19, 0x9b, 0x2a, 0x71, 0xc5, 0x05, 0x07, 0xad, 0x68, 0x6e, 0xea, 0xa0, 0x35, 0x98, 0x06, 0x4a,
	0xff, 0x2a, 0x5d, 0x5e, 0x7b, 0x8e, 0x7f, 0x65, 0x7f, 0xc9, 0xbf, 0x4a, 0x67, 0xc7, 0x70, 0x6d,
	0x26, 0x50, 0x54, 0xba, 0xbd, 0x4e, 0x66, 0xbf, 0x7a, 0xae, 0xd9, 0x22, 0x88, 0x94, 0xfd, 0xbf,
	0x1a, 0xcc, 0xc5, 0xb5, 0x98, 0xc0, 0x8d, 0xd9, 0x88, 0x54, 0x1d, 0x92, 0x0d, 0x7a, 0xd4, 0xd7,
	0x9e, 0xff, 0xa8, 0xea, 0xd8, 0x5c, 0x0b, 0xce, 0x91, 0xcc, 0xeb, 0x57, 0x65, 0xb8, 0xae, 0x5c,
	0xb6, 0x5f, 0xe5, 0xb8, 0x4d, 0xf7, 0xab, 0x32, 0x80, 0x77, 0xe0, 0x55, 0x7c, 0x45, 0xbb, 0x81,
	0x4a, 0xc9, 0xc0, 0xa9, 0x3b, 0x27, 0xf0, 0xbe, 0x4c, 0x41, 0xf5, 0x25, 0x24, 0xee, 0x5a, 0xde,
	0xee, 0x6c, 0x14, 0xfe, 0x08, 0xae, 0x9e, 0x50, 0x3a, 0x7f, 0x56, 0xff, 0x15, 0xfe, 0xc6, 0x84,
	0xe2, 0x33, 0x6a, 0x6f, 0x42, 0x8f, 0xd4, 0x72, 0x5d, 0x1c, 0x26, 0x6c, 0x52, 0xe1, 0xde, 0x41,
	0xf8, 0x40, 0x9b, 0x13, 0x84, 0xe1, 0xef, 0xd4, 0x61, 0xf5, 0x4c, 0xe0, 0x15, 0xb7, 0x60, 0x91,
	0xea, 0xa6, 0x1a, 0xe5, 0xe3, 0xef, 0x5f, 0x2e, 0x5c, 0x1b, 0x84, 0x32, 0x73, 0x52, 0x17, 0x7b,
	0xd0, 0xd2, 0x32, 0x1c, 0xb9, 0x47, 0xb1, 0xce, 0x24, 0x87, 0xeb, 0xd6, 0x07, 0xef, 0x5d, 0xce,
	0xda, 0x9e, 0x0c, 0x47, 0x77, 0x48, 0xef, 0xce, 0x0b, 0x0e, 0xe8, 0xa2, 0x25, 0x1e, 0x01, 0x78,
	0x94, 0xeb, 0xba, 0x69, 0xa0, 0x4d, 0x5e, 0xfa, 0xee, 0xe5, 0x6c, 0x9a, 0x1c, 0x79, 0x77, 0xef,
	0xce, 0x0b, 0x4e, 0xd3, 0xb3, 0x09, 0xb3, 0xf8, 0x18, 0x28, 0xf7, 0x74, 0x33, 0x35, 0xb9, 0xcc,
	0xeb, 0xbe, 0x81, 0x64, 0x6c, 0x0e, 0x1f, 0x00, 0x94, 0x7d, 0x16, 0x57, 0x40, 0xec, 0xdd, 0xba,
	0x77, 0xdb, 0xbd, 0xf3, 0x70, 0x6f, 0xff, 0xd6, 0xae, 0xbb, 0xf7, 0xa3, 0xbd, 0xfd, 0x5b, 0xf7,
	0xfb, 0x2f, 0x88, 0x0d, 0x58, 0xdd, 0xbe, 0xbf, 0xfd, 0xe3, 0x87, 0x0f, 0x5c, 0x67, 0x77, 0xcf,
	0xc2, 0x35, 0xb1, 0x0a, 0x9d, 0x3b, 0xb7, 0x9c, 0x87, 0xdf, 0x3b, 0xb0, 0xd0, 0xc2, 0x17, 0xcb,
	0xb0, 0x88, 0xcb, 0x1f, 0x27, 0xe5, 0xc6, 0x05, 0x03, 0x82, 0xe5, 0x30, 0x0e, 0x69, 0x25, 0x41,
	0x28, 0xda, 0x62, 0x08, 0x6d, 0x2f, 0xf5, 0x8f, 0x54, 0x26, 0xfd, 0x2c, 0x4f, 0x8b, 0xa4, 0xbe,
	0x8a, 0x61, 0x9e, 0x17, 0x27, 0x32, 0xf5, 0x30, 0x2d, 0x31, 0x27, 0x41, 0xe6, 0x5d, 0xd9, 0x2b,
	0x70, 0xf3, 0x1a, 0xbf, 0x0e, 0x0d, 0x2c, 0x8a, 0xd1, 0x0b, 0x5b, 0x1b, 0xd9, 0xb6, 0x78, 0x0b,
	0x7a, 0xf6, 0x7f, 0x77, 0xe4, 0x4d, 0x54, 0x78, 0x6a, 0xb2, 0xc5, 0xae, 0x85, 0x6f, 0x13, 0x8a,
	0xcf, 0x2b, 0x88, 0xf6, 0x28, 0x8c, 0x33, 0xc6, 0xc2, 0x80, 0x2d, 0x3e, 0x3f, 0x84, 0x8d, 0x63,
	0x95, 0x66, 0xb9, 0x17, 0xaa, 0x67, 0xe6, 0x58, 0x95, 0xfd, 0x5b, 0x21, 0xfe, 0xfa, 0xb4, 0xd0,
	0x38, 0xf9, 0x06, 0x74, 0x1f, 0xcb, 0x34, 0x92, 0x61, 0x61, 0xbd, 0x41, 0xec, 0x0e, 0xa3, 0xd6,
	0xf6, 0xb7, 0xe1, 0x7a, 0x91, 0x4b, 0x17, 0x49, 0x84, 0x8c, 0x32, 0x35, 0x52, 0x32, 0xa5, 0x2c,
	0xb1, 0xe9, 0x0c, 0x2c, 0xc3, 0x8c, 0x7f, 0x21, 0x1f, 0xfe, 0x61, 0x03, 0xae, 0x9f, 0xbf, 0xa2,
	0x30, 0x25, 0x4a, 0xe5, 0xd8, 0xe6, 0x38, 0x4d, 0xc7, 0xb4, 0xd0, 0x37, 0x15, 0xe9, 0xcc, 0x8b,
	0x7c, 0xe9, 0xfa, 0xa1, 0xa7, 0xb5, 0x99, 0x91, 0x8e, 0x45, 0x77, 0x10, 0xa4, 0x43, 0x09, 0x4b,
	0x53, 0x81, 0x99, 0x0d, 0xb0, 0xd0, 0xdd, 0x00, 0xed, 0x63, 0xac, 0xca, 0xb5, 0x99, 0x06, 0xd3,
	0xa2, 0xc3, 0x8a, 0x63, 0x4f, 0x85, 0xde, 0xa1, 0x0a, 0x55, 0x76, 0xea, 0x3e, 0x8b, 0x23, 0x9b,
	0xb4, 0xf7, 0xab, 0x82, 0x1f, 0xc7, 0x91, 0x14, 0xef, 0xc2, 0x5a, 0x92, 0x1f, 0x86, 0xca, 0x0f,
	0x4f, 0x5d, 0xcf, 0xf7, 0xa5, 0xd6, 0xea, 0x30, 0xb4, 0x47, 0x20, 0xc2, 0x8a, 0xb6, 0x0b, 0x09,
	0xe6, 0x80, 0x74, 0x16, 0xe1, 0x7a, 0xcf, 0xcc, 0x09, 0xc8, 0x0a, 0xb5, 0xb7, 0x9f, 0x89, 0xef,
	0xc0, 0x0d, 0x2d, 0xfd, 0x38, 0x0a, 0xbc, 0xf4, 0xd4, 0x3d, 0xeb, 0x02, 0xcf, 0xc0, 0xb5, 0x82,
	0xb2, 0x3d, 0xeb, 0xcb, 0x1b, 0xd0, 0xf5, 0x3d, 0xd7, 0x97, 0x29, 0x8e, 0xaf, 0x8f, 0x79, 0x31,
	0xcf, 0x40, 0xc7, 0xf7, 0x76, 0x4a, 0x50, 0x7c, 0x02, 0xd7, 0xbd, 0x3c, 0x8b, 0xf9, 0xb3, 0x7a,
	0xf1, 0x91, 0x3d, 0x4f, 0xc6, 0xa9, 0x17, 0xf0, 0x6e, 0x6d, 0x38, 0x57, 0x91, 0x41, 0xdf, 0xd6,
	0xcd, 0x54, 0x1f, 0xb0, 0xb8, 0x54, 0xf6, 0x7e, 0x32, 0x47, 0xb9, 0x55, 0x51, 0x46, 0xc2, 0x8c,
	0xf2, 0xe7, 0xf0, 0x62, 0x42, 0xaf, 0xbd, 0x54, 0x06, 0xee, 0xc4, 0x53, 0x58, 0xd5, 0xd3, 0xfc,
	0x3c, 0x55, 0x51, 0x10, 0x3f, 0x35, 0x69, 0xfc, 0xf5, 0x82, 0x73, 0xbf, 0xa4, 0xfc, 0x80, 0x18,
	0xe2, 0x1b, 0x70, 0xb5, 0xb4, 0x80, 0xc5, 0x4d, 0x9e, 0x58, 0xe5, 0x2e, 0x29, 0x6f, 0x14, 0xe2,
	0x2f, 0x48, 0x6a, 0xf4, 0x1e, 0xc1, 0x95, 0xd0, 0xcb, 0xa4, 0xce, 0xdc, 0x54, 0xea, 0x2c, 0x4e,
	0x31, 0x89, 0xe7, 0xe8, 0xd4, 0x79, 0x6e, 0x74, 0x5a, 0x67, 0x4d, 0xa7, 0x50, 0x44, 0x91, 0xf8,
	0x0c, 0x5e, 0x34, 0xcf, 0x4f, 0x65, 0x86, 0x4b, 0x3a, 0x8e, 0xdc, 0x44, 0xa6, 0x2a, 0x0e, 0xdc,
	0xc0, 0x3b, 0xe5, 0x13, 0xe0, 0x25, 0xe7, 0x1a, 0x73, 0x1c, 0x4b, 0x79, 0x44, 0x8c, 0x5d, 0xef,
	0x54, 0xe3, 0x5e, 0x9f, 0x78, 0x3a, 0x33, 0x27, 0x9f, 0x14, 0x79, 0xfa, 0xbc, 0xd7, 0x19, 0x3e,
	0x30, 0x28, 0xbe, 0x78, 0x54, 0xa4, 0x32, 0xe5, 0x85, 0x6e, 0x70, 0xc8, 0x25, 0xe4, 0xaa, 0x5d,
	0xf0, 0x04, 0xef, 0x1e, 0x52, 0x01, 0xf9, 0x2d, 0x30, 0xe7, 0xaa, 0x74, 0x28, 0x24, 0x9e, 0x5f,
	0xde, 0x19, 0xf6, 0x76, 0x86, 0xab, 0x58, 0x46, 0x47, 0x38, 0xce, 0x81, 0x3b, 0x89, 0x23, 0x95,
	0xc5, 0x58, 0x42, 0x0f, 0xd6, 0x78, 0x15, 0x5b, 0xd1, 0xfd, 0x42, 0x22, 0xbe, 0x0e, 0x57, 0x12,
	0x2f, 0xf5, 0x26, 0x12, 0xfd, 0xc7, 0x4a, 0x96, 0x73, 0xf4, 0x5c, 0x0f, 0xb6, 0x38, 0xaa, 0x14,
	0xd2, 0x6d, 0x14, 0xee, 0xf1, 0xce, 0x9a, 0xd2, 0x4a, 0xc6, 0x5a, 0xbb, 0x32, 0xc2, 0x01, 0x0d,
	0x06, 0x5f, 0xa1, 0x27, 0x95, 0x5a, 0x8f, 0xc6, 0x5a, 0xdf, 0x62, 0xd9, 0xf0, 0x77, 0x6b, 0x20,
	0xce, 0x56, 0x0c, 0xe2, 0x6d, 0x58, 0x0d, 0x63, 0x2f, 0x70, 0xbd, 0x63, 0x99, 0x7a, 0x63, 0xe9,
	0xbe, 0x3f, 0x51, 0x1c, 0x29, 0x6a, 0x4e, 0x0f, 0x05, 0xdb, 0x8c, 0x23, 0x7c, 0x86, 0xfb, 0x11,
	0x72, 0x17, 0xce, 0x70, 0x11, 0xc6, 0x92, 0x6e, 0xda, 0x2e, 0x91, 0xeb, 0x44, 0xee, 0x57, 0x0d,
	0x23, 0x3e, 0xfc, 0xa3, 0x65, 0xe8, 0xcd, 0xd4, 0x1d, 0x18, 0x79, 0xb2, 0x38, 0xf3, 0x42, 0x93,
	0x25, 0xd4, 0x28, 0x4b, 0x00, 0x82, 0xf8, 0x68, 0xff, 0x55, 0x68, 0xfb, 0x1e, 0xf6, 0xc8, 0x30,
	0x16, 0x88, 0xd1, 0x62, 0x8c, 0x29, 0xaf, 0x41, 0xe7, 0x30, 0x1f, 0x8d, 0x64, 0x6a, 0x3f, 0x12,
	0xd4, 0x89, 0xd3, 0x36, 0x20, 0x93, 0xe8, 0xf8, 0x53, 0x4a, 0xc3, 0x58, 0x24, 0x46, 0x13, 0x11,
	0x16, 0xbf, 0x05, 0xbd, 0xa7, 0xa9, 0xca, 0x24, 0xae, 0x41, 0xc3, 0x59, 0xe2, 0x4f, 0x0d, 0x05,
	0xcc, 0xc4, 0x57, 0xa0, 0x15, 0xa8, 0x34, 0x3b, 0x35, 0xa4, 0x65, 0x76, 0x98, 0xa0, 0xe2, 0x41,
	0x3a, 0xf4, 0x0e, 0x8d, 0x7c, 0x85, 0x1f, 0x84, 0x48, 0xd1, 0x9f, 0x89, 0x97, 0x24, 0x45, 0x7f,
	0x1a, 0xdc, 0x1f, 0xc6, 0x98, 0xf2, 0x36, 0xac, 0x26, 0x38, 0x9a, 0x5c, 0x3e, 0x1b, 0x5e, 0x93,
	0x78, 0x3d, 0x14, 0x70, 0x15, 0x5e, 0x98, 0x33, 0x5f, 0x3e, 0x98, 0x06, 0x6c, 0x8e, 0x31, 0xa6,
	0xd0, 0x3b, 0x60, 0x8a, 0xd4, 0xe2, 0x5c, 0xcc, 0xa2, 0xc5, 0x08, 0x98, 0x38, 0x1a, 0x5a, 0x5e,
	0x9b, 0x47, 0xa0, 0x80, 0x99, 0xf8, 0x26, 0xf4, 0xf4, 0x53, 0x2f, 0xa9, 0x26, 0x77, 0xfc, 0xa5,
	0xa8, 0x83, 0x70, 0x91, 0xdc, 0x89, 0x2d, 0xe8, 0x13, 0xaf, 0x3a, 0xbf, 0xfc, 0x6d, 0xa8, 0x8b,
	0xf8, 0x7e, 0x39, 0xc7, 0xef, 0xc3, 0xc6, 0x51, 0x3e, 0x96, 0x2e, 0x76, 0x4e, 0xbb, 0x5a, 0x3d,
	0xb3, 0x0e, 0xac, 0x13, 0x5d, 0xa0, 0xf0, 0x11, 0xca, 0xf6, 0xd4, 0xb3, 0xd2, 0x89, 0x8a, 0x0a,
	0xce, 0xe3, 0x60, 0x83, 0x9d, 0x28, 0xc8, 0xb7, 0x53, 0x29, 0xd1, 0x89, 0x0a, 0x8f, 0x5c, 0x19,
	0x5c, 0x61, 0x27, 0x0a, 0x22, 0x79, 0x22, 0x6e, 0xc2, 0x5a, 0x85, 0x99, 0x4a, 0x2d, 0xd3, 0x63,
	0x19, 0x0c, 0xae, 0xf2, 0xd7, 0xa9, 0x82, 0xec, 0x18, 0x01, 0xae, 0xfd, 0xaa, 0xd3, 0x79, 0x9a,
	0x84, 0xb9, 0x1e, 0x0c, 0x88, 0xde, 0x2f, 0x3d, 0x66, 0x9c, 0x5e, 0x94, 0x95, 0xc3, 0x2d, 0xee,
	0xde, 0xcb, 0x4c, 0xae, 0x08, 0x38, 0x2d, 0xfe, 0x55, 0x0d, 0xba, 0xd3, 0x05, 0xb5, 0x58, 0x87,
	0xa5, 0x49, 0x1c, 0x48, 0x7b, 0x2e, 0xce, 0x0d, 0xec, 0x1d, 0x6d, 0x84, 0xea, 0x98, 0xf1, 0x81,
	0x4a, 0x97, 0xf0, 0x72, 0xbc, 0x6e, 0x40, 0x53, 0x27, 0x12, 0x43, 0xd6, 0xd1, 0x33, 0xb3, 0x41,
	0x1b, 0x04, 0xdc, 0x3f, 0x7a, 0x46, 0x27, 0x17, 0xb1, 0xff, 0x58, 0x66, 0xae, 0x1f, 0xe7, 0x51,
	0x46, 0xbb, 0x63, 0xc9, 0x69, 0x31, 0xb6, 0x83, 0x10, 0x8e, 0x4e, 0x72, 0x74, 0xaa, 0x15, 0x9d,
	0xf1, 0xc7, 0xa9, 0x34, 0x4c, 0x3e, 0x91, 0x5e, 0xb5, 0xa2, 0x9d, 0x38, 0x95, 0xcc, 0xa7, 0xc8,
	0x30, 0x9e, 0xa5, 0x2f, 0xf3, 0x61, 0x8f, 0x91, 0x14, 0xec, 0xe1, 0x5b, 0xd0, 0xae, 0xd6, 0xfc,
	0xe2, 0x2a, 0xac, 0x90, 0x96, 0x0a, 0x6c, 0x3e, 0x83, 0xcd, 0xbb, 0xc1, 0xf0, 0xf7, 0xeb, 0xc4,
	0x2c, 0xe3, 0x07, 0x32, 0x93, 0xbc, 0x72, 0xe8, 0xb4, 0xec, 0x27, 0x39, 0x96, 0x20, 0xaf, 0x42,
	0x1b, 0xdf, 0x15, 0xf8, 0x9e, 0xf1, 0x65, 0x94, 0x99, 0x08, 0xd6, 0x42, 0xec, 0x11, 0x43, 0xb8,
	0x31, 0x4c, 0x22, 0x66, 0x49, 0x3c, 0x30, 0x1d, 0x46, 0x2d, 0xed, 0x55, 0x68, 0xab, 0x20, 0x94,
	0x05, 0x69, 0x91, 0x2d, 0x21, 0x56, 0xa1, 0x44, 0xca, 0x2f, 0x29, 0x4b, 0x4c, 0x41, 0xac, 0xf2,
	0x30, 0x15, 0x3f, 0xf5, 0x54, 0x56, 0x90, 0x96, 0xf9, 0x61, 0x8c, 0x5a, 0x1a, 0x66, 0x62, 0xe9,
	0x93, 0x82, 0xb3, 0x42, 0x1c, 0x50, 0xe9, 0x13, 0x4b, 0xc0, 0x5d, 0x15, 0x8f, 0x32, 0xb7, 0xca,
	0x6a, 0x10, 0xab, 0x8b, 0xf8, 0xdd, 0x92, 0xf9, 0x1a, 0x74, 0x74, 0x26, 0xbd, 0xb0, 0xa0, 0x35,
	0x89, 0xd6, 0x26, 0xb0, 0x42, 0x1a, 0xe7, 0xf8, 0xae, 0xb7, 0x24, 0x60, 0x12, 0x81, 0x96, 0xf4,
	0x0e, 0x08, 0x26, 0x4d, 0x75, 0xb2, 0xc5, 0x61, 0x9e, 0x24, 0x0f, 0xca, 0x9e, 0x0e, 0xbf, 0x05,
	0xfd, 0xd9, 0x83, 0x12, 0x8e, 0x41, 0x99, 0x4c, 0x47, 0x9e, 0x2f, 0xdd, 0x4a, 0xe5, 0xd0, 0x29,
	0x50, 0x7c, 0x2d, 0x0f, 0xff, 0xa6, 0x56, 0xe8, 0x4e, 0xbd, 0x22, 0xec, 0x89, 0x4a, 0x39, 0xcd,
	0x60, 0x20, 0x9c, 0xea, 0x07, 0xf0, 0x7a, 0x96, 0x7a, 0x91, 0x9e, 0xa8, 0xcc, 0xcd, 0x8e, 0xd2,
	0x38, 0x1f, 0x1f, 0x25, 0x79, 0xc6, 0xdb, 0x01, 0xbd, 0x75, 0x39, 0x0d, 0x34, 0xaf, 0x8e, 0x4d,
	0xcb, 0xdd, 0x2f, 0xa8, 0xb4, 0x45, 0x1e, 0xc9, 0x74, 0x8f, 0x78, 0xe2, 0x1e, 0xbc, 0x96, 0x4a,
	0x5f, 0x62, 0xbc, 0xbc, 0xc8, 0x1c, 0xbf, 0x65, 0x5e, 0x31, 0xd4, 0xf3, 0xac, 0x0d, 0xdf, 0x83,
	0xce, 0xd4, 0x71, 0x0c, 0xbd, 0x41, 0xe4, 0xb1, 0x9a, 0x1e, 0x08, 0x60, 0x88, 0x46, 0xe1, 0x67,
	0x35, 0xe8, 0xcd, 0x1c, 0xb9, 0x60, 0x2a, 0xcc, 0x67, 0x36, 0xe5, 0x37, 0x68, 0x3a, 0x84, 0xe1,
	0x63, 0x76, 0x12, 0x51, 0xcd, 0x6c, 0x0e, 0x25, 0x11, 0xa0, 0xb2, 0xf0, 0x45, 0x68, 0x16, 0xa7,
	0x85, 0x26, 0xaf, 0x2f, 0x01, 0x2a, 0x8d, 0xd2, 0xf8, 0x58, 0x61, 0xe2, 0x29, 0x03, 0x57, 0xc5,
	0x09, 0xbf, 0x1a, 0x3b, 0x4e, 0xaf, 0x82, 0xdf, 0x8d, 0x13, 0x8d, 0x86, 0x64, 0xe4, 0xa7, 0xa7,
	0x09, 0xd6, 0xd2, 0xfc, 0x69, 0xba, 0x04, 0x86, 0x3f, 0x5d, 0xe4, 0x5e, 0x96, 0xb3, 0x76, 0x81,
	0xc3, 0x9f, 0xc0, 0xf5, 0x54, 0x7a, 0x81, 0x6b, 0xaa, 0xbd, 0x38, 0x3a, 0x33, 0x4b, 0x35, 0xe7,
	0x2a, 0x32, 0x1e, 0x16, 0x84, 0x72, 0x72, 0x3e, 0x02, 0x12, 0x69, 0x77, 0x22, 0xd3, 0xb1, 0x0c,
	0x66, 0x27, 0xa4, 0xe6, 0xac, 0x93, 0xf8, 0x3e, 0x49, 0x4b, 0xb5, 0xf7, 0x61, 0x83, 0x27, 0x90,
	0x9e, 0x5c, 0x51, 0xe2, 0xdd, 0x2c, 0x48, 0xe8, 0x48, 0xaf, 0xa2, 0xb2, 0x05, 0x7d, 0xef, 0x78,
	0xcc, 0x0a, 0x98, 0xd6, 0x46, 0xfe, 0xa9, 0xd9, 0xd8, 0x5d, 0xef, 0x78, 0x8c, 0xdc, 0x7b, 0x8c,
	0x8a, 0x4f, 0xe1, 0x06, 0x65, 0x09, 0xe7, 0xf4, 0x88, 0x37, 0xfa, 0x80, 0x28, 0xf3, 0xba, 0xf4,
	0x31, 0xb0, 0x6c, 0x5e, 0x9f, 0x38, 0x00, 0x6c, 0xb0, 0x7c, 0xb6, 0x53, 0x1f, 0xc3, 0x80, 0x3b,
	0x85, 0xe2, 0x4c, 0x46, 0x55, 0x45, 0x8e, 0x09, 0xdc, 0xe9, 0x1f, 0xb0, 0xb8, 0x54, 0x7c, 0x1b,
	0xcb, 0xb6, 0xb1, 0xcb, 0x4e, 0xdb, 0xbe, 0x71, 0x78, 0xe8, 0x79, 0xc7, 0x63, 0xe4, 0x4b, 0xdb,
	0xb9, 0xd7, 0x01, 0xbb, 0xeb, 0x3e, 0xc9, 0x65, 0xce, 0xef, 0x19, 0x0a, 0x11, 0x4b, 0x4e, 0xdb,
	0x3b, 0x1e, 0x7f, 0x1f, 0x41, 0x7c, 0xc9, 0x60, 0x56, 0x9c, 0x67, 0xaa, 0x28, 0x9b, 0x6d, 0x8c,
	0x68, 0xf3, 0xe8, 0x56, 0x44, 0x36, 0x4a, 0x7c, 0x13, 0xae, 0xcc, 0x3f, 0xae, 0x13, 0x2f, 0x03,
	0x4c, 0xf0, 0xad, 0x90, 0xc4, 0x2a, 0xca, 0xec, 0xf6, 0x28, 0x91, 0xe1, 0x2f, 0x6b, 0x30, 0x38,
	0xef, 0xf8, 0xed, 0x9c, 0x8f, 0x0c, 0xb5, 0xf3, 0x3f, 0x32, 0x14, 0x8b, 0x74, 0x61, 0x7a, 0x91,
	0xbe, 0x05, 0xbd, 0x91, 0x0a, 0xa5, 0x79, 0x41, 0xd0, 0xde, 0xe2, 0xed, 0xd3, 0x2d, 0x61, 0xda,
	0x61, 0xd3, 0xc4, 0x38, 0xc9, 0x6c, 0x8d, 0x5c, 0x21, 0x3e, 0x4c, 0x32, 0xca, 0xc3, 0x4a, 0xaf,
	0x2a, 0x5f, 0xb7, 0x3a, 0x05, 0x4a, 0xbb, 0xff, 0x37, 0x6b, 0x33, 0x23, 0x53, 0xee, 0xa9, 0x5f,
	0xaf, 0x73, 0x2f, 0x01, 0x54, 0x52, 0x34, 0x0e, 0x7e, 0xcd, 0xbc, 0x48, 0xcf, 0x66, 0x32, 0xef,
	0xfa, 0x6c, 0xe6, 0x3d, 0xfc, 0xd5, 0x22, 0x74, 0xa7, 0x6f, 0xb4, 0x4d, 0x7f, 0xd1, 0xab, 0xcd,
	0x7c, 0xd1, 0x5b, 0x87, 0x25, 0xbe, 0x53, 0xb3, 0x40, 0xdf, 0xf4, 0xb8, 0x81, 0x5e, 0xf0, 0x63,
	0xa8, 0x82, 0xe4, 0x2d, 0xda, 0x24, 0x84, 0x4a, 0x43, 0x01, 0x8b, 0x69, 0xfc, 0x54, 0x9b, 0xef,
	0x80, 0xf4, 0x3f, 0x25, 0x98, 0x74, 0x5d, 0xde, 0x3d, 0x0c, 0x1f, 0x6b, 0xf7, 0x48, 0xf1, 0x0b,
	0xb5, 0xee, 0x74, 0x18, 0xfe, 0x22, 0x7c, 0xac, 0xef, 0x28, 0x7e, 0x15, 0x56, 0x78, 0xb8, 0x51,
	0x69, 0xaf, 0xd5, 0x9d, 0x6e, 0x49, 0xc4, 0x7d, 0x8a, 0xd9, 0x4b, 0x95, 0x89, 0xd9, 0xba, 0x92,
	0xbc, 0xb9, 0xea, 0xce, 0x6a, 0x49, 0xde, 0x65, 0xc1, 0x2c, 0xdf, 0x6c, 0x2f, 0xda, 0x53, 0x53,
	0x7c, 0xb3, 0xb1, 0x70, 0x8f, 0xf0, 0xf5, 0x87, 0xc2, 0xe1, 0x26, 0x51, 0xdb, 0x84, 0x5a, 0x7f,
	0xdf, 0x84, 0x5e, 0x85, 0x45, 0xee, 0x02, 0xf7, 0xab, 0xa0, 0x91, 0xb7, 0x94, 0x3b, 0x15, 0x3c,
	0xeb, 0x6c, 0x8b, 0xa8, 0xfd, 0x82, 0x6a, 0x7d, 0x9d, 0x66, 0x5b, 0x57, 0xdb, 0x33, 0xec, 0x8a,
	0xa7, 0x99, 0x9c, 0x24, 0x15, 0x17, 0x3a, 0xec, 0x29, 0xa2, 0x85, 0x07, 0x6f, 0xc3, 0x6a, 0xc9,
	0xb2, 0x26, 0xbb, 0x44, 0xec, 0x59, 0xa2, 0xb5, 0x38, 0x84, 0xce, 0x61, 0xf8, 0x98, 0xc3, 0x24,
	0xcd, 0x71, 0x8f, 0x93, 0x9f, 0xc3, 0xf0, 0x31, 0xda, 0xa2, 0x59, 0x7e, 0x1d, 0xba, 0xc8, 0xe1,
	0x78, 0x43, 0xa4, 0x3e, 0xa7, 0x19, 0x87, 0xe1, 0x63, 0x0a, 0x36, 0x74, 0xa0, 0xf9, 0x8b, 0x1a,
	0x5c, 0x3d, 0xe7, 0x8e, 0xe5, 0x99, 0x1f, 0x11, 0xd4, 0xfe, 0xd7, 0x7e, 0x44, 0xb0, 0x70, 0xd1,
	0x8f, 0x08, 0x76, 0x00, 0x2a, 0x67, 0xf4, 0xf5, 0xcb, 0xdf, 0x60, 0xad, 0xa8, 0x0d, 0xff, 0xb8,
	0x06, 0xed, 0xea, 0x8d, 0xd4, 0x8b, 0xb7, 0xd1, 0xcc, 0x85, 0x95, 0xc5, 0x33, 0x17, 0x56, 0x06,
	0xb0, 0x92, 0xe6, 0x11, 0x8d, 0x22, 0xbf, 0x8e, 0x6c, 0x13, 0x23, 0x8c, 0xb9, 0x1f, 0xeb, 0xc6,
	0x79, 0x96, 0xe4, 0xf6, 0x52, 0x48, 0xc7, 0xa0, 0x0f, 0x09, 0xc4, 0x9c, 0xcf, 0xd2, 0xe8, 0xd7,
	0x0b, 0xe6, 0x74, 0xb3, 0x6d, 0x40, 0xfa, 0xe9, 0xc2, 0xf0, 0x0f, 0x9a, 0xb0, 0x36, 0xe7, 0x26,
	0x2a, 0xa6, 0xba, 0xe5, 0x9d, 0xd6, 0xf2, 0x4a, 0x40, 0x71, 0x3f, 0x35, 0x38, 0x41, 0xfb, 0x05,
	0xa5, 0x92, 0x94, 0x14, 0x7a, 0x14, 0x36, 0xef, 0x40, 0xef, 0x58, 0xc9, 0xa7, 0x6e, 0x20, 0x47,
	0x74, 0x34, 0x63, 0x7e, 0x84, 0x72, 0x89, 0xcb, 0x0a, 0x5d, 0xd4, 0xdb, 0x2d, 0xd4, 0xc4, 0x5d,
	0xba, 0x82, 0x95, 0x4f, 0x22, 0x4d, 0xdf, 0x83, 0xcf, 0x3b, 0x8f, 0x9f, 0xd3, 0x99, 0x9b, 0x3b,
	0xa4, 0xe7, 0x58, 0x7d, 0x71, 0x00, 0x2d, 0x3f, 0x8e, 0x74, 0x96, 0x7a, 0x2a, 0xca, 0xf4, 0x60,
	0x89, 0xcc, 0x7d, 0xf8, 0x6b, 0x98, 0xb3, 0xba, 0x4e, 0xd5, 0x0e, 0xa5, 0x59, 0x32, 0xd5, 0x4a,
	0xe3, 0x1b, 0x55, 0xf2, 0x98, 0xd8, 0x13, 0xe8, 0x12, 0xa7, 0x61, 0x79, 0x19, 0x60, 0xa4, 0xc2,
	0x70, 0xe4, 0xe1, 0x43, 0x68, 0x62, 0x96, 0x9c, 0x0a, 0x82, 0x6f, 0xac, 0x23, 0x4f, 0xbb, 0xb1,
	0x0a, 0xec, 0xfd, 0xbd, 0x95, 0x23, 0x4f, 0x3f, 0x54, 0xf4, 0x0b, 0x81, 0x01, 0x8a, 0xcc, 0x05,
	0x44, 0x3e, 0xf2, 0x3d, 0x52, 0x61, 0x90, 0xca, 0x88, 0xc2, 0x51, 0xc3, 0xb9, 0x72, 0xe4, 0xe9,
	0xbb, 0xa5, 0x78, 0xc7, 0x48, 0x71, 0x3d, 0xa2, 0x66, 0x16, 0x7b, 0x3a, 0x33, 0x87, 0x9a, 0xf8,
	0x94, 0x7d, 0x6c, 0xcf, 0xdc, 0x1b, 0x6b, 0x5d, 0xfa, 0xde, 0x58, 0xfb, 0xfc, 0x7b, 0x63, 0x5f,
	0x03, 0x21, 0x4f, 0xfc, 0x30, 0xd7, 0xea, 0x58, 0x86, 0xa7, 0x6e, 0x88, 0x75, 0x26, 0x07, 0xa2,
	0x86, 0xb3, 0x5a, 0x91, 0xdc, 0x23, 0xc1, 0xf5, 0x9f, 0xd7, 0x60, 0x99, 0x67, 0xaa, 0xb8, 0x98,
	0xb0, 0x50, 0xb9, 0x49, 0x84, 0xf9, 0xaf, 0x97, 0x79, 0xd5, 0x77, 0x74, 0x03, 0x01, 0x1a, 0xcf,
	0x5d, 0xe8, 0x04, 0x72, 0xe4, 0xe5, 0xe1, 0xaf, 0x79, 0x1f, 0xa8, 0x6d, 0xb4, 0xf8, 0x42, 0xcf,
	0x35, 0x68, 0x44, 0x71, 0xe6, 0x46, 0x79, 0x18, 0x9a, 0xdc, 0x77, 0x25, 0x8a, 0x33, 0xa4, 0xd3,
	0x27, 0x8a, 0x58, 0xf3, 0x02, 0xe6, 0xf2, 0xb6, 0x68, 0x5f, 0xff, 0xa7, 0x05, 0x80, 0x72, 0x4d,
	0x88, 0xf7, 0x60, 0x7d, 0x14, 0xa7, 0x52, 0x8d, 0x23, 0x77, 0xce, 0x16, 0x12, 0x46, 0xe6, 0x54,
	0x76, 0xd2, 0xbc, 0xee, 0x0a, 0xf3, 0x75, 0x8c, 0x7b, 0xca, 0x9f, 0xba, 0xde, 0x80, 0x6e, 0xb9,
	0xde, 0x70, 0x4b, 0x99, 0x14, 0xa4, 0x53, 0xa2, 0xbb, 0x72, 0x64, 0x2e, 0x2b, 0xd2, 0x4e, 0x59,
	0xa2, 0x4b, 0x94, 0xc5, 0xc2, 0xc7, 0x24, 0xc6, 0xb8, 0x66, 0x19, 0xcb, 0xc4, 0xe8, 0x1a, 0x78,
	0xc7, 0x10, 0x6f, 0xc2, 0x9a, 0x25, 0xe6, 0x49, 0xe0, 0x65, 0x66, 0x35, 0x73, 0x04, 0x59, 0x35,
	0xa2, 0x03, 0x92, 0xd0, 0xf8, 0x57, 0xf8, 0x81, 0x0c, 0xa5, 0xe5, 0x37, 0xa6, 0xf8, 0xbb, 0x24,
	0x21, 0xfe, 0x3b, 0x60, 0xc7, 0xc1, 0x9d, 0x78, 0x99, 0x7f, 0xc4, 0x74, 0x3e, 0x9b, 0xef, 0x1b,
	0xc9, 0x7d, 0x14, 0x20, 0x7b, 0xf8, 0x0f, 0x4b, 0xb0, 0x7a, 0xe6, 0x42, 0xfb, 0x65, 0x42, 0xd4,
	0x4b, 0x00, 0x33, 0x47, 0x26, 0x75, 0xa7, 0xa9, 0x8b, 0xd3, 0x92, 0x6b, 0xd0, 0xd0, 0xf2, 0x89,
	0xab, 0x7d, 0x2f, 0xb2, 0x77, 0x0b, 0xb5, 0x7c, 0xb2, 0xe7, 0x7b, 0x91, 0xd8, 0x84, 0x36, 0x8a,
	0x32, 0x3a, 0xcc, 0xf6, 0xec, 0x05, 0x26, 0xd0, 0xf2, 0xc9, 0x7e, 0x9e, 0xd0, 0xcb, 0xf3, 0x1a,
	0x34, 0x54, 0x70, 0xc2, 0xca, 0x9c, 0xb7, 0xac, 0xa8, 0xe0, 0x84, 0x94, 0x87, 0xd0, 0x41, 0x11,
	0x2a, 0x8f, 0x64, 0xe6, 0x1f, 0x99, 0x74, 0xa5, 0xa5, 0x82, 0x93, 0xfd, 0x3c, 0xb9, 0x8d, 0x90,
	0xb8, 0x0e, 0xcd, 0x88, 0x18, 0xca, 0xdc, 0xfb, 0xac, 0x3b, 0x2b, 0xd1, 0x7e, 0x9e, 0xdc, 0x8d,
	0x74, 0x29, 0xcb, 0x93, 0xc0, 0x64, 0x23, 0x24, 0x3b, 0x48, 0x82, 0x52, 0x16, 0xc8, 0xd0, 0xa4,
	0x1f, 0x24, 0xdb, 0x95, 0xa1, 0x78, 0x15, 0x3a, 0x2c, 0xa3, 0x1f, 0xea, 0x25, 0x36, 0xef, 0x00,
	0x94, 0xdf, 0x89, 0x33, 0x54, 0x7f, 0x11, 0x20, 0x72, 0x43, 0xaa, 0x79, 0xf3, 0xc4, 0x24, 0x1b,
	0x8d, 0xe8, 0x1e, 0x56, 0xb6, 0x79, 0xc2, 0xd2, 0x80, 0x5e, 0xf1, 0x79, 0x62, 0x92, 0x8b, 0x46,
	0xb4, 0x8b, 0xef, 0xf7, 0x3c, 0x11, 0x5f, 0x83, 0xb5, 0xc8, 0x9d, 0xc4, 0x81, 0xab, 0x15, 0x46,
	0x1d, 0xb3, 0xb1, 0x4c, 0x66, 0xd1, 0x8f, 0xee, 0xc7, 0xc1, 0x1e, 0x0a, 0xb6, 0x19, 0xc7, 0x6c,
	0x80, 0x2e, 0x8c, 0x97, 0x39, 0x88, 0xe0, 0x1c, 0x04, 0xd1, 0x22, 0x07, 0x19, 0x42, 0xa7, 0x64,
	0x61, 0x4a, 0xb5, 0xc6, 0x63, 0x65, 0x49, 0x98, 0x51, 0x99, 0xf1, 0x2c, 0x0d, 0xad, 0x17, 0xe3,
	0x59, 0xd8, 0xd9, 0x84, 0x76, 0xc1, 0x41, 0x33, 0x1b, 0xdc, 0x75, 0x43, 0x31, 0x79, 0x19, 0x85,
	0xbe, 0x8a, 0x9d, 0x2b, 0x9c, 0x97, 0x11, 0x5c, 0x58, 0xc2, 0xdc, 0xa9, 0xe4, 0xa1, 0xad, 0xab,
	0x26, 0x77, 0xb2, 0x34, 0xb4, 0x86, 0xac, 0x69, 0xa7, 0x06, 0x86, 0x55, 0xf5, 0x6a, 0x08, 0x9d,
	0x6c, 0xca, 0xad, 0x6b, 0xec, 0x79, 0x56, 0xfa, 0x35, 0xfc, 0xd3, 0x05, 0xe8, 0x4c, 0xfd, 0xb0,
	0xe2, 0x32, 0x2b, 0xfb, 0x73, 0x13, 0x1e, 0xf8, 0x32, 0xeb, 0x3b, 0xcf, 0xff, 0xb5, 0xc6, 0x4d,
	0xfa, 0x5b, 0xf9, 0x6e, 0xfe, 0xc9, 0x74, 0x02, 0x52, 0x7f, 0xfe, 0xfd, 0xb5, 0x4a, 0x72, 0xf2,
	0x0d, 0xb8, 0xea, 0x25, 0x49, 0x1a, 0x9f, 0xa8, 0x09, 0x06, 0x87, 0xd9, 0x4c, 0xa6, 0xe1, 0x6c,
	0x54, 0xc4, 0x0f, 0x0b, 0xbd, 0xe1, 0x01, 0x34, 0x0b, 0x3f, 0xc4, 0x2a, 0x74, 0xee, 0x6f, 0x3f,
	0x38, 0xd8, 0xbe, 0xe7, 0x7e, 0xb9, 0xbd, 0x73, 0x70, 0x70, 0xbf, 0xff, 0x82, 0xe8, 0x41, 0x6b,
	0xfb, 0x60, 0xff, 0xa1, 0x05, 0x6a, 0x42, 0x40, 0xd7, 0x70, 0xb6, 0x1f, 0x6c, 0xdf, 0xfb, 0xd1,
	0x8f, 0x6f, 0xf5, 0x17, 0x44, 0x1f, 0xda, 0x44, 0xb2, 0x48, 0x7d, 0xf8, 0x1f, 0x0b, 0xd0, 0x9f,
	0xfd, 0x29, 0x09, 0xbe, 0x30, 0xcc, 0xcf, 0x51, 0xca, 0xf4, 0x8b, 0x7f, 0x5d, 0xc2, 0xe7, 0x86,
	0x53, 0x43, 0xbc, 0x70, 0x76, 0x88, 0x2b, 0x61, 0xb4, 0x3e, 0x1d, 0x46, 0x0b, 0xcb, 0x65, 0x08,
	0x66, 0xcb, 0x18, 0x7d, 0x6f, 0x9f, 0x09, 0xd2, 0x97, 0xbc, 0x5a, 0x3a, 0x13, 0xc5, 0x5f, 0x02,
	0x50, 0xda, 0x4d, 0x52, 0x35, 0xf1, 0xd2, 0x53, 0xfb, 0x2b, 0x00, 0xa5, 0x1f, 0x31, 0x40, 0x3e,
	0x68, 0x37, 0x8f, 0xd4, 0x93, 0x5c, 0x9a, 0xaf, 0xa6, 0x0d, 0xa5, 0x0f, 0xa8, 0x4d, 0xb1, 0x49,
	0xf3, 0x85, 0x7d, 0x9b, 0x3e, 0x28, 0x4d, 0x17, 0xf0, 0x67, 0x32, 0x8f, 0xe6, 0x99, 0xcc, 0x03,
	0x1f, 0x4b, 0x7d, 0xa3, 0xe5, 0x65, 0x7e, 0x4b, 0x42, 0x08, 0x85, 0xe2, 0xff, 0xaa, 0x41, 0x77,
	0xfa, 0xf7, 0x35, 0x17, 0x8f, 0xf3, 0xf3, 0x23, 0x70, 0x11, 0x44, 0xeb, 0xd3, 0x41, 0xd4, 0x6c,
	0xe8, 0xd9, 0x08, 0xcc, 0x31, 0xd4, 0x6e, 0xae, 0xe7, 0x86, 0xd9, 0x33, 0xa1, 0x63, 0xe5, 0xf9,
	0xa1, 0xa3, 0x31, 0x1b, 0x3a, 0x86, 0xbf, 0x5d, 0x87, 0xb5, 0x39, 0xbf, 0xff, 0xc1, 0x55, 0x54,
	0xfe, 0x92, 0xa8, 0xdc, 0xa8, 0xc5, 0xaf, 0x82, 0xf8, 0x57, 0x05, 0xa1, 0x17, 0x8d, 0x73, 0x6f,
	0x5c, 0x64, 0x2d, 0xb6, 0x4d, 0x9f, 0xdb, 0xf9, 0x02, 0xb1, 0xfd, 0xdc, 0xce, 0xf7, 0x83, 0x71,
	0xd0, 0xf8, 0x76, 0xef, 0xa1, 0x8a, 0xcc, 0xf1, 0x41, 0x93, 0x91, 0x2f, 0x54, 0x54, 0xb9, 0x18,
	0xb9, 0x3c, 0xf5, 0xf3, 0x09, 0xba, 0x1d, 0xa0, 0xf3, 0x30, 0x33, 0xef, 0x5d, 0xd3, 0x12, 0x2f,
	0x42, 0xd3, 0x1b, 0x8f, 0x53, 0x39, 0xb6, 0xdf, 0xbf, 0x1b, 0x4e, 0x09, 0xa0, 0x96, 0xf9, 0x5c,
	0xcc, 0x29, 0xa1, 0x69, 0x61, 0x36, 0xab, 0xa5, 0x9f, 0xa7, 0x2a, 0x3b, 0xe5, 0xec, 0x5d, 0xa6,
	0xe6, 0x63, 0x76, 0xcf, 0xe2, 0xbb, 0x0c, 0xe3, 0x03, 0x42, 0xe9, 0x3d, 0x4e, 0xd2, 0x98, 0x7e,
	0xb7, 0x41, 0x0f, 0x28, 0x00, 0xbe, 0x54, 0x90, 0x2a, 0x3f, 0x33, 0xa9, 0x9f, 0x69, 0x61, 0x05,
	0x94, 0xca, 0x2c, 0x4f, 0x23, 0xed, 0x6a, 0x99, 0x51, 0xdd, 0xd9, 0x70, 0xc0, 0x40, 0x7b, 0x32,
	0xc3, 0xa1, 0x3b, 0x8e, 0x71, 0x3f, 0x86, 0x5c, 0x6d, 0x36, 0x9d, 0xa2, 0x3d, 0xfc, 0xad, 0x1a,
	0xac, 0x9e, 0xf9, 0xcd, 0xd4, 0x65, 0xe6, 0xe3, 0x7f, 0x74, 0x7c, 0x71, 0x03, 0x9a, 0x74, 0xc7,
	0x88, 0xa4, 0x8b, 0xe6, 0xb3, 0x8a, 0x0c, 0x47, 0x28, 0x3c, 0x5c, 0xa6, 0x58, 0xf9, 0xe1, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x03, 0x5a, 0x3b, 0xa7, 0x48, 0x40, 0x00, 0x00,
}
