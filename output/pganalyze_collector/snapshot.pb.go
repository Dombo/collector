// Code generated by protoc-gen-go.
// source: snapshot.proto
// DO NOT EDIT!

/*
Package pganalyze_collector is a generated protocol buffer package.

It is generated from these files:
	snapshot.proto

It has these top-level messages:
	FullSnapshot
	NullString
	NullTimestamp
	RoleReference
	DatabaseReference
	RoleInformation
	DatabaseInformation
	PostgresVersion
	LogLine
	Setting
	Backend
	TablespaceReference
	TablespaceInformation
	System
	SystemInformation
	SystemInformationSelfHosted
	SystemInformationRDS
	SchedulerStatistic
	MemoryStatistic
	CPUInformation
	CPUReference
	CPUStatistic
	NetworkReference
	NetworkStatistic
	DiskReference
	DiskInformation
	DiskStatistic
	DiskPartitionReference
	DiskPartitionInformation
	DiskPartitionStatistic
	RelationReference
	IndexReference
	FunctionReference
	QueryReference
	QueryInformation
	QueryStatistic
	QueryExplain
	RelationInformation
	RelationStatistic
	RelationEvent
	RelationBloatStatistic
	IndexInformation
	IndexStatistic
	IndexBloatStatistic
	FunctionInformation
	FunctionStatistic
*/
package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type LogLine_SourceType int32

const (
	LogLine_PostgresSource  LogLine_SourceType = 0
	LogLine_AmazonRdsSource LogLine_SourceType = 1
)

var LogLine_SourceType_name = map[int32]string{
	0: "PostgresSource",
	1: "AmazonRdsSource",
}
var LogLine_SourceType_value = map[string]int32{
	"PostgresSource":  0,
	"AmazonRdsSource": 1,
}

func (x LogLine_SourceType) String() string {
	return proto.EnumName(LogLine_SourceType_name, int32(x))
}
func (LogLine_SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type SystemInformation_SystemType int32

const (
	SystemInformation_SELF_HOSTED_SYSTEM SystemInformation_SystemType = 0
	SystemInformation_AMAZON_RDS_SYSTEM  SystemInformation_SystemType = 1
	SystemInformation_HEROKU_SYSTEM      SystemInformation_SystemType = 2
)

var SystemInformation_SystemType_name = map[int32]string{
	0: "SELF_HOSTED_SYSTEM",
	1: "AMAZON_RDS_SYSTEM",
	2: "HEROKU_SYSTEM",
}
var SystemInformation_SystemType_value = map[string]int32{
	"SELF_HOSTED_SYSTEM": 0,
	"AMAZON_RDS_SYSTEM":  1,
	"HEROKU_SYSTEM":      2,
}

func (x SystemInformation_SystemType) String() string {
	return proto.EnumName(SystemInformation_SystemType_name, int32(x))
}
func (SystemInformation_SystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

type RelationEvent_EventType int32

const (
	RelationEvent_MANUAL_VACUUM  RelationEvent_EventType = 0
	RelationEvent_AUTO_VACUUM    RelationEvent_EventType = 1
	RelationEvent_MANUAL_ANALYZE RelationEvent_EventType = 2
	RelationEvent_AUTO_ANALYZE   RelationEvent_EventType = 3
)

var RelationEvent_EventType_name = map[int32]string{
	0: "MANUAL_VACUUM",
	1: "AUTO_VACUUM",
	2: "MANUAL_ANALYZE",
	3: "AUTO_ANALYZE",
}
var RelationEvent_EventType_value = map[string]int32{
	"MANUAL_VACUUM":  0,
	"AUTO_VACUUM":    1,
	"MANUAL_ANALYZE": 2,
	"AUTO_ANALYZE":   3,
}

func (x RelationEvent_EventType) String() string {
	return proto.EnumName(RelationEvent_EventType_name, int32(x))
}
func (RelationEvent_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 0} }

type FullSnapshot struct {
	// Basic information about this snapshot
	SnapshotVersionMajor  int32                      `protobuf:"varint,1,opt,name=snapshot_version_major,json=snapshotVersionMajor" json:"snapshot_version_major,omitempty"`
	SnapshotVersionMinor  int32                      `protobuf:"varint,2,opt,name=snapshot_version_minor,json=snapshotVersionMinor" json:"snapshot_version_minor,omitempty"`
	CollectorVersion      string                     `protobuf:"bytes,3,opt,name=collector_version,json=collectorVersion" json:"collector_version,omitempty"`
	SnapshotUuid          string                     `protobuf:"bytes,10,opt,name=snapshot_uuid,json=snapshotUuid" json:"snapshot_uuid,omitempty"`
	CollectedAt           *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                     `protobuf:"varint,12,opt,name=collected_interval_secs,json=collectedIntervalSecs" json:"collected_interval_secs,omitempty"`
	// Per server (and hence snapshot)
	System                 *System                  `protobuf:"bytes,100,opt,name=system" json:"system,omitempty"`
	PostgresVersion        *PostgresVersion         `protobuf:"bytes,101,opt,name=postgres_version,json=postgresVersion" json:"postgres_version,omitempty"`
	RoleReferences         []*RoleReference         `protobuf:"bytes,102,rep,name=role_references,json=roleReferences" json:"role_references,omitempty"`
	DatabaseReferences     []*DatabaseReference     `protobuf:"bytes,103,rep,name=database_references,json=databaseReferences" json:"database_references,omitempty"`
	RoleInformations       []*RoleInformation       `protobuf:"bytes,110,rep,name=role_informations,json=roleInformations" json:"role_informations,omitempty"`
	DatabaseInformations   []*DatabaseInformation   `protobuf:"bytes,111,rep,name=database_informations,json=databaseInformations" json:"database_informations,omitempty"`
	Logs                   []*LogLine               `protobuf:"bytes,120,rep,name=logs" json:"logs,omitempty"`
	Backends               []*Backend               `protobuf:"bytes,121,rep,name=backends" json:"backends,omitempty"`
	Settings               []*Setting               `protobuf:"bytes,122,rep,name=settings" json:"settings,omitempty"`
	TablespaceReferences   []*TablespaceReference   `protobuf:"bytes,130,rep,name=tablespace_references,json=tablespaceReferences" json:"tablespace_references,omitempty"`
	TablespaceInformations []*TablespaceInformation `protobuf:"bytes,131,rep,name=tablespace_informations,json=tablespaceInformations" json:"tablespace_informations,omitempty"`
	// Per database
	QueryReferences         []*QueryReference         `protobuf:"bytes,200,rep,name=query_references,json=queryReferences" json:"query_references,omitempty"`
	RelationReferences      []*RelationReference      `protobuf:"bytes,201,rep,name=relation_references,json=relationReferences" json:"relation_references,omitempty"`
	IndexReferences         []*IndexReference         `protobuf:"bytes,202,rep,name=index_references,json=indexReferences" json:"index_references,omitempty"`
	FunctionReferences      []*FunctionReference      `protobuf:"bytes,203,rep,name=function_references,json=functionReferences" json:"function_references,omitempty"`
	QueryInformations       []*QueryInformation       `protobuf:"bytes,210,rep,name=query_informations,json=queryInformations" json:"query_informations,omitempty"`
	QueryStatistics         []*QueryStatistic         `protobuf:"bytes,211,rep,name=query_statistics,json=queryStatistics" json:"query_statistics,omitempty"`
	QueryExplains           []*QueryExplain           `protobuf:"bytes,212,rep,name=query_explains,json=queryExplains" json:"query_explains,omitempty"`
	RelationInformations    []*RelationInformation    `protobuf:"bytes,220,rep,name=relation_informations,json=relationInformations" json:"relation_informations,omitempty"`
	RelationStatistics      []*RelationStatistic      `protobuf:"bytes,221,rep,name=relation_statistics,json=relationStatistics" json:"relation_statistics,omitempty"`
	RelationBloatStatistics []*RelationBloatStatistic `protobuf:"bytes,222,rep,name=relation_bloat_statistics,json=relationBloatStatistics" json:"relation_bloat_statistics,omitempty"`
	RelationEvents          []*RelationEvent          `protobuf:"bytes,223,rep,name=relation_events,json=relationEvents" json:"relation_events,omitempty"`
	IndexInformations       []*IndexInformation       `protobuf:"bytes,224,rep,name=index_informations,json=indexInformations" json:"index_informations,omitempty"`
	IndexStatistics         []*IndexStatistic         `protobuf:"bytes,225,rep,name=index_statistics,json=indexStatistics" json:"index_statistics,omitempty"`
	IndexBloatStatistics    []*IndexBloatStatistic    `protobuf:"bytes,226,rep,name=index_bloat_statistics,json=indexBloatStatistics" json:"index_bloat_statistics,omitempty"`
	FunctionInformations    []*FunctionInformation    `protobuf:"bytes,227,rep,name=function_informations,json=functionInformations" json:"function_informations,omitempty"`
	FunctionStatistics      []*FunctionStatistic      `protobuf:"bytes,228,rep,name=function_statistics,json=functionStatistics" json:"function_statistics,omitempty"`
}

func (m *FullSnapshot) Reset()                    { *m = FullSnapshot{} }
func (m *FullSnapshot) String() string            { return proto.CompactTextString(m) }
func (*FullSnapshot) ProtoMessage()               {}
func (*FullSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FullSnapshot) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *FullSnapshot) GetSystem() *System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *FullSnapshot) GetPostgresVersion() *PostgresVersion {
	if m != nil {
		return m.PostgresVersion
	}
	return nil
}

func (m *FullSnapshot) GetRoleReferences() []*RoleReference {
	if m != nil {
		return m.RoleReferences
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseReferences() []*DatabaseReference {
	if m != nil {
		return m.DatabaseReferences
	}
	return nil
}

func (m *FullSnapshot) GetRoleInformations() []*RoleInformation {
	if m != nil {
		return m.RoleInformations
	}
	return nil
}

func (m *FullSnapshot) GetDatabaseInformations() []*DatabaseInformation {
	if m != nil {
		return m.DatabaseInformations
	}
	return nil
}

func (m *FullSnapshot) GetLogs() []*LogLine {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *FullSnapshot) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *FullSnapshot) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceReferences() []*TablespaceReference {
	if m != nil {
		return m.TablespaceReferences
	}
	return nil
}

func (m *FullSnapshot) GetTablespaceInformations() []*TablespaceInformation {
	if m != nil {
		return m.TablespaceInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryReferences() []*QueryReference {
	if m != nil {
		return m.QueryReferences
	}
	return nil
}

func (m *FullSnapshot) GetRelationReferences() []*RelationReference {
	if m != nil {
		return m.RelationReferences
	}
	return nil
}

func (m *FullSnapshot) GetIndexReferences() []*IndexReference {
	if m != nil {
		return m.IndexReferences
	}
	return nil
}

func (m *FullSnapshot) GetFunctionReferences() []*FunctionReference {
	if m != nil {
		return m.FunctionReferences
	}
	return nil
}

func (m *FullSnapshot) GetQueryInformations() []*QueryInformation {
	if m != nil {
		return m.QueryInformations
	}
	return nil
}

func (m *FullSnapshot) GetQueryStatistics() []*QueryStatistic {
	if m != nil {
		return m.QueryStatistics
	}
	return nil
}

func (m *FullSnapshot) GetQueryExplains() []*QueryExplain {
	if m != nil {
		return m.QueryExplains
	}
	return nil
}

func (m *FullSnapshot) GetRelationInformations() []*RelationInformation {
	if m != nil {
		return m.RelationInformations
	}
	return nil
}

func (m *FullSnapshot) GetRelationStatistics() []*RelationStatistic {
	if m != nil {
		return m.RelationStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationBloatStatistics() []*RelationBloatStatistic {
	if m != nil {
		return m.RelationBloatStatistics
	}
	return nil
}

func (m *FullSnapshot) GetRelationEvents() []*RelationEvent {
	if m != nil {
		return m.RelationEvents
	}
	return nil
}

func (m *FullSnapshot) GetIndexInformations() []*IndexInformation {
	if m != nil {
		return m.IndexInformations
	}
	return nil
}

func (m *FullSnapshot) GetIndexStatistics() []*IndexStatistic {
	if m != nil {
		return m.IndexStatistics
	}
	return nil
}

func (m *FullSnapshot) GetIndexBloatStatistics() []*IndexBloatStatistic {
	if m != nil {
		return m.IndexBloatStatistics
	}
	return nil
}

func (m *FullSnapshot) GetFunctionInformations() []*FunctionInformation {
	if m != nil {
		return m.FunctionInformations
	}
	return nil
}

func (m *FullSnapshot) GetFunctionStatistics() []*FunctionStatistic {
	if m != nil {
		return m.FunctionStatistics
	}
	return nil
}

type NullString struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullString) Reset()                    { *m = NullString{} }
func (m *NullString) String() string            { return proto.CompactTextString(m) }
func (*NullString) ProtoMessage()               {}
func (*NullString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NullTimestamp struct {
	Valid bool                       `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullTimestamp) Reset()                    { *m = NullTimestamp{} }
func (m *NullTimestamp) String() string            { return proto.CompactTextString(m) }
func (*NullTimestamp) ProtoMessage()               {}
func (*NullTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NullTimestamp) GetValue() *google_protobuf.Timestamp {
	if m != nil {
		return m.Value
	}
	return nil
}

type RoleReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RoleReference) Reset()                    { *m = RoleReference{} }
func (m *RoleReference) String() string            { return proto.CompactTextString(m) }
func (*RoleReference) ProtoMessage()               {}
func (*RoleReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DatabaseReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DatabaseReference) Reset()                    { *m = DatabaseReference{} }
func (m *DatabaseReference) String() string            { return proto.CompactTextString(m) }
func (*DatabaseReference) ProtoMessage()               {}
func (*DatabaseReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RoleInformation struct {
	RoleIdx            int32          `protobuf:"varint,1,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Inherit            bool           `protobuf:"varint,2,opt,name=inherit" json:"inherit,omitempty"`
	Login              bool           `protobuf:"varint,3,opt,name=login" json:"login,omitempty"`
	CreateDb           bool           `protobuf:"varint,4,opt,name=create_db,json=createDb" json:"create_db,omitempty"`
	CreateRole         bool           `protobuf:"varint,5,opt,name=create_role,json=createRole" json:"create_role,omitempty"`
	SuperUser          bool           `protobuf:"varint,6,opt,name=super_user,json=superUser" json:"super_user,omitempty"`
	Replication        bool           `protobuf:"varint,7,opt,name=replication" json:"replication,omitempty"`
	BypassRls          bool           `protobuf:"varint,8,opt,name=bypass_rls,json=bypassRls" json:"bypass_rls,omitempty"`
	ConnectionLimit    int32          `protobuf:"varint,9,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	PasswordValidUntil *NullTimestamp `protobuf:"bytes,10,opt,name=password_valid_until,json=passwordValidUntil" json:"password_valid_until,omitempty"`
	Config             []string       `protobuf:"bytes,11,rep,name=config" json:"config,omitempty"`
	MemberOf           []int32        `protobuf:"varint,12,rep,name=member_of,json=memberOf" json:"member_of,omitempty"`
}

func (m *RoleInformation) Reset()                    { *m = RoleInformation{} }
func (m *RoleInformation) String() string            { return proto.CompactTextString(m) }
func (*RoleInformation) ProtoMessage()               {}
func (*RoleInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RoleInformation) GetPasswordValidUntil() *NullTimestamp {
	if m != nil {
		return m.PasswordValidUntil
	}
	return nil
}

type DatabaseInformation struct {
	DatabaseIdx      int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	OwnerRoleIdx     int32  `protobuf:"varint,2,opt,name=owner_role_idx,json=ownerRoleIdx" json:"owner_role_idx,omitempty"`
	Encoding         string `protobuf:"bytes,3,opt,name=encoding" json:"encoding,omitempty"`
	Collate          string `protobuf:"bytes,4,opt,name=collate" json:"collate,omitempty"`
	CType            string `protobuf:"bytes,5,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	IsTemplate       bool   `protobuf:"varint,6,opt,name=is_template,json=isTemplate" json:"is_template,omitempty"`
	AllowConnections bool   `protobuf:"varint,7,opt,name=allow_connections,json=allowConnections" json:"allow_connections,omitempty"`
	ConnectionLimit  int32  `protobuf:"varint,8,opt,name=connection_limit,json=connectionLimit" json:"connection_limit,omitempty"`
	// All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent transaction ID wraparound or to
	// allow pg_clog to be shrunk. It is the minimum of the per-table pg_class.relfrozenxid values.
	FrozenXid uint32 `protobuf:"varint,9,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	// All multixact IDs before this one have been replaced with a transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent multixact ID wraparound or to
	// allow pg_multixact to be shrunk. It is the minimum of the per-table pg_class.relminmxid values.
	MinimumMultixactXid uint32 `protobuf:"varint,10,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
}

func (m *DatabaseInformation) Reset()                    { *m = DatabaseInformation{} }
func (m *DatabaseInformation) String() string            { return proto.CompactTextString(m) }
func (*DatabaseInformation) ProtoMessage()               {}
func (*DatabaseInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type LogLine struct {
	OccurredAt      int64              `protobuf:"varint,1,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Source          LogLine_SourceType `protobuf:"varint,2,opt,name=source,enum=pganalyze.collector.LogLine_SourceType" json:"source,omitempty"`
	ClientIp        *NullString        `protobuf:"bytes,3,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	LogLevel        string             `protobuf:"bytes,4,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	BackendPid      int32              `protobuf:"varint,5,opt,name=backend_pid,json=backendPid" json:"backend_pid,omitempty"`
	Content         string             `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	AdditionalLines []*LogLine         `protobuf:"bytes,7,rep,name=additional_lines,json=additionalLines" json:"additional_lines,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LogLine) GetClientIp() *NullString {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *LogLine) GetAdditionalLines() []*LogLine {
	if m != nil {
		return m.AdditionalLines
	}
	return nil
}

type Setting struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Setting) GetUnit() *NullString {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Setting) GetBootValue() *NullString {
	if m != nil {
		return m.BootValue
	}
	return nil
}

func (m *Setting) GetResetValue() *NullString {
	if m != nil {
		return m.ResetValue
	}
	return nil
}

func (m *Setting) GetSource() *NullString {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Setting) GetSourceFile() *NullString {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Setting) GetSourceLine() *NullString {
	if m != nil {
		return m.SourceLine
	}
	return nil
}

type Backend struct {
	DatabaseIdx     int32                      `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	RoleIdx         int32                      `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	QueryIdx        int32                      `protobuf:"varint,3,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Pid             int64                      `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	ApplicationName string                     `protobuf:"bytes,5,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientAddr      string                     `protobuf:"bytes,6,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	XactStart       *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=xact_start,json=xactStart" json:"xact_start,omitempty"`
	QueryStart      *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=query_start,json=queryStart" json:"query_start,omitempty"`
	StateChange     *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=state_change,json=stateChange" json:"state_change,omitempty"`
	Waiting         bool                       `protobuf:"varint,11,opt,name=waiting" json:"waiting,omitempty"`
	State           string                     `protobuf:"bytes,12,opt,name=state" json:"state,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Backend) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *Backend) GetXactStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.XactStart
	}
	return nil
}

func (m *Backend) GetQueryStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.QueryStart
	}
	return nil
}

func (m *Backend) GetStateChange() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateChange
	}
	return nil
}

type TablespaceReference struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TablespaceReference) Reset()                    { *m = TablespaceReference{} }
func (m *TablespaceReference) String() string            { return proto.CompactTextString(m) }
func (*TablespaceReference) ProtoMessage()               {}
func (*TablespaceReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type TablespaceInformation struct {
	TablespaceIdx    int32    `protobuf:"varint,1,opt,name=tablespace_idx,json=tablespaceIdx" json:"tablespace_idx,omitempty"`
	DiskPartitionIdx int32    `protobuf:"varint,2,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	RoleIdx          int32    `protobuf:"varint,3,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Config           []string `protobuf:"bytes,4,rep,name=config" json:"config,omitempty"`
}

func (m *TablespaceInformation) Reset()                    { *m = TablespaceInformation{} }
func (m *TablespaceInformation) String() string            { return proto.CompactTextString(m) }
func (*TablespaceInformation) ProtoMessage()               {}
func (*TablespaceInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type System struct {
	SystemInformation             *SystemInformation          `protobuf:"bytes,1,opt,name=system_information,json=systemInformation" json:"system_information,omitempty"`
	SchedulerStatistic            *SchedulerStatistic         `protobuf:"bytes,10,opt,name=scheduler_statistic,json=schedulerStatistic" json:"scheduler_statistic,omitempty"`
	MemoryStatistic               *MemoryStatistic            `protobuf:"bytes,11,opt,name=memory_statistic,json=memoryStatistic" json:"memory_statistic,omitempty"`
	CpuInformation                *CPUInformation             `protobuf:"bytes,12,opt,name=cpu_information,json=cpuInformation" json:"cpu_information,omitempty"`
	CpuReferences                 []*CPUReference             `protobuf:"bytes,13,rep,name=cpu_references,json=cpuReferences" json:"cpu_references,omitempty"`
	CpuStatistics                 []*CPUStatistic             `protobuf:"bytes,14,rep,name=cpu_statistics,json=cpuStatistics" json:"cpu_statistics,omitempty"`
	NetworkReferences             []*NetworkReference         `protobuf:"bytes,15,rep,name=network_references,json=networkReferences" json:"network_references,omitempty"`
	NetworkStatistics             []*NetworkStatistic         `protobuf:"bytes,16,rep,name=network_statistics,json=networkStatistics" json:"network_statistics,omitempty"`
	DiskReferences                []*DiskReference            `protobuf:"bytes,17,rep,name=disk_references,json=diskReferences" json:"disk_references,omitempty"`
	DiskInformations              []*DiskInformation          `protobuf:"bytes,18,rep,name=disk_informations,json=diskInformations" json:"disk_informations,omitempty"`
	DiskStatistics                []*DiskStatistic            `protobuf:"bytes,19,rep,name=disk_statistics,json=diskStatistics" json:"disk_statistics,omitempty"`
	DiskPartitionReferences       []*DiskPartitionReference   `protobuf:"bytes,20,rep,name=disk_partition_references,json=diskPartitionReferences" json:"disk_partition_references,omitempty"`
	DiskPartitionInformations     []*DiskPartitionInformation `protobuf:"bytes,21,rep,name=disk_partition_informations,json=diskPartitionInformations" json:"disk_partition_informations,omitempty"`
	DiskPartitionStatistics       []*DiskPartitionStatistic   `protobuf:"bytes,22,rep,name=disk_partition_statistics,json=diskPartitionStatistics" json:"disk_partition_statistics,omitempty"`
	DataDirectoryDiskPartitionIdx int32                       `protobuf:"varint,30,opt,name=data_directory_disk_partition_idx,json=dataDirectoryDiskPartitionIdx" json:"data_directory_disk_partition_idx,omitempty"`
	XlogDiskPartitionIdx          int32                       `protobuf:"varint,31,opt,name=xlog_disk_partition_idx,json=xlogDiskPartitionIdx" json:"xlog_disk_partition_idx,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *System) GetSystemInformation() *SystemInformation {
	if m != nil {
		return m.SystemInformation
	}
	return nil
}

func (m *System) GetSchedulerStatistic() *SchedulerStatistic {
	if m != nil {
		return m.SchedulerStatistic
	}
	return nil
}

func (m *System) GetMemoryStatistic() *MemoryStatistic {
	if m != nil {
		return m.MemoryStatistic
	}
	return nil
}

func (m *System) GetCpuInformation() *CPUInformation {
	if m != nil {
		return m.CpuInformation
	}
	return nil
}

func (m *System) GetCpuReferences() []*CPUReference {
	if m != nil {
		return m.CpuReferences
	}
	return nil
}

func (m *System) GetCpuStatistics() []*CPUStatistic {
	if m != nil {
		return m.CpuStatistics
	}
	return nil
}

func (m *System) GetNetworkReferences() []*NetworkReference {
	if m != nil {
		return m.NetworkReferences
	}
	return nil
}

func (m *System) GetNetworkStatistics() []*NetworkStatistic {
	if m != nil {
		return m.NetworkStatistics
	}
	return nil
}

func (m *System) GetDiskReferences() []*DiskReference {
	if m != nil {
		return m.DiskReferences
	}
	return nil
}

func (m *System) GetDiskInformations() []*DiskInformation {
	if m != nil {
		return m.DiskInformations
	}
	return nil
}

func (m *System) GetDiskStatistics() []*DiskStatistic {
	if m != nil {
		return m.DiskStatistics
	}
	return nil
}

func (m *System) GetDiskPartitionReferences() []*DiskPartitionReference {
	if m != nil {
		return m.DiskPartitionReferences
	}
	return nil
}

func (m *System) GetDiskPartitionInformations() []*DiskPartitionInformation {
	if m != nil {
		return m.DiskPartitionInformations
	}
	return nil
}

func (m *System) GetDiskPartitionStatistics() []*DiskPartitionStatistic {
	if m != nil {
		return m.DiskPartitionStatistics
	}
	return nil
}

type SystemInformation struct {
	Type SystemInformation_SystemType `protobuf:"varint,1,opt,name=type,enum=pganalyze.collector.SystemInformation_SystemType" json:"type,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*SystemInformation_SelfHosted
	//	*SystemInformation_Rds
	Info     isSystemInformation_Info   `protobuf_oneof:"info"`
	BootTime *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=boot_time,json=bootTime" json:"boot_time,omitempty"`
}

func (m *SystemInformation) Reset()                    { *m = SystemInformation{} }
func (m *SystemInformation) String() string            { return proto.CompactTextString(m) }
func (*SystemInformation) ProtoMessage()               {}
func (*SystemInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isSystemInformation_Info interface {
	isSystemInformation_Info()
}

type SystemInformation_SelfHosted struct {
	SelfHosted *SystemInformationSelfHosted `protobuf:"bytes,2,opt,name=self_hosted,json=selfHosted,oneof"`
}
type SystemInformation_Rds struct {
	Rds *SystemInformationRDS `protobuf:"bytes,3,opt,name=rds,oneof"`
}

func (*SystemInformation_SelfHosted) isSystemInformation_Info() {}
func (*SystemInformation_Rds) isSystemInformation_Info()        {}

func (m *SystemInformation) GetInfo() isSystemInformation_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SystemInformation) GetSelfHosted() *SystemInformationSelfHosted {
	if x, ok := m.GetInfo().(*SystemInformation_SelfHosted); ok {
		return x.SelfHosted
	}
	return nil
}

func (m *SystemInformation) GetRds() *SystemInformationRDS {
	if x, ok := m.GetInfo().(*SystemInformation_Rds); ok {
		return x.Rds
	}
	return nil
}

func (m *SystemInformation) GetBootTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SystemInformation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SystemInformation_OneofMarshaler, _SystemInformation_OneofUnmarshaler, _SystemInformation_OneofSizer, []interface{}{
		(*SystemInformation_SelfHosted)(nil),
		(*SystemInformation_Rds)(nil),
	}
}

func _SystemInformation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelfHosted); err != nil {
			return err
		}
	case *SystemInformation_Rds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rds); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SystemInformation.Info has unexpected type %T", x)
	}
	return nil
}

func _SystemInformation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SystemInformation)
	switch tag {
	case 2: // info.self_hosted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationSelfHosted)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_SelfHosted{msg}
		return true, err
	case 3: // info.rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SystemInformationRDS)
		err := b.DecodeMessage(msg)
		m.Info = &SystemInformation_Rds{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SystemInformation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SystemInformation)
	// info
	switch x := m.Info.(type) {
	case *SystemInformation_SelfHosted:
		s := proto.Size(x.SelfHosted)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SystemInformation_Rds:
		s := proto.Size(x.Rds)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SystemInformationSelfHosted struct {
	Hostname             string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Architecture         string `protobuf:"bytes,2,opt,name=architecture" json:"architecture,omitempty"`
	OperatingSystem      string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Platform             string `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	PlatformFamily       string `protobuf:"bytes,5,opt,name=platform_family,json=platformFamily" json:"platform_family,omitempty"`
	PlatformVersion      string `protobuf:"bytes,6,opt,name=platform_version,json=platformVersion" json:"platform_version,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,7,opt,name=virtualization_system,json=virtualizationSystem" json:"virtualization_system,omitempty"`
	KernelVersion        string `protobuf:"bytes,8,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
}

func (m *SystemInformationSelfHosted) Reset()                    { *m = SystemInformationSelfHosted{} }
func (m *SystemInformationSelfHosted) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationSelfHosted) ProtoMessage()               {}
func (*SystemInformationSelfHosted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type SystemInformationRDS struct {
	Region                     string                     `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	InstanceClass              string                     `protobuf:"bytes,2,opt,name=instance_class,json=instanceClass" json:"instance_class,omitempty"`
	InstanceId                 string                     `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status                     string                     `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	AvailabilityZone           string                     `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone" json:"availability_zone,omitempty"`
	PubliclyAccessible         bool                       `protobuf:"varint,6,opt,name=publicly_accessible,json=publiclyAccessible" json:"publicly_accessible,omitempty"`
	MultiAz                    bool                       `protobuf:"varint,7,opt,name=multi_az,json=multiAz" json:"multi_az,omitempty"`
	SecondaryAvailabilityZone  string                     `protobuf:"bytes,8,opt,name=secondary_availability_zone,json=secondaryAvailabilityZone" json:"secondary_availability_zone,omitempty"`
	CaCertificate              string                     `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate" json:"ca_certificate,omitempty"`
	AutoMinorVersionUpgrade    bool                       `protobuf:"varint,10,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade" json:"auto_minor_version_upgrade,omitempty"`
	AutoMajorVersionUpgrade    bool                       `protobuf:"varint,11,opt,name=auto_major_version_upgrade,json=autoMajorVersionUpgrade" json:"auto_major_version_upgrade,omitempty"`
	PreferredMaintanenceWindow string                     `protobuf:"bytes,12,opt,name=preferred_maintanence_window,json=preferredMaintanenceWindow" json:"preferred_maintanence_window,omitempty"`
	PreferredBackupWindow      string                     `protobuf:"bytes,14,opt,name=preferred_backup_window,json=preferredBackupWindow" json:"preferred_backup_window,omitempty"`
	LatestRestorableTime       *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=latest_restorable_time,json=latestRestorableTime" json:"latest_restorable_time,omitempty"`
	BackupRetentionPeriodDays  int32                      `protobuf:"varint,15,opt,name=backup_retention_period_days,json=backupRetentionPeriodDays" json:"backup_retention_period_days,omitempty"`
	MasterUsername             string                     `protobuf:"bytes,16,opt,name=master_username,json=masterUsername" json:"master_username,omitempty"`
	InitialDbName              string                     `protobuf:"bytes,17,opt,name=initial_db_name,json=initialDbName" json:"initial_db_name,omitempty"`
	CreatedAt                  *google_protobuf.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	StorageProvisionedIops     int32                      `protobuf:"varint,19,opt,name=storage_provisioned_iops,json=storageProvisionedIops" json:"storage_provisioned_iops,omitempty"`
	StorageAllocatedGigabytes  int32                      `protobuf:"varint,20,opt,name=storage_allocated_gigabytes,json=storageAllocatedGigabytes" json:"storage_allocated_gigabytes,omitempty"`
	StorageEncrypted           bool                       `protobuf:"varint,21,opt,name=storage_encrypted,json=storageEncrypted" json:"storage_encrypted,omitempty"`
	StorageType                string                     `protobuf:"bytes,22,opt,name=storage_type,json=storageType" json:"storage_type,omitempty"`
	EnhancedMonitoring         bool                       `protobuf:"varint,23,opt,name=enhanced_monitoring,json=enhancedMonitoring" json:"enhanced_monitoring,omitempty"`
	ParameterApplyStatus       string                     `protobuf:"bytes,40,opt,name=parameter_apply_status,json=parameterApplyStatus" json:"parameter_apply_status,omitempty"`
	ParameterPgssEnabled       bool                       `protobuf:"varint,41,opt,name=parameter_pgss_enabled,json=parameterPgssEnabled" json:"parameter_pgss_enabled,omitempty"`
}

func (m *SystemInformationRDS) Reset()                    { *m = SystemInformationRDS{} }
func (m *SystemInformationRDS) String() string            { return proto.CompactTextString(m) }
func (*SystemInformationRDS) ProtoMessage()               {}
func (*SystemInformationRDS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SystemInformationRDS) GetLatestRestorableTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LatestRestorableTime
	}
	return nil
}

func (m *SystemInformationRDS) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type SchedulerStatistic struct {
	LoadAverage_1Min  float64 `protobuf:"fixed64,1,opt,name=load_average_1min,json=loadAverage1min" json:"load_average_1min,omitempty"`
	LoadAverage_5Min  float64 `protobuf:"fixed64,2,opt,name=load_average_5min,json=loadAverage5min" json:"load_average_5min,omitempty"`
	LoadAverage_15Min float64 `protobuf:"fixed64,3,opt,name=load_average_15min,json=loadAverage15min" json:"load_average_15min,omitempty"`
}

func (m *SchedulerStatistic) Reset()                    { *m = SchedulerStatistic{} }
func (m *SchedulerStatistic) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStatistic) ProtoMessage()               {}
func (*SchedulerStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type MemoryStatistic struct {
	TotalBytes         uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	CachedBytes        uint64 `protobuf:"varint,2,opt,name=cached_bytes,json=cachedBytes" json:"cached_bytes,omitempty"`
	BuffersBytes       uint64 `protobuf:"varint,3,opt,name=buffers_bytes,json=buffersBytes" json:"buffers_bytes,omitempty"`
	FreeBytes          uint64 `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes" json:"free_bytes,omitempty"`
	WritebackBytes     uint64 `protobuf:"varint,5,opt,name=writeback_bytes,json=writebackBytes" json:"writeback_bytes,omitempty"`
	DirtyBytes         uint64 `protobuf:"varint,6,opt,name=dirty_bytes,json=dirtyBytes" json:"dirty_bytes,omitempty"`
	SlabBytes          uint64 `protobuf:"varint,7,opt,name=slab_bytes,json=slabBytes" json:"slab_bytes,omitempty"`
	MappedBytes        uint64 `protobuf:"varint,8,opt,name=mapped_bytes,json=mappedBytes" json:"mapped_bytes,omitempty"`
	PageTablesBytes    uint64 `protobuf:"varint,9,opt,name=page_tables_bytes,json=pageTablesBytes" json:"page_tables_bytes,omitempty"`
	ActiveBytes        uint64 `protobuf:"varint,10,opt,name=active_bytes,json=activeBytes" json:"active_bytes,omitempty"`
	InactiveBytes      uint64 `protobuf:"varint,11,opt,name=inactive_bytes,json=inactiveBytes" json:"inactive_bytes,omitempty"`
	AvailableBytes     uint64 `protobuf:"varint,12,opt,name=available_bytes,json=availableBytes" json:"available_bytes,omitempty"`
	SwapUsedBytes      uint64 `protobuf:"varint,13,opt,name=swap_used_bytes,json=swapUsedBytes" json:"swap_used_bytes,omitempty"`
	SwapTotalBytes     uint64 `protobuf:"varint,14,opt,name=swap_total_bytes,json=swapTotalBytes" json:"swap_total_bytes,omitempty"`
	HugePagesSizeBytes uint64 `protobuf:"varint,20,opt,name=huge_pages_size_bytes,json=hugePagesSizeBytes" json:"huge_pages_size_bytes,omitempty"`
	HugePagesFree      uint64 `protobuf:"varint,21,opt,name=huge_pages_free,json=hugePagesFree" json:"huge_pages_free,omitempty"`
	HugePagesTotal     uint64 `protobuf:"varint,22,opt,name=huge_pages_total,json=hugePagesTotal" json:"huge_pages_total,omitempty"`
	HugePagesReserved  uint64 `protobuf:"varint,23,opt,name=huge_pages_reserved,json=hugePagesReserved" json:"huge_pages_reserved,omitempty"`
	HugePagesSurplus   uint64 `protobuf:"varint,24,opt,name=huge_pages_surplus,json=hugePagesSurplus" json:"huge_pages_surplus,omitempty"`
	ApplicationBytes   uint64 `protobuf:"varint,30,opt,name=application_bytes,json=applicationBytes" json:"application_bytes,omitempty"`
}

func (m *MemoryStatistic) Reset()                    { *m = MemoryStatistic{} }
func (m *MemoryStatistic) String() string            { return proto.CompactTextString(m) }
func (*MemoryStatistic) ProtoMessage()               {}
func (*MemoryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CPUInformation struct {
	Model             string  `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	CacheSizeBytes    int32   `protobuf:"varint,2,opt,name=cache_size_bytes,json=cacheSizeBytes" json:"cache_size_bytes,omitempty"`
	SpeedMhz          float64 `protobuf:"fixed64,3,opt,name=speed_mhz,json=speedMhz" json:"speed_mhz,omitempty"`
	SocketCount       int32   `protobuf:"varint,4,opt,name=socket_count,json=socketCount" json:"socket_count,omitempty"`
	PhysicalCoreCount int32   `protobuf:"varint,5,opt,name=physical_core_count,json=physicalCoreCount" json:"physical_core_count,omitempty"`
	LogicalCoreCount  int32   `protobuf:"varint,6,opt,name=logical_core_count,json=logicalCoreCount" json:"logical_core_count,omitempty"`
}

func (m *CPUInformation) Reset()                    { *m = CPUInformation{} }
func (m *CPUInformation) String() string            { return proto.CompactTextString(m) }
func (*CPUInformation) ProtoMessage()               {}
func (*CPUInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type CPUReference struct {
	CoreId string `protobuf:"bytes,1,opt,name=core_id,json=coreId" json:"core_id,omitempty"`
}

func (m *CPUReference) Reset()                    { *m = CPUReference{} }
func (m *CPUReference) String() string            { return proto.CompactTextString(m) }
func (*CPUReference) ProtoMessage()               {}
func (*CPUReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type CPUStatistic struct {
	CpuIdx           int32   `protobuf:"varint,1,opt,name=cpu_idx,json=cpuIdx" json:"cpu_idx,omitempty"`
	UserPercent      float64 `protobuf:"fixed64,2,opt,name=user_percent,json=userPercent" json:"user_percent,omitempty"`
	SystemPercent    float64 `protobuf:"fixed64,3,opt,name=system_percent,json=systemPercent" json:"system_percent,omitempty"`
	IdlePercent      float64 `protobuf:"fixed64,4,opt,name=idle_percent,json=idlePercent" json:"idle_percent,omitempty"`
	NicePercent      float64 `protobuf:"fixed64,5,opt,name=nice_percent,json=nicePercent" json:"nice_percent,omitempty"`
	IowaitPercent    float64 `protobuf:"fixed64,6,opt,name=iowait_percent,json=iowaitPercent" json:"iowait_percent,omitempty"`
	IrqPercent       float64 `protobuf:"fixed64,7,opt,name=irq_percent,json=irqPercent" json:"irq_percent,omitempty"`
	SoftIrqPercent   float64 `protobuf:"fixed64,8,opt,name=soft_irq_percent,json=softIrqPercent" json:"soft_irq_percent,omitempty"`
	StealPercent     float64 `protobuf:"fixed64,9,opt,name=steal_percent,json=stealPercent" json:"steal_percent,omitempty"`
	GuestPercent     float64 `protobuf:"fixed64,10,opt,name=guest_percent,json=guestPercent" json:"guest_percent,omitempty"`
	GuestNicePercent float64 `protobuf:"fixed64,11,opt,name=guest_nice_percent,json=guestNicePercent" json:"guest_nice_percent,omitempty"`
}

func (m *CPUStatistic) Reset()                    { *m = CPUStatistic{} }
func (m *CPUStatistic) String() string            { return proto.CompactTextString(m) }
func (*CPUStatistic) ProtoMessage()               {}
func (*CPUStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type NetworkReference struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *NetworkReference) Reset()                    { *m = NetworkReference{} }
func (m *NetworkReference) String() string            { return proto.CompactTextString(m) }
func (*NetworkReference) ProtoMessage()               {}
func (*NetworkReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type NetworkStatistic struct {
	NetworkIdx              int32  `protobuf:"varint,1,opt,name=network_idx,json=networkIdx" json:"network_idx,omitempty"`
	TransmitThroughputBytes uint64 `protobuf:"varint,2,opt,name=transmit_throughput_bytes,json=transmitThroughputBytes" json:"transmit_throughput_bytes,omitempty"`
	ReceiveThroughputBytes  uint64 `protobuf:"varint,3,opt,name=receive_throughput_bytes,json=receiveThroughputBytes" json:"receive_throughput_bytes,omitempty"`
}

func (m *NetworkStatistic) Reset()                    { *m = NetworkStatistic{} }
func (m *NetworkStatistic) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatistic) ProtoMessage()               {}
func (*NetworkStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type DiskReference struct {
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
}

func (m *DiskReference) Reset()                    { *m = DiskReference{} }
func (m *DiskReference) String() string            { return proto.CompactTextString(m) }
func (*DiskReference) ProtoMessage()               {}
func (*DiskReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type DiskInformation struct {
	DiskIdx   int32  `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	DiskType  string `protobuf:"bytes,2,opt,name=disk_type,json=diskType" json:"disk_type,omitempty"`
	Scheduler string `protobuf:"bytes,3,opt,name=scheduler" json:"scheduler,omitempty"`
}

func (m *DiskInformation) Reset()                    { *m = DiskInformation{} }
func (m *DiskInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskInformation) ProtoMessage()               {}
func (*DiskInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type DiskStatistic struct {
	DiskIdx                  int32   `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	ReadOperationsPerSecond  float64 `protobuf:"fixed64,2,opt,name=read_operations_per_second,json=readOperationsPerSecond" json:"read_operations_per_second,omitempty"`
	ReadsMergedPerSecond     float64 `protobuf:"fixed64,3,opt,name=reads_merged_per_second,json=readsMergedPerSecond" json:"reads_merged_per_second,omitempty"`
	BytesReadPerSecond       float64 `protobuf:"fixed64,4,opt,name=bytes_read_per_second,json=bytesReadPerSecond" json:"bytes_read_per_second,omitempty"`
	AvgReadLatency           float64 `protobuf:"fixed64,5,opt,name=avg_read_latency,json=avgReadLatency" json:"avg_read_latency,omitempty"`
	WriteOperationsPerSecond float64 `protobuf:"fixed64,6,opt,name=write_operations_per_second,json=writeOperationsPerSecond" json:"write_operations_per_second,omitempty"`
	WritesMergedPerSecond    float64 `protobuf:"fixed64,7,opt,name=writes_merged_per_second,json=writesMergedPerSecond" json:"writes_merged_per_second,omitempty"`
	BytesWrittenPerSecond    float64 `protobuf:"fixed64,8,opt,name=bytes_written_per_second,json=bytesWrittenPerSecond" json:"bytes_written_per_second,omitempty"`
	AvgWriteLatency          float64 `protobuf:"fixed64,9,opt,name=avg_write_latency,json=avgWriteLatency" json:"avg_write_latency,omitempty"`
	AvgQueueSize             int32   `protobuf:"varint,10,opt,name=avg_queue_size,json=avgQueueSize" json:"avg_queue_size,omitempty"`
	UtilizationPercent       float64 `protobuf:"fixed64,12,opt,name=utilization_percent,json=utilizationPercent" json:"utilization_percent,omitempty"`
}

func (m *DiskStatistic) Reset()                    { *m = DiskStatistic{} }
func (m *DiskStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskStatistic) ProtoMessage()               {}
func (*DiskStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type DiskPartitionReference struct {
	Mountpoint string `protobuf:"bytes,1,opt,name=mountpoint" json:"mountpoint,omitempty"`
}

func (m *DiskPartitionReference) Reset()                    { *m = DiskPartitionReference{} }
func (m *DiskPartitionReference) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionReference) ProtoMessage()               {}
func (*DiskPartitionReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type DiskPartitionInformation struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	DiskIdx          int32  `protobuf:"varint,2,opt,name=disk_idx,json=diskIdx" json:"disk_idx,omitempty"`
	FilesystemType   string `protobuf:"bytes,3,opt,name=filesystem_type,json=filesystemType" json:"filesystem_type,omitempty"`
	FilesystemOpts   string `protobuf:"bytes,4,opt,name=filesystem_opts,json=filesystemOpts" json:"filesystem_opts,omitempty"`
	PartitionName    string `protobuf:"bytes,5,opt,name=partition_name,json=partitionName" json:"partition_name,omitempty"`
}

func (m *DiskPartitionInformation) Reset()                    { *m = DiskPartitionInformation{} }
func (m *DiskPartitionInformation) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionInformation) ProtoMessage()               {}
func (*DiskPartitionInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type DiskPartitionStatistic struct {
	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx" json:"disk_partition_idx,omitempty"`
	UsedBytes        uint64 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes" json:"used_bytes,omitempty"`
	TotalBytes       uint64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
}

func (m *DiskPartitionStatistic) Reset()                    { *m = DiskPartitionStatistic{} }
func (m *DiskPartitionStatistic) String() string            { return proto.CompactTextString(m) }
func (*DiskPartitionStatistic) ProtoMessage()               {}
func (*DiskPartitionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type RelationReference struct {
	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	RelationName string `protobuf:"bytes,3,opt,name=relation_name,json=relationName" json:"relation_name,omitempty"`
}

func (m *RelationReference) Reset()                    { *m = RelationReference{} }
func (m *RelationReference) String() string            { return proto.CompactTextString(m) }
func (*RelationReference) ProtoMessage()               {}
func (*RelationReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type IndexReference struct {
	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName  string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	IndexName   string `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *IndexReference) Reset()                    { *m = IndexReference{} }
func (m *IndexReference) String() string            { return proto.CompactTextString(m) }
func (*IndexReference) ProtoMessage()               {}
func (*IndexReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type FunctionReference struct {
	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Arguments    string `protobuf:"bytes,4,opt,name=arguments" json:"arguments,omitempty"`
}

func (m *FunctionReference) Reset()                    { *m = FunctionReference{} }
func (m *FunctionReference) String() string            { return proto.CompactTextString(m) }
func (*FunctionReference) ProtoMessage()               {}
func (*FunctionReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type QueryReference struct {
	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	RoleIdx     int32  `protobuf:"varint,2,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	Fingerprint []byte `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *QueryReference) Reset()                    { *m = QueryReference{} }
func (m *QueryReference) String() string            { return proto.CompactTextString(m) }
func (*QueryReference) ProtoMessage()               {}
func (*QueryReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type QueryInformation struct {
	QueryIdx        int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	NormalizedQuery string  `protobuf:"bytes,2,opt,name=normalized_query,json=normalizedQuery" json:"normalized_query,omitempty"`
	QueryIds        []int64 `protobuf:"varint,3,rep,name=query_ids,json=queryIds" json:"query_ids,omitempty"`
}

func (m *QueryInformation) Reset()                    { *m = QueryInformation{} }
func (m *QueryInformation) String() string            { return proto.CompactTextString(m) }
func (*QueryInformation) ProtoMessage()               {}
func (*QueryInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type QueryStatistic struct {
	QueryIdx          int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	Calls             int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime         float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	Rows              int64   `protobuf:"varint,4,opt,name=rows" json:"rows,omitempty"`
	SharedBlksHit     int64   `protobuf:"varint,5,opt,name=shared_blks_hit,json=sharedBlksHit" json:"shared_blks_hit,omitempty"`
	SharedBlksRead    int64   `protobuf:"varint,6,opt,name=shared_blks_read,json=sharedBlksRead" json:"shared_blks_read,omitempty"`
	SharedBlksDirtied int64   `protobuf:"varint,7,opt,name=shared_blks_dirtied,json=sharedBlksDirtied" json:"shared_blks_dirtied,omitempty"`
	SharedBlksWritten int64   `protobuf:"varint,8,opt,name=shared_blks_written,json=sharedBlksWritten" json:"shared_blks_written,omitempty"`
	LocalBlksHit      int64   `protobuf:"varint,9,opt,name=local_blks_hit,json=localBlksHit" json:"local_blks_hit,omitempty"`
	LocalBlksRead     int64   `protobuf:"varint,10,opt,name=local_blks_read,json=localBlksRead" json:"local_blks_read,omitempty"`
	LocalBlksDirtied  int64   `protobuf:"varint,11,opt,name=local_blks_dirtied,json=localBlksDirtied" json:"local_blks_dirtied,omitempty"`
	LocalBlksWritten  int64   `protobuf:"varint,12,opt,name=local_blks_written,json=localBlksWritten" json:"local_blks_written,omitempty"`
	TempBlksRead      int64   `protobuf:"varint,13,opt,name=temp_blks_read,json=tempBlksRead" json:"temp_blks_read,omitempty"`
	TempBlksWritten   int64   `protobuf:"varint,14,opt,name=temp_blks_written,json=tempBlksWritten" json:"temp_blks_written,omitempty"`
	BlkReadTime       float64 `protobuf:"fixed64,15,opt,name=blk_read_time,json=blkReadTime" json:"blk_read_time,omitempty"`
	BlkWriteTime      float64 `protobuf:"fixed64,16,opt,name=blk_write_time,json=blkWriteTime" json:"blk_write_time,omitempty"`
}

func (m *QueryStatistic) Reset()                    { *m = QueryStatistic{} }
func (m *QueryStatistic) String() string            { return proto.CompactTextString(m) }
func (*QueryStatistic) ProtoMessage()               {}
func (*QueryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type QueryExplain struct {
	QueryIdx      int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	OccurredAt    int64   `protobuf:"varint,4,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Runtime       float64 `protobuf:"fixed64,5,opt,name=runtime" json:"runtime,omitempty"`
	ExplainOutput string  `protobuf:"bytes,6,opt,name=explain_output,json=explainOutput" json:"explain_output,omitempty"`
	ExplainError  string  `protobuf:"bytes,7,opt,name=explain_error,json=explainError" json:"explain_error,omitempty"`
}

func (m *QueryExplain) Reset()                    { *m = QueryExplain{} }
func (m *QueryExplain) String() string            { return proto.CompactTextString(m) }
func (*QueryExplain) ProtoMessage()               {}
func (*QueryExplain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type RelationInformation struct {
	RelationIdx            int32                             `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	RelationType           string                            `protobuf:"bytes,2,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	ViewDefinition         *NullString                       `protobuf:"bytes,3,opt,name=view_definition,json=viewDefinition" json:"view_definition,omitempty"`
	Columns                []*RelationInformation_Column     `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	Constraints            []*RelationInformation_Constraint `protobuf:"bytes,5,rep,name=constraints" json:"constraints,omitempty"`
	PersistenceType        string                            `protobuf:"bytes,6,opt,name=persistence_type,json=persistenceType" json:"persistence_type,omitempty"`
	Fillfactor             int32                             `protobuf:"varint,7,opt,name=fillfactor" json:"fillfactor,omitempty"`
	HasOids                bool                              `protobuf:"varint,8,opt,name=has_oids,json=hasOids" json:"has_oids,omitempty"`
	HasInheritanceChildren bool                              `protobuf:"varint,9,opt,name=has_inheritance_children,json=hasInheritanceChildren" json:"has_inheritance_children,omitempty"`
	HasToast               bool                              `protobuf:"varint,10,opt,name=has_toast,json=hasToast" json:"has_toast,omitempty"`
	FrozenXid              uint32                            `protobuf:"varint,11,opt,name=frozen_xid,json=frozenXid" json:"frozen_xid,omitempty"`
	MinimumMultixactXid    uint32                            `protobuf:"varint,12,opt,name=minimum_multixact_xid,json=minimumMultixactXid" json:"minimum_multixact_xid,omitempty"`
}

func (m *RelationInformation) Reset()                    { *m = RelationInformation{} }
func (m *RelationInformation) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation) ProtoMessage()               {}
func (*RelationInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *RelationInformation) GetViewDefinition() *NullString {
	if m != nil {
		return m.ViewDefinition
	}
	return nil
}

func (m *RelationInformation) GetColumns() []*RelationInformation_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation) GetConstraints() []*RelationInformation_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type RelationInformation_Column struct {
	Name         string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DataType     string      `protobuf:"bytes,3,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	DefaultValue *NullString `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	NotNull      bool        `protobuf:"varint,5,opt,name=not_null,json=notNull" json:"not_null,omitempty"`
	Position     int32       `protobuf:"varint,6,opt,name=position" json:"position,omitempty"`
}

func (m *RelationInformation_Column) Reset()                    { *m = RelationInformation_Column{} }
func (m *RelationInformation_Column) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation_Column) ProtoMessage()               {}
func (*RelationInformation_Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 0} }

func (m *RelationInformation_Column) GetDefaultValue() *NullString {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type RelationInformation_Constraint struct {
	ForeignRelationIdx int32   `protobuf:"varint,1,opt,name=foreign_relation_idx,json=foreignRelationIdx" json:"foreign_relation_idx,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ConstraintDef      string  `protobuf:"bytes,4,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	Columns            []int32 `protobuf:"varint,5,rep,name=columns" json:"columns,omitempty"`
	ForeignColumns     []int32 `protobuf:"varint,6,rep,name=foreign_columns,json=foreignColumns" json:"foreign_columns,omitempty"`
	ForeignUpdateType  string  `protobuf:"bytes,7,opt,name=foreign_update_type,json=foreignUpdateType" json:"foreign_update_type,omitempty"`
	ForeignDeleteType  string  `protobuf:"bytes,8,opt,name=foreign_delete_type,json=foreignDeleteType" json:"foreign_delete_type,omitempty"`
	ForeignMatchType   string  `protobuf:"bytes,9,opt,name=foreign_match_type,json=foreignMatchType" json:"foreign_match_type,omitempty"`
}

func (m *RelationInformation_Constraint) Reset()         { *m = RelationInformation_Constraint{} }
func (m *RelationInformation_Constraint) String() string { return proto.CompactTextString(m) }
func (*RelationInformation_Constraint) ProtoMessage()    {}
func (*RelationInformation_Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 1}
}

type RelationStatistic struct {
	RelationIdx      int32 `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	SizeBytes        int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	SeqScan          int64 `protobuf:"varint,3,opt,name=seq_scan,json=seqScan" json:"seq_scan,omitempty"`
	SeqTupRead       int64 `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead" json:"seq_tup_read,omitempty"`
	IdxScan          int64 `protobuf:"varint,5,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupFetch      int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	NTupIns          int64 `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns" json:"n_tup_ins,omitempty"`
	NTupUpd          int64 `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd" json:"n_tup_upd,omitempty"`
	NTupDel          int64 `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel" json:"n_tup_del,omitempty"`
	NTupHotUpd       int64 `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd" json:"n_tup_hot_upd,omitempty"`
	NLiveTup         int64 `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup" json:"n_live_tup,omitempty"`
	NDeadTup         int64 `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup" json:"n_dead_tup,omitempty"`
	NModSinceAnalyze int64 `protobuf:"varint,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze" json:"n_mod_since_analyze,omitempty"`
	HeapBlksRead     int64 `protobuf:"varint,18,opt,name=heap_blks_read,json=heapBlksRead" json:"heap_blks_read,omitempty"`
	HeapBlksHit      int64 `protobuf:"varint,19,opt,name=heap_blks_hit,json=heapBlksHit" json:"heap_blks_hit,omitempty"`
	IdxBlksRead      int64 `protobuf:"varint,20,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit       int64 `protobuf:"varint,21,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
	ToastBlksRead    int64 `protobuf:"varint,22,opt,name=toast_blks_read,json=toastBlksRead" json:"toast_blks_read,omitempty"`
	ToastBlksHit     int64 `protobuf:"varint,23,opt,name=toast_blks_hit,json=toastBlksHit" json:"toast_blks_hit,omitempty"`
	TidxBlksRead     int64 `protobuf:"varint,24,opt,name=tidx_blks_read,json=tidxBlksRead" json:"tidx_blks_read,omitempty"`
	TidxBlksHit      int64 `protobuf:"varint,25,opt,name=tidx_blks_hit,json=tidxBlksHit" json:"tidx_blks_hit,omitempty"`
}

func (m *RelationStatistic) Reset()                    { *m = RelationStatistic{} }
func (m *RelationStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationStatistic) ProtoMessage()               {}
func (*RelationStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type RelationEvent struct {
	RelationIdx           int32                      `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Type                  RelationEvent_EventType    `protobuf:"varint,2,opt,name=type,enum=pganalyze.collector.RelationEvent_EventType" json:"type,omitempty"`
	OccurredAt            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	ApproximateOccurredAt bool                       `protobuf:"varint,4,opt,name=approximate_occurred_at,json=approximateOccurredAt" json:"approximate_occurred_at,omitempty"`
}

func (m *RelationEvent) Reset()                    { *m = RelationEvent{} }
func (m *RelationEvent) String() string            { return proto.CompactTextString(m) }
func (*RelationEvent) ProtoMessage()               {}
func (*RelationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *RelationEvent) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

type RelationBloatStatistic struct {
	RelationIdx int32 `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	WastedBytes int64 `protobuf:"varint,2,opt,name=wasted_bytes,json=wastedBytes" json:"wasted_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *RelationBloatStatistic) Reset()                    { *m = RelationBloatStatistic{} }
func (m *RelationBloatStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationBloatStatistic) ProtoMessage()               {}
func (*RelationBloatStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

type IndexInformation struct {
	IndexIdx      int32       `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	RelationIdx   int32       `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
	Columns       []int32     `protobuf:"varint,3,rep,name=columns" json:"columns,omitempty"`
	IndexDef      string      `protobuf:"bytes,4,opt,name=index_def,json=indexDef" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,5,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	IsPrimary     bool        `protobuf:"varint,6,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,7,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,8,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	Fillfactor    int32       `protobuf:"varint,9,opt,name=fillfactor" json:"fillfactor,omitempty"`
	IndexType     string      `protobuf:"bytes,10,opt,name=index_type,json=indexType" json:"index_type,omitempty"`
}

func (m *IndexInformation) Reset()                    { *m = IndexInformation{} }
func (m *IndexInformation) String() string            { return proto.CompactTextString(m) }
func (*IndexInformation) ProtoMessage()               {}
func (*IndexInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *IndexInformation) GetConstraintDef() *NullString {
	if m != nil {
		return m.ConstraintDef
	}
	return nil
}

type IndexStatistic struct {
	IndexIdx    int32 `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	SizeBytes   int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IdxScan     int64 `protobuf:"varint,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupRead  int64 `protobuf:"varint,4,opt,name=idx_tup_read,json=idxTupRead" json:"idx_tup_read,omitempty"`
	IdxTupFetch int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead int64 `protobuf:"varint,7,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit  int64 `protobuf:"varint,8,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
}

func (m *IndexStatistic) Reset()                    { *m = IndexStatistic{} }
func (m *IndexStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexStatistic) ProtoMessage()               {}
func (*IndexStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type IndexBloatStatistic struct {
	IndexIdx    int32 `protobuf:"varint,1,opt,name=index_idx,json=indexIdx" json:"index_idx,omitempty"`
	WastedBytes int64 `protobuf:"varint,2,opt,name=wasted_bytes,json=wastedBytes" json:"wasted_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *IndexBloatStatistic) Reset()                    { *m = IndexBloatStatistic{} }
func (m *IndexBloatStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexBloatStatistic) ProtoMessage()               {}
func (*IndexBloatStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type FunctionInformation struct {
	FunctionIdx     int32    `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Language        string   `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Source          string   `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	SourceBin       string   `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin" json:"source_bin,omitempty"`
	Config          []string `protobuf:"bytes,6,rep,name=config" json:"config,omitempty"`
	Result          string   `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Aggregate       bool     `protobuf:"varint,9,opt,name=aggregate" json:"aggregate,omitempty"`
	Window          bool     `protobuf:"varint,10,opt,name=window" json:"window,omitempty"`
	SecurityDefiner bool     `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner" json:"security_definer,omitempty"`
	Leakproof       bool     `protobuf:"varint,12,opt,name=leakproof" json:"leakproof,omitempty"`
	Strict          bool     `protobuf:"varint,13,opt,name=strict" json:"strict,omitempty"`
	ReturnsSet      bool     `protobuf:"varint,14,opt,name=returns_set,json=returnsSet" json:"returns_set,omitempty"`
	Volatile        string   `protobuf:"bytes,15,opt,name=volatile" json:"volatile,omitempty"`
}

func (m *FunctionInformation) Reset()                    { *m = FunctionInformation{} }
func (m *FunctionInformation) String() string            { return proto.CompactTextString(m) }
func (*FunctionInformation) ProtoMessage()               {}
func (*FunctionInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

type FunctionStatistic struct {
	FunctionIdx int32   `protobuf:"varint,1,opt,name=function_idx,json=functionIdx" json:"function_idx,omitempty"`
	Calls       int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime   float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	SelfTime    float64 `protobuf:"fixed64,4,opt,name=self_time,json=selfTime" json:"self_time,omitempty"`
}

func (m *FunctionStatistic) Reset()                    { *m = FunctionStatistic{} }
func (m *FunctionStatistic) String() string            { return proto.CompactTextString(m) }
func (*FunctionStatistic) ProtoMessage()               {}
func (*FunctionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func init() {
	proto.RegisterType((*FullSnapshot)(nil), "pganalyze.collector.FullSnapshot")
	proto.RegisterType((*NullString)(nil), "pganalyze.collector.NullString")
	proto.RegisterType((*NullTimestamp)(nil), "pganalyze.collector.NullTimestamp")
	proto.RegisterType((*RoleReference)(nil), "pganalyze.collector.RoleReference")
	proto.RegisterType((*DatabaseReference)(nil), "pganalyze.collector.DatabaseReference")
	proto.RegisterType((*RoleInformation)(nil), "pganalyze.collector.RoleInformation")
	proto.RegisterType((*DatabaseInformation)(nil), "pganalyze.collector.DatabaseInformation")
	proto.RegisterType((*PostgresVersion)(nil), "pganalyze.collector.PostgresVersion")
	proto.RegisterType((*LogLine)(nil), "pganalyze.collector.LogLine")
	proto.RegisterType((*Setting)(nil), "pganalyze.collector.Setting")
	proto.RegisterType((*Backend)(nil), "pganalyze.collector.Backend")
	proto.RegisterType((*TablespaceReference)(nil), "pganalyze.collector.TablespaceReference")
	proto.RegisterType((*TablespaceInformation)(nil), "pganalyze.collector.TablespaceInformation")
	proto.RegisterType((*System)(nil), "pganalyze.collector.System")
	proto.RegisterType((*SystemInformation)(nil), "pganalyze.collector.SystemInformation")
	proto.RegisterType((*SystemInformationSelfHosted)(nil), "pganalyze.collector.SystemInformationSelfHosted")
	proto.RegisterType((*SystemInformationRDS)(nil), "pganalyze.collector.SystemInformationRDS")
	proto.RegisterType((*SchedulerStatistic)(nil), "pganalyze.collector.SchedulerStatistic")
	proto.RegisterType((*MemoryStatistic)(nil), "pganalyze.collector.MemoryStatistic")
	proto.RegisterType((*CPUInformation)(nil), "pganalyze.collector.CPUInformation")
	proto.RegisterType((*CPUReference)(nil), "pganalyze.collector.CPUReference")
	proto.RegisterType((*CPUStatistic)(nil), "pganalyze.collector.CPUStatistic")
	proto.RegisterType((*NetworkReference)(nil), "pganalyze.collector.NetworkReference")
	proto.RegisterType((*NetworkStatistic)(nil), "pganalyze.collector.NetworkStatistic")
	proto.RegisterType((*DiskReference)(nil), "pganalyze.collector.DiskReference")
	proto.RegisterType((*DiskInformation)(nil), "pganalyze.collector.DiskInformation")
	proto.RegisterType((*DiskStatistic)(nil), "pganalyze.collector.DiskStatistic")
	proto.RegisterType((*DiskPartitionReference)(nil), "pganalyze.collector.DiskPartitionReference")
	proto.RegisterType((*DiskPartitionInformation)(nil), "pganalyze.collector.DiskPartitionInformation")
	proto.RegisterType((*DiskPartitionStatistic)(nil), "pganalyze.collector.DiskPartitionStatistic")
	proto.RegisterType((*RelationReference)(nil), "pganalyze.collector.RelationReference")
	proto.RegisterType((*IndexReference)(nil), "pganalyze.collector.IndexReference")
	proto.RegisterType((*FunctionReference)(nil), "pganalyze.collector.FunctionReference")
	proto.RegisterType((*QueryReference)(nil), "pganalyze.collector.QueryReference")
	proto.RegisterType((*QueryInformation)(nil), "pganalyze.collector.QueryInformation")
	proto.RegisterType((*QueryStatistic)(nil), "pganalyze.collector.QueryStatistic")
	proto.RegisterType((*QueryExplain)(nil), "pganalyze.collector.QueryExplain")
	proto.RegisterType((*RelationInformation)(nil), "pganalyze.collector.RelationInformation")
	proto.RegisterType((*RelationInformation_Column)(nil), "pganalyze.collector.RelationInformation.Column")
	proto.RegisterType((*RelationInformation_Constraint)(nil), "pganalyze.collector.RelationInformation.Constraint")
	proto.RegisterType((*RelationStatistic)(nil), "pganalyze.collector.RelationStatistic")
	proto.RegisterType((*RelationEvent)(nil), "pganalyze.collector.RelationEvent")
	proto.RegisterType((*RelationBloatStatistic)(nil), "pganalyze.collector.RelationBloatStatistic")
	proto.RegisterType((*IndexInformation)(nil), "pganalyze.collector.IndexInformation")
	proto.RegisterType((*IndexStatistic)(nil), "pganalyze.collector.IndexStatistic")
	proto.RegisterType((*IndexBloatStatistic)(nil), "pganalyze.collector.IndexBloatStatistic")
	proto.RegisterType((*FunctionInformation)(nil), "pganalyze.collector.FunctionInformation")
	proto.RegisterType((*FunctionStatistic)(nil), "pganalyze.collector.FunctionStatistic")
	proto.RegisterEnum("pganalyze.collector.LogLine_SourceType", LogLine_SourceType_name, LogLine_SourceType_value)
	proto.RegisterEnum("pganalyze.collector.SystemInformation_SystemType", SystemInformation_SystemType_name, SystemInformation_SystemType_value)
	proto.RegisterEnum("pganalyze.collector.RelationEvent_EventType", RelationEvent_EventType_name, RelationEvent_EventType_value)
}

var fileDescriptor0 = []byte{
	// 5628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x7b, 0x49, 0x70, 0x23, 0xc9,
	0x75, 0xb6, 0x40, 0x70, 0x01, 0x12, 0x2b, 0x8b, 0x1b, 0xba, 0x7b, 0xa4, 0x99, 0xc1, 0x8c, 0x34,
	0x8b, 0xa4, 0x9e, 0xed, 0x1f, 0x69, 0xf4, 0xcb, 0x63, 0x0f, 0xbb, 0xd9, 0xad, 0x66, 0x4c, 0xb3,
	0x9b, 0x03, 0x92, 0x33, 0xd2, 0x44, 0xd8, 0x15, 0x45, 0x54, 0x01, 0x2c, 0x77, 0xa1, 0x0a, 0x5d,
	0x0b, 0xd9, 0xec, 0xb0, 0x0f, 0xb6, 0x23, 0x1c, 0x8e, 0xf0, 0xc1, 0x77, 0x5f, 0x1c, 0xbe, 0x38,
	0xc2, 0x27, 0x3b, 0x7c, 0xd0, 0xd9, 0x37, 0x6f, 0x37, 0x5b, 0x37, 0xcb, 0xf2, 0x1a, 0x61, 0x87,
	0x0f, 0xbe, 0xe8, 0xe0, 0xa3, 0xfd, 0x96, 0xcc, 0xac, 0x2c, 0x00, 0x04, 0x31, 0x96, 0x2e, 0xdd,
	0xcc, 0xf7, 0xbe, 0xf7, 0xea, 0xe5, 0xf6, 0x96, 0xcc, 0x84, 0x68, 0x26, 0xa1, 0x33, 0x4e, 0xce,
	0xa2, 0xf4, 0xf6, 0x38, 0x8e, 0xd2, 0xc8, 0xda, 0x18, 0x0f, 0x9d, 0xd0, 0x09, 0x2e, 0x9f, 0x7b,
	0xb7, 0xfb, 0x51, 0x10, 0x78, 0xfd, 0x34, 0x8a, 0x6f, 0xbe, 0x38, 0x8c, 0xa2, 0x61, 0xe0, 0xbd,
	0x45, 0x90, 0xd3, 0x6c, 0xf0, 0x56, 0xea, 0x8f, 0xbc, 0x24, 0x75, 0x46, 0x63, 0x96, 0xea, 0xfe,
	0xee, 0xa6, 0xa8, 0xdf, 0xcf, 0x82, 0xe0, 0x48, 0x2a, 0xb3, 0xfe, 0x9f, 0xd8, 0x56, 0x8a, 0xed,
	0x73, 0x2f, 0x4e, 0xfc, 0x28, 0xb4, 0x47, 0xce, 0xaf, 0x46, 0x71, 0xa7, 0xf4, 0x52, 0xe9, 0xf5,
	0x95, 0xde, 0xa6, 0xe2, 0x7e, 0xca, 0xcc, 0x03, 0xe4, 0xcd, 0x96, 0xf2, 0x43, 0x90, 0x5a, 0x9a,
	0x2d, 0x85, 0x3c, 0xeb, 0xeb, 0x62, 0x5d, 0x9b, 0xaa, 0xc4, 0x3a, 0x65, 0x10, 0xa8, 0xf6, 0xda,
	0x9a, 0x21, 0x25, 0xac, 0x57, 0x44, 0x43, 0x7f, 0x22, 0xcb, 0x7c, 0xb7, 0x23, 0x08, 0x58, 0x57,
	0xc4, 0x13, 0xa0, 0x59, 0x1f, 0x8a, 0xba, 0x14, 0xf4, 0x5c, 0xdb, 0x49, 0x3b, 0x35, 0xc0, 0xd4,
	0xde, 0xbd, 0x79, 0x9b, 0x87, 0xe1, 0xb6, 0x1a, 0x86, 0xdb, 0xc7, 0x6a, 0x18, 0x7a, 0x35, 0x8d,
	0xdf, 0x4d, 0xad, 0x6f, 0x89, 0x9d, 0x5c, 0xdc, 0x0f, 0x53, 0x2f, 0x3e, 0x77, 0x02, 0x3b, 0xf1,
	0xfa, 0x49, 0xa7, 0x0e, 0x9a, 0x1a, 0xbd, 0x2d, 0xcd, 0xde, 0x97, 0xdc, 0x23, 0x60, 0x5a, 0xef,
	0x89, 0xd5, 0xe4, 0x32, 0x49, 0xbd, 0x51, 0xc7, 0xa5, 0x0f, 0xde, 0xba, 0x3d, 0x63, 0x32, 0x6e,
	0x1f, 0x11, 0xa4, 0x27, 0xa1, 0xd6, 0x63, 0xd1, 0x1e, 0x47, 0x49, 0x3a, 0x8c, 0xbd, 0x44, 0x77,
	0xde, 0x23, 0xf1, 0x57, 0x67, 0x8a, 0x1f, 0x4a, 0xb0, 0x1c, 0x90, 0x5e, 0x6b, 0x5c, 0x24, 0x58,
	0x1f, 0x8b, 0x56, 0x1c, 0x05, 0x9e, 0x1d, 0x7b, 0x03, 0x2f, 0xf6, 0xc2, 0xbe, 0x97, 0x74, 0x06,
	0x2f, 0x95, 0x41, 0x5f, 0x77, 0xa6, 0xbe, 0x1e, 0x60, 0x7b, 0x0a, 0xda, 0x6b, 0xc6, 0x66, 0x33,
	0xb1, 0x3e, 0x13, 0x1b, 0xae, 0x93, 0x3a, 0xa7, 0x4e, 0x52, 0x50, 0x38, 0x24, 0x85, 0x5f, 0x9b,
	0xa9, 0x70, 0x4f, 0xe2, 0x73, 0xa5, 0x96, 0x3b, 0x49, 0x4a, 0xac, 0x4f, 0xc4, 0x3a, 0x59, 0xe9,
	0x87, 0x83, 0x28, 0x1e, 0x39, 0x29, 0x58, 0x9e, 0x74, 0x42, 0x52, 0xfb, 0xea, 0x95, 0x76, 0xee,
	0xe7, 0xe0, 0x5e, 0x3b, 0x2e, 0x12, 0x12, 0xeb, 0x97, 0xc5, 0x96, 0xb6, 0xb5, 0xa0, 0x36, 0x22,
	0xb5, 0xaf, 0xcf, 0xb5, 0xd6, 0x54, 0xbd, 0xe9, 0x4e, 0x13, 0x13, 0xeb, 0x6d, 0xb1, 0x1c, 0x44,
	0xc3, 0xa4, 0xf3, 0x8c, 0xb4, 0xbd, 0x30, 0x53, 0xdb, 0xc3, 0x68, 0xf8, 0xd0, 0x0f, 0xbd, 0x1e,
	0x21, 0xad, 0x0f, 0x44, 0xe5, 0xd4, 0xe9, 0x3f, 0xf1, 0x42, 0x37, 0xe9, 0x5c, 0xce, 0x91, 0xba,
	0xc3, 0xa0, 0x9e, 0x46, 0xa3, 0x64, 0xe2, 0xa5, 0xa9, 0x1f, 0xc2, 0xf7, 0x9e, 0xcf, 0x91, 0x3c,
	0x62, 0x50, 0x4f, 0xa3, 0xad, 0x5f, 0x11, 0x5b, 0x60, 0x7b, 0xe0, 0x25, 0x63, 0xa7, 0x5f, 0x98,
	0xb2, 0xdf, 0x2c, 0xcd, 0x19, 0x85, 0x63, 0x2d, 0x92, 0xcf, 0xda, 0x66, 0x3a, 0x4d, 0x4c, 0x2c,
	0x57, 0xec, 0x18, 0xfa, 0x0b, 0xc3, 0xfc, 0x5b, 0xfc, 0x85, 0x37, 0xaf, 0xf9, 0x82, 0x39, 0xd2,
	0xdb, 0xe9, 0x2c, 0x72, 0x82, 0x9b, 0xe2, 0x69, 0xe6, 0xc5, 0x97, 0x66, 0x07, 0xfe, 0x92, 0xd5,
	0xbf, 0x32, 0x53, 0xfd, 0x27, 0x88, 0xce, 0x6d, 0x6f, 0x3d, 0x2d, 0xb4, 0x13, 0xeb, 0xfb, 0x62,
	0x23, 0xf6, 0x02, 0xd2, 0x6e, 0xea, 0xfc, 0xab, 0xd2, 0x9c, 0x85, 0xdc, 0x93, 0x02, 0xc6, 0x42,
	0x8e, 0x27, 0x49, 0x64, 0xaa, 0x1f, 0xba, 0xde, 0x33, 0x53, 0xed, 0x5f, 0xcf, 0x33, 0x75, 0x1f,
	0xd1, 0x86, 0xa9, 0x7e, 0xa1, 0x4d, 0xa6, 0x0e, 0xb2, 0xb0, 0x3f, 0x69, 0xea, 0xdf, 0xcc, 0x33,
	0xf5, 0xbe, 0x14, 0x30, 0x4c, 0x1d, 0x4c, 0x92, 0x12, 0xeb, 0x44, 0x58, 0x3c, 0xaa, 0x85, 0x69,
	0xfb, 0x5b, 0x56, 0xfc, 0xd5, 0xab, 0xc7, 0xd5, 0x9c, 0xb1, 0xf5, 0xa7, 0x13, 0x14, 0x63, 0xb2,
	0xc0, 0x95, 0xa6, 0x7e, 0x92, 0xfa, 0xe0, 0x27, 0xff, 0xee, 0xda, 0xc9, 0x3a, 0x52, 0x60, 0x39,
	0x59, 0xba, 0x9d, 0x58, 0xfb, 0xa2, 0xc9, 0x0a, 0xbd, 0x67, 0xe3, 0xc0, 0xf1, 0xc1, 0xc6, 0x1f,
	0xb1, 0xba, 0x97, 0xaf, 0x56, 0x77, 0x8f, 0xa1, 0xbd, 0xc6, 0x53, 0xa3, 0x45, 0xdb, 0x41, 0xcf,
	0x7b, 0xa1, 0xd7, 0x3f, 0x9e, 0xb7, 0x1d, 0xd4, 0xcc, 0x17, 0x9c, 0x42, 0x3c, 0x4d, 0x2c, 0xae,
	0x2b, 0xa3, 0xfb, 0xff, 0xb0, 0xc8, 0xba, 0xca, 0x47, 0x40, 0xaf, 0x2b, 0x63, 0x10, 0xce, 0xc4,
	0x0d, 0xad, 0xf9, 0x34, 0x88, 0x9c, 0xd4, 0xd4, 0xff, 0x13, 0xd6, 0xff, 0xf5, 0xb9, 0xfa, 0xef,
	0xa0, 0x54, 0xfe, 0x91, 0x9d, 0x78, 0x26, 0x3d, 0xb1, 0x1e, 0x42, 0xc0, 0x50, 0x5f, 0xf2, 0xce,
	0xbd, 0x30, 0x4d, 0x3a, 0xff, 0x58, 0x9a, 0x17, 0x31, 0x24, 0xf8, 0x1e, 0x62, 0x21, 0x62, 0x98,
	0x4d, 0x5a, 0x64, 0xbc, 0x1f, 0x0a, 0xc3, 0xfd, 0x4f, 0xf3, 0x16, 0x19, 0xed, 0x88, 0xc2, 0x22,
	0xf3, 0x27, 0x28, 0xc6, 0x36, 0x33, 0x46, 0xe1, 0x9f, 0xaf, 0xdd, 0x66, 0xc6, 0x22, 0xf3, 0x0b,
	0xed, 0xc4, 0xb2, 0xc5, 0x36, 0x2b, 0x9c, 0x1a, 0xdc, 0x7f, 0x99, 0xb7, 0x34, 0x48, 0xed, 0xc4,
	0xc8, 0x6e, 0xfa, 0xd3, 0x44, 0x5a, 0x7a, 0x7a, 0x1f, 0x17, 0xc6, 0xe2, 0x5f, 0xe7, 0xe9, 0x57,
	0x3b, 0xb9, 0xb0, 0xf4, 0x06, 0xd3, 0xc4, 0xa2, 0x9f, 0x30, 0xac, 0xff, 0xb7, 0x45, 0xfc, 0x84,
	0xb1, 0xf4, 0x06, 0x93, 0xa4, 0xa4, 0xfb, 0x81, 0x10, 0x8f, 0x30, 0x19, 0x4c, 0x63, 0x08, 0x29,
	0xd6, 0xa6, 0x58, 0x81, 0x04, 0x07, 0x32, 0x2d, 0xcc, 0xfc, 0x2a, 0x3d, 0x6e, 0x48, 0x6a, 0xe6,
	0x51, 0x66, 0x57, 0xed, 0x71, 0xa3, 0xfb, 0x99, 0x68, 0xa0, 0xa4, 0xce, 0xab, 0xae, 0x10, 0x7e,
	0xdb, 0x14, 0x9e, 0x9f, 0x98, 0x49, 0xc5, 0x90, 0xf6, 0x15, 0x12, 0x15, 0xcb, 0x12, 0xcb, 0xa1,
	0x33, 0xf2, 0x48, 0x6f, 0xb5, 0x47, 0x7f, 0x77, 0x5f, 0x13, 0xeb, 0x53, 0xc9, 0xc7, 0x4c, 0xe0,
	0x9f, 0x96, 0x45, 0x6b, 0x22, 0x9f, 0xb0, 0x6e, 0x88, 0x0a, 0x27, 0x24, 0xee, 0x33, 0x99, 0xe3,
	0xae, 0x51, 0x86, 0xe1, 0x3e, 0xb3, 0x3a, 0x62, 0xcd, 0x0f, 0xcf, 0xbc, 0xd8, 0x4f, 0xc9, 0xe0,
	0x4a, 0x4f, 0x35, 0xb1, 0x7b, 0x10, 0xe9, 0x7d, 0x4e, 0x57, 0xa1, 0x7b, 0xd4, 0xb0, 0x6e, 0x89,
	0x6a, 0x3f, 0xf6, 0x9c, 0xd4, 0xb3, 0xdd, 0xd3, 0xce, 0x32, 0x71, 0x2a, 0x4c, 0xd8, 0x3b, 0xb5,
	0x5e, 0x14, 0x35, 0xc9, 0x44, 0xf5, 0x9d, 0x15, 0x62, 0x0b, 0x26, 0xa1, 0x4d, 0xd6, 0x97, 0x85,
	0x48, 0xb2, 0xb1, 0x17, 0xdb, 0x59, 0xe2, 0xc5, 0x9d, 0x55, 0xe2, 0x57, 0x89, 0x72, 0x02, 0x04,
	0xeb, 0x25, 0x51, 0x8b, 0xbd, 0x71, 0xe0, 0xf7, 0xc9, 0xec, 0xce, 0x1a, 0xf1, 0x4d, 0x12, 0x2a,
	0x38, 0xbd, 0x1c, 0x3b, 0x49, 0x62, 0xc7, 0x41, 0xd2, 0xa9, 0xb0, 0x02, 0xa6, 0xf4, 0x82, 0xc4,
	0x7a, 0x43, 0x40, 0x56, 0x1d, 0x86, 0x1e, 0xaf, 0x9c, 0xc0, 0x1f, 0x41, 0xb7, 0xaa, 0xd4, 0xe1,
	0x56, 0x4e, 0x7f, 0x88, 0x64, 0xeb, 0x58, 0x6c, 0xa2, 0xd4, 0x45, 0x14, 0xbb, 0x36, 0xcd, 0x9c,
	0x9d, 0x85, 0xa9, 0x1f, 0x50, 0xce, 0x7d, 0x95, 0x77, 0x28, 0xcc, 0x7f, 0xcf, 0x52, 0xf2, 0x9f,
	0xa2, 0xf8, 0x09, 0x4a, 0x5b, 0xdb, 0x62, 0x15, 0x3e, 0x34, 0xf0, 0x87, 0x90, 0x97, 0x97, 0x61,
	0x4e, 0x64, 0x0b, 0x87, 0x6d, 0xe4, 0x8d, 0x4e, 0xa1, 0xe7, 0xd1, 0x00, 0x12, 0xed, 0x32, 0x58,
	0x54, 0x61, 0xc2, 0xe3, 0x41, 0xf7, 0xbf, 0x97, 0xc4, 0xc6, 0x8c, 0x5c, 0xcd, 0x7a, 0x59, 0xd4,
	0xf3, 0xa4, 0x4f, 0x4f, 0x5d, 0x4d, 0x67, 0x70, 0x30, 0x7d, 0xaf, 0x8a, 0x66, 0x74, 0x11, 0x82,
	0x5a, 0x3d, 0xbf, 0x5c, 0x8d, 0xd4, 0x89, 0xda, 0x93, 0x93, 0x7c, 0x53, 0x54, 0x60, 0xbd, 0x44,
	0x2e, 0x2c, 0x79, 0x59, 0x7c, 0xe8, 0x36, 0x2e, 0x00, 0xec, 0x20, 0xcc, 0x10, 0x4d, 0x67, 0xb5,
	0xa7, 0x9a, 0xd6, 0x16, 0xf4, 0xc5, 0x4e, 0x2f, 0xc7, 0x3c, 0x91, 0xb0, 0x0f, 0xfa, 0xc7, 0xd0,
	0xc0, 0x49, 0xf6, 0x13, 0x1b, 0xd2, 0xfb, 0x31, 0x09, 0xf1, 0x24, 0x0a, 0x3f, 0x39, 0x96, 0x14,
	0xac, 0x79, 0x9c, 0x20, 0x88, 0x2e, 0xec, 0x7c, 0xc8, 0x13, 0x39, 0x97, 0x6d, 0x62, 0xdc, 0xcd,
	0xe9, 0x33, 0x67, 0xac, 0x32, 0x7b, 0xc6, 0x60, 0xee, 0x07, 0x71, 0xf4, 0xdc, 0x0b, 0xed, 0x67,
	0xb0, 0xe9, 0xaa, 0x54, 0xad, 0x54, 0x99, 0xf2, 0x7d, 0xd8, 0x78, 0xef, 0x8a, 0x2d, 0xa8, 0xc7,
	0xfc, 0x51, 0x36, 0xb2, 0x47, 0x59, 0x90, 0xfa, 0xcf, 0x9c, 0x7e, 0x4a, 0x48, 0x41, 0xc8, 0x0d,
	0xc9, 0x3c, 0x50, 0x3c, 0x90, 0xe9, 0x9e, 0x88, 0xd6, 0x44, 0xcd, 0x81, 0x7b, 0x6a, 0x00, 0xd3,
	0xac, 0xf6, 0x14, 0xfe, 0x8d, 0x5b, 0x01, 0xea, 0xaf, 0x38, 0x55, 0x0e, 0x81, 0x1a, 0x38, 0x72,
	0x61, 0x36, 0x82, 0xbd, 0xd2, 0xa7, 0x41, 0x2d, 0xf7, 0x54, 0xb3, 0xfb, 0x1b, 0x65, 0xb1, 0x26,
	0xd3, 0x65, 0x1c, 0xae, 0xa8, 0xdf, 0xcf, 0xe2, 0x98, 0xcb, 0xb5, 0x12, 0x21, 0x85, 0x22, 0x41,
	0x45, 0xf6, 0x4b, 0x50, 0x59, 0x45, 0x59, 0xdc, 0x67, 0x8f, 0xd1, 0x7c, 0xf7, 0xb5, 0x79, 0xd9,
	0xf7, 0xed, 0x23, 0x82, 0xe2, 0x44, 0xf4, 0xa4, 0x98, 0xf5, 0x0b, 0xb0, 0x25, 0x03, 0x1f, 0x02,
	0x94, 0xed, 0x8f, 0xc9, 0x92, 0xda, 0xbb, 0x2f, 0x5e, 0xb9, 0x7c, 0xd9, 0xf1, 0xc1, 0x9e, 0x25,
	0x89, 0xfd, 0x31, 0xae, 0x4c, 0xd8, 0xd9, 0x76, 0x00, 0xd1, 0x31, 0x90, 0x2b, 0xa0, 0x02, 0x84,
	0x87, 0xd8, 0x46, 0xe3, 0x65, 0xde, 0x6e, 0x8f, 0x61, 0x24, 0x57, 0x68, 0x62, 0x84, 0x24, 0x1d,
	0xc2, 0xa0, 0xd3, 0xea, 0x81, 0x3a, 0x31, 0x4c, 0x69, 0x21, 0xd0, 0xea, 0xa1, 0xa6, 0xf5, 0x3d,
	0xd1, 0x76, 0x5c, 0xd7, 0xc7, 0xe9, 0x83, 0x02, 0x33, 0x00, 0xdb, 0x71, 0x11, 0x5c, 0x5f, 0x5e,
	0xb4, 0x72, 0x29, 0x6c, 0x27, 0xdd, 0xf7, 0x85, 0xc8, 0x3b, 0x0d, 0xd3, 0xd3, 0x54, 0x33, 0xc6,
	0xd4, 0xf6, 0x97, 0xac, 0x0d, 0xd1, 0xda, 0x1d, 0x39, 0xcf, 0x21, 0x9a, 0xb8, 0x8a, 0x58, 0xea,
	0xfe, 0x10, 0xe6, 0x40, 0x96, 0x10, 0xb3, 0xfc, 0x24, 0x16, 0xdb, 0x34, 0x05, 0x30, 0x6c, 0xa6,
	0xb3, 0xaf, 0x4b, 0xe2, 0xa7, 0x48, 0x83, 0xaa, 0x77, 0x39, 0x0b, 0x61, 0x45, 0x2e, 0x38, 0xaa,
	0x04, 0xb6, 0x7e, 0x11, 0x7c, 0x54, 0x14, 0x29, 0xb5, 0xcb, 0x8b, 0x89, 0x56, 0x51, 0x84, 0x3f,
	0xfa, 0x11, 0x7a, 0x41, 0x28, 0x7a, 0xa4, 0x82, 0x95, 0xc5, 0x14, 0x08, 0x92, 0x61, 0x0d, 0xdf,
	0xd6, 0x4b, 0x6a, 0x75, 0x31, 0x61, 0xb5, 0x94, 0xe0, 0xd3, 0xfc, 0x97, 0x3d, 0xf0, 0xc1, 0x81,
	0xaf, 0x2d, 0xf8, 0x69, 0x96, 0xb9, 0x0f, 0x22, 0x86, 0x06, 0x9c, 0x72, 0xda, 0xca, 0x8b, 0x6b,
	0xc0, 0x09, 0xef, 0xfe, 0x27, 0x4c, 0x9c, 0xac, 0x1a, 0x17, 0xf1, 0x80, 0x66, 0x6c, 0x5b, 0x2a,
	0xc6, 0x36, 0x58, 0xda, 0xb2, 0x26, 0x00, 0x5e, 0x99, 0x78, 0x15, 0x4e, 0xf1, 0x81, 0xd9, 0x16,
	0x65, 0x5c, 0xd2, 0xcb, 0xb4, 0x1f, 0xf1, 0x4f, 0x74, 0x45, 0xce, 0x58, 0x87, 0x1a, 0x9b, 0x56,
	0x0c, 0x7b, 0xbe, 0x96, 0x41, 0x7f, 0x84, 0x8b, 0x07, 0x03, 0x1d, 0x6f, 0x39, 0x58, 0xad, 0xb1,
	0x5c, 0xfa, 0x82, 0x49, 0xbb, 0x40, 0x81, 0x4d, 0xdd, 0x50, 0x1b, 0x07, 0x82, 0x05, 0x78, 0x8e,
	0xb5, 0x6b, 0xb3, 0x81, 0xba, 0x14, 0x38, 0x42, 0xbc, 0xf5, 0x1d, 0x21, 0xc8, 0x81, 0xb1, 0x74,
	0xe5, 0x5a, 0xe9, 0x2a, 0xa2, 0x59, 0xf4, 0xbb, 0xa2, 0xa6, 0x6b, 0x96, 0x98, 0xe3, 0xdf, 0x7c,
	0x59, 0xa1, 0x8a, 0x14, 0x10, 0xfe, 0x50, 0xd4, 0x31, 0xe1, 0xf2, 0xec, 0xfe, 0x99, 0x13, 0x0e,
	0x3d, 0x19, 0x0e, 0xe7, 0x1e, 0x2f, 0x11, 0xfe, 0x2e, 0xc1, 0xd1, 0x1f, 0x5c, 0x38, 0x3e, 0x6e,
	0x3a, 0x3a, 0x98, 0x82, 0x74, 0x42, 0x36, 0xc9, 0x87, 0x22, 0x90, 0x8e, 0x99, 0xd0, 0x87, 0x62,
	0xa3, 0xfb, 0x86, 0xd8, 0x98, 0x51, 0x9f, 0xcf, 0x4c, 0x6c, 0xfe, 0xa0, 0x24, 0xb6, 0x66, 0x56,
	0xda, 0xd6, 0x57, 0x45, 0xd3, 0xac, 0xdb, 0xf5, 0x3a, 0x69, 0x18, 0x15, 0x38, 0xcc, 0xf8, 0x37,
	0x84, 0xe5, 0xfa, 0xc9, 0x13, 0x7b, 0x0c, 0xfd, 0xf4, 0x39, 0x75, 0xd5, 0x6b, 0xa6, 0x8d, 0x9c,
	0x43, 0xc5, 0x98, 0x5c, 0x57, 0xe5, 0xe2, 0xba, 0xca, 0x83, 0xfc, 0xb2, 0x19, 0xe4, 0xbb, 0x7f,
	0x21, 0xc4, 0x2a, 0x9f, 0x80, 0x61, 0xa5, 0xc0, 0x67, 0x60, 0x66, 0x7a, 0x4c, 0x66, 0x5d, 0x95,
	0xbe, 0xb2, 0x60, 0xa1, 0x52, 0x48, 0x26, 0x49, 0x98, 0x17, 0x27, 0xfd, 0x33, 0xcf, 0xcd, 0x02,
	0x08, 0xf9, 0x3a, 0x31, 0x96, 0x93, 0x34, 0x3b, 0x70, 0x1c, 0x29, 0xbc, 0x91, 0x17, 0x27, 0x53,
	0x34, 0xac, 0x41, 0x20, 0x1f, 0x89, 0xcc, 0x4a, 0x57, 0x1e, 0x2d, 0xce, 0x3e, 0xb2, 0x3a, 0x20,
	0xb0, 0x51, 0x83, 0x8c, 0x8a, 0x04, 0xac, 0xbc, 0xfa, 0xe3, 0xac, 0xd0, 0xfd, 0x3a, 0xe9, 0x9b,
	0x5d, 0xd2, 0xdc, 0x3d, 0x3c, 0x31, 0xfb, 0xde, 0x04, 0x59, 0xb3, 0xe3, 0x0f, 0x04, 0x52, 0xcc,
	0x33, 0x83, 0xc6, 0x9c, 0xaa, 0x19, 0x94, 0xe5, 0xa7, 0x05, 0x0d, 0x10, 0x34, 0x0e, 0x0a, 0xa4,
	0x26, 0xa3, 0xaa, 0x68, 0xce, 0xd7, 0x94, 0xf7, 0x11, 0x35, 0x19, 0x45, 0xd0, 0xb1, 0xb0, 0x42,
	0x2f, 0x85, 0x04, 0xf0, 0x89, 0x69, 0x57, 0x6b, 0x4e, 0x31, 0xf8, 0x88, 0xe1, 0xb9, 0x6d, 0xeb,
	0xe1, 0x04, 0xa5, 0xa0, 0xd5, 0xb0, 0xb1, 0x7d, 0xbd, 0xd6, 0xdc, 0x4e, 0xa5, 0xd5, 0xb0, 0xf5,
	0x63, 0xd1, 0xa2, 0xb5, 0x6f, 0x18, 0xba, 0x3e, 0xa7, 0x0c, 0xde, 0x03, 0xac, 0x71, 0x70, 0xea,
	0x9a, 0x4d, 0x3a, 0xdf, 0x24, 0x65, 0x85, 0xca, 0xcf, 0x9a, 0x73, 0xbe, 0x89, 0xea, 0x0a, 0xe7,
	0x9b, 0x6e, 0x91, 0x90, 0xdb, 0x67, 0x74, 0x79, 0xe3, 0x1a, 0xfb, 0xf2, 0xfe, 0x92, 0x7d, 0x46,
	0x67, 0x87, 0xe2, 0xc6, 0xc4, 0x46, 0x37, 0xba, 0xbd, 0x39, 0xe7, 0x74, 0x61, 0xcf, 0x74, 0x02,
	0x79, 0xff, 0x77, 0xdc, 0x99, 0xf4, 0xc4, 0x1a, 0x89, 0x5b, 0x93, 0x1e, 0xc5, 0x1c, 0x92, 0x2d,
	0xfa, 0xd4, 0x37, 0xaf, 0xff, 0x94, 0x39, 0x36, 0x37, 0xdc, 0x2b, 0x38, 0xb3, 0xfa, 0x65, 0x0c,
	0xd7, 0xf6, 0xa2, 0xfd, 0x32, 0x4e, 0x4d, 0xdc, 0x99, 0x74, 0xdc, 0x23, 0x2f, 0x63, 0x88, 0xb5,
	0x5d, 0x3f, 0x26, 0x05, 0x97, 0xf6, 0x0c, 0xc7, 0xf9, 0x15, 0x72, 0x8a, 0x5f, 0x46, 0xe0, 0x9e,
	0xc2, 0xed, 0x4d, 0x7a, 0xd1, 0xf7, 0xc5, 0xce, 0x33, 0x4c, 0x2f, 0x67, 0xc8, 0xbf, 0xc8, 0xd7,
	0x26, 0xc8, 0x9e, 0x14, 0xeb, 0xfe, 0xcf, 0x92, 0x58, 0x9f, 0x72, 0x88, 0xd6, 0x3d, 0xb1, 0x4c,
	0xe5, 0x48, 0x89, 0xf2, 0xe4, 0x77, 0x16, 0x73, 0xa3, 0x92, 0x42, 0x19, 0x33, 0x89, 0x5b, 0x47,
	0x90, 0xa2, 0x78, 0xc1, 0xc0, 0x3e, 0x83, 0x3c, 0xd2, 0x73, 0x65, 0x9d, 0xfe, 0xf6, 0x62, 0xda,
	0x8e, 0x40, 0xf0, 0x01, 0xc9, 0x3d, 0xf8, 0x12, 0x64, 0x2d, 0xba, 0x05, 0x71, 0xb3, 0x1c, 0xbb,
	0x89, 0x4c, 0x14, 0xdf, 0x58, 0xd0, 0xc3, 0xef, 0x1d, 0x81, 0x16, 0x94, 0x83, 0x8c, 0x8d, 0x12,
	0x40, 0x1b, 0x2f, 0xaf, 0x16, 0x88, 0xb9, 0x15, 0x04, 0x63, 0xb3, 0xfb, 0x08, 0xb2, 0x63, 0xdd,
	0x41, 0x88, 0x4c, 0xd6, 0xd1, 0xbd, 0x87, 0xf7, 0xed, 0x07, 0x8f, 0x8f, 0x8e, 0xef, 0xed, 0xd9,
	0x47, 0x3f, 0x80, 0xff, 0x0e, 0x20, 0x43, 0xde, 0x12, 0xeb, 0xbb, 0x07, 0xbb, 0x9f, 0x3f, 0x7e,
	0x64, 0xc3, 0x37, 0x15, 0xb9, 0x64, 0xad, 0x8b, 0xc6, 0x83, 0x7b, 0xbd, 0xc7, 0x1f, 0x9f, 0x28,
	0xd2, 0xd2, 0x9d, 0x55, 0xb1, 0x8c, 0x6b, 0xb8, 0xfb, 0xa3, 0x25, 0x71, 0x6b, 0x4e, 0xef, 0xb1,
	0xa4, 0xc4, 0xf1, 0x33, 0xa2, 0xb4, 0x6e, 0x5b, 0x5d, 0x51, 0x77, 0xe2, 0xfe, 0x99, 0x9f, 0x42,
	0xbf, 0xb3, 0x58, 0x67, 0xd6, 0x26, 0x0d, 0x93, 0xad, 0x08, 0xca, 0x7e, 0x07, 0x73, 0x03, 0x5b,
	0xde, 0x2c, 0x71, 0x69, 0xda, 0xd2, 0x74, 0x19, 0x4b, 0xe1, 0x53, 0x58, 0x58, 0xa2, 0x15, 0xaa,
	0x40, 0x51, 0x6d, 0xeb, 0x35, 0xd1, 0x52, 0x7f, 0xdb, 0x03, 0x67, 0xe4, 0x07, 0x97, 0x32, 0x65,
	0x6b, 0x2a, 0xf2, 0x7d, 0xa2, 0xe2, 0xf7, 0x34, 0x50, 0x5d, 0x45, 0x71, 0xda, 0xa6, 0x15, 0xa8,
	0x0a, 0xf0, 0x3d, 0xb1, 0x75, 0xee, 0xc7, 0x69, 0x06, 0x55, 0xfd, 0x73, 0x79, 0xfa, 0xc9, 0xf6,
	0xad, 0x11, 0x7e, 0xb3, 0xc8, 0x94, 0x46, 0x42, 0x0e, 0xf2, 0xc4, 0x8b, 0x43, 0x2f, 0xd0, 0xda,
	0x2b, 0x84, 0x6e, 0x30, 0x55, 0xea, 0xee, 0xfe, 0x47, 0x55, 0x6c, 0xce, 0x5a, 0x07, 0x98, 0x53,
	0xc4, 0xde, 0x50, 0x25, 0x09, 0x90, 0x53, 0x70, 0x0b, 0xf5, 0xfa, 0x21, 0x4c, 0x3a, 0xf8, 0x1b,
	0xbb, 0x1f, 0x38, 0x49, 0x22, 0x47, 0xb3, 0xa1, 0xa8, 0x77, 0x91, 0x48, 0x45, 0xb9, 0x82, 0x41,
	0x56, 0xcb, 0x23, 0x29, 0x14, 0x69, 0xdf, 0x45, 0xfd, 0xe8, 0x2c, 0xb2, 0x44, 0x0e, 0xa1, 0x6c,
	0x51, 0xb1, 0x7e, 0xee, 0xf8, 0x81, 0x73, 0xea, 0x07, 0x7e, 0x7a, 0x69, 0x43, 0x15, 0xa5, 0xb2,
	0xde, 0xb6, 0xc9, 0xf8, 0x1c, 0xe8, 0xd6, 0x5b, 0x62, 0x63, 0x9c, 0x9d, 0x42, 0x26, 0x1c, 0x5c,
	0xda, 0x4e, 0x1f, 0x3c, 0x60, 0xe2, 0x43, 0x82, 0x25, 0x8f, 0x00, 0x2c, 0xc5, 0xda, 0xd5, 0x1c,
	0x4c, 0xa2, 0xa8, 0x16, 0xb7, 0x9d, 0xe7, 0xf2, 0x04, 0x60, 0x8d, 0xda, 0xbb, 0xcf, 0xa1, 0x4a,
	0xba, 0x95, 0x78, 0x90, 0x38, 0xb9, 0x0e, 0xb8, 0x97, 0x69, 0x13, 0x78, 0xf4, 0x6e, 0x68, 0xc8,
	0xee, 0xa4, 0x2d, 0x30, 0x30, 0x7d, 0xc7, 0xee, 0x7b, 0xe0, 0x35, 0x06, 0x98, 0x9a, 0x7b, 0x94,
	0xe8, 0xc2, 0xc0, 0xf4, 0x9d, 0xbb, 0x39, 0x11, 0x92, 0xe1, 0x9b, 0x4e, 0x96, 0x46, 0x7c, 0x55,
	0xab, 0x2f, 0x6e, 0xb3, 0xf1, 0x30, 0x76, 0x5c, 0xde, 0x69, 0x95, 0xde, 0x0e, 0x22, 0xe8, 0xbe,
	0x56, 0x4e, 0xd3, 0x09, 0xb3, 0x73, 0x61, 0xbc, 0x01, 0x9e, 0x12, 0xae, 0x19, 0xc2, 0x08, 0x98,
	0x10, 0xfe, 0x48, 0xbc, 0x30, 0xa6, 0xb8, 0x83, 0x95, 0xff, 0xc8, 0xf1, 0x43, 0x98, 0x0a, 0x0c,
	0x1b, 0xf6, 0x85, 0x1f, 0xba, 0xd1, 0x85, 0xcc, 0x83, 0x6f, 0x6a, 0xcc, 0x41, 0x0e, 0xf9, 0x8c,
	0x10, 0x78, 0x57, 0x9b, 0x6b, 0xc0, 0xea, 0x20, 0x1b, 0x2b, 0xe1, 0x26, 0x09, 0x6f, 0x69, 0xf6,
	0x1d, 0xe2, 0x4a, 0xb9, 0x43, 0xb1, 0x8d, 0x07, 0x31, 0x49, 0x0a, 0x71, 0x2f, 0x01, 0xcf, 0x83,
	0x59, 0x30, 0x7b, 0x96, 0xc6, 0xb5, 0x9e, 0x65, 0x93, 0x25, 0x7b, 0x5a, 0x10, 0x59, 0x50, 0xce,
	0xbc, 0x20, 0xbf, 0x1f, 0x7b, 0x58, 0xdd, 0xe3, 0x30, 0xc0, 0x2e, 0xf5, 0x23, 0xd7, 0x76, 0x9d,
	0x4b, 0x4c, 0x7a, 0xd0, 0x97, 0xdf, 0x60, 0x4c, 0x4f, 0x41, 0x0e, 0x09, 0xb1, 0x07, 0x00, 0xdc,
	0xa7, 0x23, 0x07, 0x96, 0x3d, 0x9f, 0xfc, 0x91, 0xd7, 0x68, 0xf3, 0x3e, 0x65, 0xf2, 0x89, 0xa4,
	0x5a, 0x5f, 0x13, 0x2d, 0x1f, 0x8a, 0x68, 0xdf, 0x09, 0x6c, 0xf7, 0x94, 0x6b, 0xb0, 0x75, 0xb5,
	0xe0, 0x89, 0xbc, 0x77, 0x4a, 0x15, 0x18, 0xd4, 0x47, 0x7c, 0xae, 0x48, 0xa7, 0x2a, 0xd6, 0xf5,
	0xf5, 0x91, 0x44, 0xef, 0xa6, 0xd6, 0x07, 0xa2, 0x43, 0x9d, 0x1b, 0x7a, 0x36, 0x00, 0xcf, 0x7d,
	0x9c, 0x34, 0xbc, 0x0c, 0x8f, 0xc6, 0x98, 0x74, 0x60, 0x47, 0xb6, 0x25, 0xff, 0x30, 0x67, 0xef,
	0x03, 0x97, 0xd6, 0xac, 0x94, 0xc4, 0x83, 0xac, 0x3e, 0x7d, 0x7e, 0xe8, 0x0f, 0x9d, 0xd3, 0xcb,
	0x94, 0x52, 0x0b, 0x1a, 0x05, 0x09, 0xd9, 0x55, 0x88, 0xef, 0x29, 0x00, 0x6e, 0x36, 0x25, 0x0f,
	0xd3, 0x1c, 0x5f, 0x8e, 0x31, 0xfe, 0x6c, 0xf1, 0xc9, 0x98, 0x64, 0xdc, 0x53, 0x74, 0xac, 0x7d,
	0x15, 0x98, 0xa2, 0xde, 0x36, 0x0d, 0x43, 0x4d, 0xd2, 0xc8, 0xdd, 0xc3, 0x7e, 0xf4, 0xc2, 0x33,
	0xdc, 0xe1, 0xb0, 0xc2, 0x22, 0x18, 0x9f, 0x08, 0xab, 0xe9, 0xce, 0x0e, 0xef, 0x47, 0xc5, 0x3a,
	0xd0, 0x1c, 0x7c, 0xc4, 0x00, 0x41, 0x18, 0xc6, 0x0f, 0x67, 0x02, 0x8b, 0x5a, 0x4e, 0xf7, 0xc1,
	0x2b, 0xbc, 0xce, 0xbe, 0x4d, 0x73, 0x77, 0x91, 0x79, 0xc4, 0x3e, 0xa2, 0x20, 0x35, 0x1e, 0x26,
	0x09, 0x58, 0x8f, 0x4b, 0xc3, 0xed, 0xbc, 0x41, 0x5f, 0xca, 0xa5, 0x0e, 0x81, 0x79, 0x8f, 0x79,
	0xdd, 0xdf, 0x2f, 0x41, 0x30, 0x9a, 0x2e, 0x34, 0xde, 0x14, 0xeb, 0x41, 0xe4, 0xc0, 0xac, 0xc1,
	0x76, 0xc2, 0xbe, 0xbd, 0x03, 0x3b, 0x93, 0x7c, 0x5e, 0xa9, 0xd7, 0x42, 0xc6, 0x2e, 0xd3, 0x91,
	0x3c, 0x85, 0x7d, 0x1f, 0xb1, 0x4b, 0x53, 0x58, 0x24, 0x63, 0x75, 0x57, 0xd4, 0x4b, 0xe0, 0x32,
	0x81, 0xdb, 0xa6, 0x62, 0xa4, 0x77, 0xff, 0x68, 0x55, 0xb4, 0x26, 0x4a, 0x18, 0xf4, 0xa1, 0x69,
	0x94, 0xc2, 0xc2, 0xe3, 0xd9, 0x44, 0x9b, 0x96, 0x7b, 0x82, 0x48, 0x77, 0x68, 0xfa, 0x60, 0x46,
	0xfa, 0x0e, 0xf6, 0x48, 0x22, 0x96, 0x08, 0x51, 0x63, 0x1a, 0x43, 0x5e, 0x81, 0xba, 0x3f, 0x1b,
	0xc0, 0x9e, 0x4c, 0x24, 0xa6, 0x4c, 0x98, 0xba, 0x24, 0x32, 0x88, 0x0e, 0x32, 0x3d, 0x4f, 0x22,
	0x96, 0x09, 0x51, 0x45, 0x0a, 0xb3, 0x61, 0xaf, 0x5c, 0xc4, 0x10, 0x28, 0x71, 0x37, 0x49, 0xcc,
	0x0a, 0x61, 0x9a, 0x9a, 0xcc, 0x40, 0x30, 0x18, 0x32, 0x34, 0xf0, 0x98, 0x0c, 0x5a, 0x65, 0x83,
	0x89, 0xa4, 0x3f, 0x94, 0x80, 0xd3, 0x94, 0xfc, 0x35, 0xfe, 0x10, 0x52, 0x74, 0x7f, 0x46, 0xb0,
	0x08, 0x74, 0x7f, 0x2a, 0xdc, 0x1f, 0xa6, 0x31, 0x04, 0x66, 0x60, 0x4c, 0x2b, 0x90, 0x2a, 0x69,
	0x89, 0xab, 0x12, 0xae, 0x85, 0x0c, 0x2e, 0xc8, 0xb5, 0x3a, 0xa7, 0x9f, 0xfa, 0xe7, 0xaa, 0x63,
	0x82, 0xd5, 0x31, 0x8d, 0x21, 0x14, 0xcd, 0x0a, 0xa0, 0x1a, 0x81, 0x1a, 0x8a, 0xaa, 0x47, 0x40,
	0x46, 0x84, 0x40, 0xe1, 0xea, 0x3c, 0x02, 0x9a, 0xcc, 0x40, 0xf0, 0x16, 0xc9, 0x85, 0x33, 0x46,
	0xa7, 0xa2, 0x3a, 0xd1, 0x60, 0x85, 0x48, 0x06, 0xa7, 0x22, 0xbb, 0xf1, 0xba, 0x68, 0x13, 0xce,
	0x9c, 0xdf, 0x26, 0x6b, 0x44, 0xfa, 0x71, 0x3e, 0xc7, 0xef, 0x88, 0xad, 0xb3, 0x0c, 0x3d, 0x03,
	0x74, 0x2e, 0xb1, 0x13, 0xff, 0xb9, 0x32, 0x60, 0x93, 0xe0, 0x16, 0x32, 0x0f, 0x91, 0x77, 0x04,
	0x2c, 0x6d, 0x84, 0x21, 0x82, 0xf3, 0x48, 0x7b, 0x1a, 0x8c, 0xd0, 0xe0, 0xfb, 0x40, 0x44, 0x23,
	0x0c, 0x1c, 0x99, 0x42, 0x9b, 0x1a, 0x8c, 0xd0, 0x40, 0xb2, 0xc4, 0xba, 0x2d, 0x36, 0x0c, 0x24,
	0x1e, 0xec, 0xc5, 0xe7, 0xb0, 0xdb, 0x76, 0x08, 0xbc, 0xae, 0xc1, 0x3d, 0xc9, 0xc0, 0xb5, 0x6f,
	0x1a, 0x9d, 0xc5, 0xe3, 0x00, 0xb6, 0x74, 0x87, 0xe0, 0xed, 0xdc, 0x62, 0xa6, 0x53, 0xc8, 0x37,
	0xce, 0xb9, 0xb8, 0x7b, 0x5f, 0x61, 0xb0, 0xc1, 0xa0, 0xce, 0x75, 0xff, 0xab, 0x24, 0x9a, 0xc5,
	0xda, 0x1c, 0x4f, 0x72, 0x46, 0x91, 0xeb, 0xa9, 0x23, 0x72, 0x6e, 0x60, 0xef, 0x68, 0x23, 0x98,
	0x63, 0xc6, 0x67, 0x2b, 0x4d, 0xa2, 0xe7, 0xe3, 0x75, 0x4b, 0x54, 0x93, 0xb1, 0x87, 0x2e, 0xeb,
	0xec, 0xb9, 0xdc, 0xa0, 0x15, 0x22, 0x1c, 0x9c, 0x3d, 0x27, 0xaf, 0x17, 0xf5, 0x9f, 0x78, 0xa9,
	0xdd, 0x8f, 0xb2, 0x30, 0xa5, 0xdd, 0xb1, 0x02, 0x5e, 0x8f, 0x68, 0x77, 0x91, 0x84, 0xa3, 0x33,
	0x3e, 0xbb, 0x4c, 0xc0, 0xcc, 0x00, 0x40, 0xb1, 0x27, 0x91, 0x7c, 0x38, 0xbd, 0xae, 0x58, 0x77,
	0x81, 0xc3, 0x78, 0xf2, 0x0c, 0xc3, 0x49, 0xf8, 0x2a, 0x9f, 0xfb, 0x48, 0x8e, 0x46, 0x77, 0x5f,
	0x13, 0x75, 0xf3, 0xf8, 0xc0, 0xda, 0xc1, 0x13, 0xee, 0x98, 0xb2, 0x2a, 0x99, 0x99, 0x61, 0x73,
	0xdf, 0xed, 0xfe, 0x61, 0x99, 0x90, 0xb9, 0xff, 0x40, 0x24, 0x9e, 0x78, 0xe8, 0xf3, 0xa7, 0x55,
	0x3c, 0xc4, 0x80, 0x22, 0x08, 0xfa, 0x84, 0x51, 0x0f, 0x23, 0x66, 0x1f, 0x4f, 0xca, 0xd9, 0x83,
	0xd5, 0x90, 0x76, 0xc8, 0x24, 0xdc, 0x18, 0xf2, 0xbc, 0x48, 0x81, 0x78, 0x60, 0x1a, 0x4c, 0x55,
	0x30, 0xd0, 0xe4, 0xbb, 0xb0, 0x27, 0x14, 0x68, 0x99, 0x35, 0x21, 0xcd, 0x80, 0x84, 0x7e, 0x3f,
	0x87, 0xac, 0x30, 0x04, 0x69, 0xc6, 0xc7, 0xfc, 0x08, 0xcf, 0xe5, 0x34, 0x68, 0x95, 0x3f, 0xc6,
	0x54, 0x05, 0xc3, 0x9c, 0x32, 0x7e, 0xaa, 0x31, 0x6b, 0x84, 0x11, 0x40, 0x52, 0x00, 0xdc, 0x55,
	0xd1, 0x20, 0xb5, 0x4d, 0x54, 0x85, 0x50, 0x4d, 0xa4, 0xef, 0xe7, 0x48, 0x7c, 0xd9, 0x96, 0x7a,
	0x30, 0x01, 0x0a, 0x56, 0x25, 0x58, 0x9d, 0x88, 0x06, 0x68, 0x98, 0x61, 0xd6, 0xa2, 0x40, 0x82,
	0x41, 0x44, 0x54, 0x20, 0x98, 0x4c, 0x06, 0x15, 0x3a, 0x59, 0x63, 0x37, 0x4f, 0x9c, 0x47, 0x79,
	0x4f, 0xbb, 0xdf, 0x11, 0xed, 0xc9, 0x33, 0x17, 0xf6, 0x41, 0x10, 0xab, 0x06, 0x78, 0x58, 0x68,
	0xd4, 0x2f, 0x0d, 0x4d, 0xc5, 0x04, 0xa3, 0xfb, 0xc7, 0x25, 0x2d, 0x5b, 0x08, 0x11, 0xea, 0x70,
	0x26, 0x9f, 0x66, 0x21, 0x49, 0x38, 0xd5, 0xff, 0x5f, 0xdc, 0x48, 0x63, 0x27, 0x4c, 0x46, 0x30,
	0xb8, 0xe9, 0x59, 0x1c, 0x65, 0xc3, 0xb3, 0x71, 0x96, 0x16, 0xe2, 0xc5, 0x8e, 0x02, 0x1c, 0x6b,
	0x3e, 0xef, 0x0b, 0xc8, 0x4b, 0xa0, 0x8c, 0xf6, 0xd0, 0x37, 0x4e, 0x89, 0x72, 0x18, 0xd9, 0x96,
	0xfc, 0x09, 0xc9, 0xee, 0xdb, 0xa2, 0x51, 0x38, 0xb1, 0xa1, 0xc8, 0xe0, 0x9d, 0xfb, 0xc5, 0x0e,
	0x0a, 0x26, 0x51, 0xef, 0x86, 0xa2, 0x35, 0x71, 0x28, 0x83, 0xb9, 0x3a, 0x9f, 0xea, 0xe4, 0x97,
	0xc4, 0x74, 0x4c, 0xc3, 0x07, 0xe9, 0xc4, 0xa2, 0x3c, 0x84, 0xeb, 0x0f, 0xc2, 0x52, 0x12, 0xf2,
	0x02, 0x6c, 0x67, 0x15, 0xe6, 0x65, 0xe1, 0x91, 0x13, 0xba, 0x7f, 0xb2, 0xcc, 0xb6, 0xe5, 0x63,
	0x38, 0xe7, 0x3b, 0x90, 0x6f, 0x43, 0x96, 0xe6, 0xda, 0xb2, 0x02, 0x8c, 0xc2, 0x04, 0x67, 0xd8,
	0xe6, 0x22, 0x40, 0x6e, 0x9b, 0x1d, 0x44, 0x3c, 0xd6, 0x00, 0x98, 0xe9, 0x23, 0x62, 0xe3, 0x51,
	0x03, 0xb2, 0x12, 0x7b, 0xe4, 0xc5, 0x43, 0xf0, 0x2e, 0x86, 0x24, 0xef, 0xa5, 0x4d, 0x62, 0x1f,
	0x10, 0x37, 0x17, 0x03, 0x87, 0x4f, 0x43, 0x6c, 0xd3, 0x97, 0x0d, 0x21, 0xde, 0x5b, 0x16, 0x31,
	0x7b, 0xc0, 0xcb, 0x45, 0x60, 0xdd, 0x3b, 0xe7, 0x43, 0x16, 0xc0, 0x74, 0x39, 0xec, 0x5f, 0xca,
	0x6d, 0x06, 0xf1, 0x69, 0x88, 0xd8, 0x87, 0x4c, 0xb5, 0x3e, 0x14, 0xb7, 0x28, 0x66, 0x5f, 0xd1,
	0x23, 0xde, 0x76, 0x1d, 0x82, 0xcc, 0xea, 0xd2, 0xb7, 0x05, 0xf3, 0x66, 0xf5, 0x89, 0xb7, 0xe3,
	0x16, 0xf3, 0x27, 0x3b, 0x05, 0x82, 0xdc, 0x29, 0x64, 0x83, 0x29, 0xa6, 0x20, 0xef, 0x50, 0xee,
	0xf4, 0x67, 0xcc, 0xce, 0x05, 0xdf, 0xc4, 0x72, 0x70, 0x68, 0xb3, 0xd1, 0xaa, 0x6f, 0xbc, 0x59,
	0x21, 0x24, 0x0f, 0x11, 0xef, 0xa9, 0xce, 0xbd, 0x2a, 0xb0, 0xbb, 0xf6, 0xd3, 0xcc, 0xcb, 0xd8,
	0xeb, 0xd3, 0x86, 0x5d, 0x81, 0x42, 0xff, 0x7c, 0xf8, 0x09, 0x12, 0xd1, 0xe5, 0x63, 0x8e, 0x9a,
	0xa5, 0xbe, 0x2e, 0xa5, 0xd5, 0x8e, 0xad, 0xf3, 0xe8, 0x1a, 0x2c, 0xb5, 0x67, 0x3f, 0x10, 0xdb,
	0xb3, 0xcf, 0xe1, 0xac, 0xaf, 0x08, 0x31, 0x42, 0x1f, 0x3d, 0x8e, 0x60, 0xab, 0xaa, 0x45, 0x9d,
	0x53, 0xba, 0x3f, 0x2e, 0x89, 0xce, 0x55, 0xe7, 0x6a, 0x57, 0x9c, 0xfe, 0x97, 0xae, 0x3e, 0xfd,
	0xd7, 0x8b, 0x74, 0xa9, 0xb8, 0x48, 0x21, 0x39, 0xc1, 0xcb, 0x31, 0xe9, 0xae, 0x69, 0x4b, 0xf0,
	0xaa, 0x6f, 0xe6, 0x64, 0xda, 0x18, 0x45, 0x60, 0x34, 0x4e, 0x55, 0xed, 0x6d, 0x00, 0x1f, 0x03,
	0x15, 0x3d, 0x52, 0x6e, 0x95, 0x71, 0xed, 0xd4, 0xd0, 0x54, 0xda, 0xb3, 0xbf, 0x5d, 0x9a, 0x18,
	0x99, 0x7c, 0x4f, 0x7d, 0xb1, 0xce, 0x41, 0x5a, 0x68, 0x24, 0x4c, 0xec, 0x95, 0xaa, 0x99, 0x4e,
	0x96, 0x26, 0xf2, 0xe0, 0xf2, 0x64, 0x1e, 0xdc, 0xfd, 0x35, 0xb1, 0x3e, 0xf5, 0x7e, 0x70, 0x91,
	0xab, 0x3a, 0x50, 0x8c, 0x8e, 0x61, 0xe4, 0x70, 0x27, 0xd9, 0x91, 0x08, 0x26, 0x3d, 0x92, 0x77,
	0xb2, 0xfa, 0xb5, 0x16, 0x41, 0x78, 0x60, 0xeb, 0x8a, 0x48, 0xc3, 0x90, 0x88, 0x66, 0xf1, 0x99,
	0xe1, 0xcf, 0xe5, 0xd3, 0x30, 0x26, 0xfc, 0x64, 0xca, 0xf8, 0x6e, 0x95, 0x28, 0xf4, 0x51, 0x28,
	0x66, 0xd6, 0xa7, 0x1e, 0x22, 0xfe, 0xbc, 0xfa, 0xac, 0x9f, 0x3a, 0x99, 0x7d, 0x56, 0x44, 0x02,
	0x81, 0x8f, 0x75, 0xe2, 0x61, 0x36, 0xa2, 0x07, 0x6c, 0xbc, 0x88, 0x72, 0x42, 0x77, 0x2c, 0x9a,
	0xc5, 0x37, 0xa2, 0x3f, 0xe3, 0xbd, 0xe9, 0x4b, 0xa2, 0x36, 0x80, 0x6a, 0xd1, 0x8b, 0xc7, 0xb1,
	0x2f, 0x33, 0x91, 0x7a, 0xcf, 0x24, 0x75, 0x2f, 0x44, 0x7b, 0xf2, 0xf5, 0x64, 0xf1, 0xb6, 0xb5,
	0x34, 0x71, 0xdb, 0xfa, 0x86, 0x68, 0x87, 0x88, 0x84, 0xcd, 0x0e, 0x0b, 0x8f, 0xc8, 0x72, 0x2c,
	0x5a, 0x39, 0x9d, 0x54, 0x9a, 0x7a, 0x70, 0xf1, 0x95, 0x5f, 0x2f, 0x6b, 0x3d, 0x90, 0x8e, 0x2e,
	0xcb, 0xbe, 0xe6, 0x6b, 0x7f, 0xee, 0x77, 0x21, 0x57, 0x85, 0xec, 0x2e, 0xe0, 0x55, 0x5e, 0xee,
	0x71, 0x03, 0x27, 0x9b, 0x57, 0x38, 0x1d, 0x8a, 0x70, 0x74, 0xa8, 0x12, 0x85, 0x4e, 0x3b, 0x2c,
	0xb1, 0x1c, 0x47, 0x17, 0x89, 0xbc, 0x1b, 0xa6, 0xbf, 0xa9, 0xd2, 0x38, 0x73, 0xe8, 0x20, 0x26,
	0x78, 0x92, 0xd8, 0x67, 0x3e, 0x67, 0x56, 0x65, 0xc8, 0xd0, 0x88, 0x7c, 0x07, 0xa8, 0x0f, 0x7c,
	0xce, 0x89, 0x0c, 0x1c, 0xc6, 0x08, 0x72, 0xf3, 0x65, 0xc8, 0x89, 0x34, 0x10, 0x43, 0x04, 0xa6,
	0xb1, 0x26, 0x12, 0xcb, 0x36, 0xdf, 0x63, 0xbf, 0x5e, 0xee, 0xad, 0xe7, 0xe0, 0x3d, 0x66, 0x4c,
	0xe2, 0xa5, 0x67, 0x27, 0x77, 0x5e, 0xc0, 0x4b, 0x9f, 0x8e, 0xee, 0x19, 0x0f, 0x20, 0x82, 0xdc,
	0xe0, 0x2a, 0x41, 0xeb, 0x44, 0x55, 0xf6, 0x42, 0xbf, 0x0c, 0x14, 0x99, 0x2b, 0xb8, 0x5f, 0x1a,
	0x46, 0xd6, 0x52, 0x12, 0xad, 0x71, 0xca, 0xd8, 0x1a, 0x41, 0xdb, 0x1a, 0xaa, 0x6c, 0x2d, 0xa2,
	0x95, 0xa9, 0xf5, 0x09, 0xb4, 0x61, 0x29, 0x3e, 0x27, 0x32, 0x4c, 0x68, 0xb0, 0xa5, 0x48, 0xd5,
	0x16, 0x40, 0x68, 0xca, 0x51, 0x4a, 0x65, 0x93, 0x80, 0x2d, 0x05, 0x54, 0x1a, 0xbb, 0x50, 0x86,
	0x07, 0x4f, 0x38, 0x42, 0xd3, 0x1c, 0xb7, 0x38, 0x0b, 0x06, 0x22, 0xea, 0xa2, 0x59, 0x86, 0xaf,
	0x22, 0x86, 0x43, 0x1d, 0x81, 0xda, 0x9c, 0x6f, 0x02, 0x95, 0xe2, 0x1c, 0x9d, 0xaf, 0xff, 0x59,
	0x49, 0xd4, 0xcd, 0x47, 0xb8, 0xf3, 0x97, 0xdb, 0xc4, 0x63, 0x9f, 0xe5, 0xa9, 0xc7, 0x3e, 0x1d,
	0xb1, 0x16, 0xe3, 0x3b, 0x33, 0xe9, 0xe3, 0x4b, 0x3d, 0xd5, 0xc4, 0x20, 0x20, 0x9f, 0x04, 0xdb,
	0x51, 0x96, 0x42, 0x6a, 0x27, 0x8f, 0xa7, 0x1b, 0x92, 0xfa, 0x98, 0x88, 0xe8, 0x2e, 0x14, 0xcc,
	0x8b, 0xe3, 0x28, 0x96, 0x87, 0xd2, 0x75, 0x49, 0xbc, 0x87, 0xb4, 0xee, 0x4f, 0x2b, 0x62, 0x63,
	0xc6, 0x3b, 0x5f, 0x74, 0x0b, 0xf9, 0x8b, 0xe1, 0xdc, 0x2d, 0xe8, 0xd7, 0xbf, 0xd0, 0x03, 0xd3,
	0x05, 0x1b, 0xe9, 0x9e, 0x96, 0xa3, 0xc8, 0xf6, 0x40, 0xb4, 0xce, 0x7d, 0xef, 0xc2, 0x76, 0xbd,
	0x01, 0x9d, 0xca, 0xc9, 0xdf, 0xb4, 0x2c, 0xf0, 0xd0, 0xa3, 0x89, 0x72, 0x7b, 0x5a, 0xcc, 0xda,
	0xa7, 0xd7, 0x67, 0xd9, 0x28, 0x4c, 0xe8, 0x2e, 0xbd, 0xf6, 0xee, 0x5b, 0x8b, 0x3e, 0x5a, 0xbe,
	0x7d, 0x97, 0xe4, 0x7a, 0x4a, 0xde, 0x3a, 0x11, 0x35, 0x48, 0x61, 0x12, 0xc8, 0xae, 0x7d, 0xf4,
	0x92, 0x2b, 0xa4, 0xee, 0xbd, 0x2f, 0xa0, 0x4e, 0xc9, 0xf6, 0x4c, 0x3d, 0x74, 0x71, 0x80, 0x07,
	0xbb, 0x49, 0x4a, 0x87, 0xb7, 0x34, 0x26, 0xea, 0xe2, 0x20, 0xa7, 0xd3, 0xb0, 0x40, 0x7e, 0x02,
	0x91, 0x3d, 0x80, 0x12, 0x22, 0x95, 0x13, 0x03, 0xc5, 0x41, 0x4e, 0x41, 0x97, 0x7b, 0xe6, 0x24,
	0x76, 0x84, 0x8e, 0x8d, 0x9f, 0x2e, 0xae, 0x41, 0xfb, 0xb1, 0x4f, 0x3f, 0x8a, 0xe8, 0x20, 0x4b,
	0xbe, 0xbd, 0xe4, 0xd3, 0xfe, 0x33, 0x3f, 0x70, 0xc1, 0x9d, 0xd3, 0xb6, 0xad, 0xf4, 0xb6, 0x81,
	0xbf, 0x9f, 0xb3, 0xef, 0x4a, 0x2e, 0xae, 0x47, 0x94, 0x4c, 0x23, 0x27, 0x49, 0xe5, 0x79, 0x36,
	0x7e, 0xe5, 0x18, 0xdb, 0x13, 0x4f, 0xe6, 0x6a, 0x0b, 0x3f, 0x99, 0xab, 0x5f, 0xf9, 0x64, 0xee,
	0xe6, 0x0f, 0x4b, 0x62, 0x95, 0x87, 0x5e, 0xbf, 0xd2, 0x58, 0x32, 0x9e, 0x55, 0x61, 0xa9, 0x80,
	0x57, 0x87, 0x46, 0x5e, 0x54, 0x41, 0x02, 0x0d, 0xd0, 0x9e, 0x68, 0xc0, 0x92, 0x71, 0x40, 0xdd,
	0x17, 0x7b, 0x1c, 0x55, 0x97, 0x52, 0xfc, 0xba, 0x09, 0x86, 0x31, 0x8c, 0xa0, 0x00, 0xc4, 0x57,
	0x7a, 0xfc, 0xc4, 0x74, 0x0d, 0xda, 0x08, 0xa7, 0xab, 0xa2, 0x28, 0xe1, 0x15, 0xc9, 0x05, 0xbe,
	0x6e, 0xdf, 0xfc, 0xc9, 0x92, 0x10, 0xf9, 0x24, 0x5b, 0x6f, 0x8b, 0x4d, 0x98, 0x7c, 0xcf, 0x1f,
	0xe2, 0xed, 0xf0, 0xd4, 0x9e, 0xb0, 0x24, 0xaf, 0x67, 0x6c, 0x8d, 0x59, 0xdd, 0xb5, 0xe4, 0x95,
	0x24, 0xf7, 0x94, 0xef, 0x17, 0xf1, 0x66, 0x42, 0x7f, 0x07, 0xf7, 0x88, 0x8c, 0xd8, 0x8d, 0x9c,
	0x0a, 0x3b, 0x40, 0x3e, 0xbc, 0xa4, 0xa5, 0xbf, 0x42, 0x0f, 0x42, 0xf5, 0x4a, 0xc6, 0xc4, 0x51,
	0x9a, 0xa6, 0x10, 0xab, 0x84, 0x68, 0x4a, 0xf2, 0x5d, 0x09, 0x84, 0x90, 0xa0, 0x80, 0xd9, 0xd8,
	0xc5, 0x57, 0x3b, 0x64, 0x0c, 0xbb, 0x84, 0x75, 0xc9, 0x3a, 0x21, 0x0e, 0x8d, 0xbf, 0x81, 0x77,
	0xbd, 0xc0, 0x53, 0xf8, 0x4a, 0x01, 0xbf, 0x47, 0x1c, 0xc2, 0x83, 0x1b, 0x57, 0x78, 0xd8, 0x25,
	0xfd, 0x33, 0x86, 0xf3, 0x3d, 0x4b, 0x5b, 0x72, 0x0e, 0x90, 0x81, 0xe8, 0xee, 0xdf, 0xaf, 0xe4,
	0x79, 0x61, 0x1e, 0x9e, 0x17, 0xf0, 0x39, 0x78, 0x4c, 0x59, 0x3c, 0x34, 0x2a, 0x43, 0x09, 0xa9,
	0xcf, 0x8b, 0x6e, 0xe0, 0x0f, 0x86, 0x9e, 0xda, 0x49, 0xdf, 0x09, 0xd5, 0x43, 0x4b, 0x68, 0x1f,
	0x41, 0x13, 0x32, 0x95, 0x3a, 0xb2, 0x52, 0xba, 0x98, 0x70, 0xd4, 0x6b, 0x2e, 0x01, 0xb4, 0x63,
	0xbc, 0x87, 0x80, 0xa8, 0x01, 0xc2, 0xf0, 0x55, 0x16, 0xe6, 0x80, 0xbd, 0x06, 0x6d, 0x12, 0x86,
	0x20, 0x81, 0x2c, 0x14, 0x1e, 0x78, 0xd0, 0x09, 0x19, 0xa7, 0x6b, 0x40, 0x04, 0xe9, 0xfb, 0x48,
	0x82, 0x05, 0x55, 0x0d, 0x09, 0xe1, 0xcb, 0x37, 0xac, 0xf8, 0xca, 0x13, 0xb8, 0xfb, 0x30, 0xfa,
	0x9a, 0x07, 0x63, 0x2f, 0xc3, 0x30, 0xf1, 0x60, 0xc0, 0x73, 0x1e, 0x9e, 0x93, 0x55, 0x73, 0x1e,
	0x0c, 0x2e, 0x8c, 0x48, 0x83, 0x79, 0xf4, 0x3b, 0xbf, 0xb1, 0x0a, 0xb8, 0x02, 0xf9, 0x0f, 0xa2,
	0x14, 0xc5, 0x5f, 0x10, 0x02, 0x1f, 0xc3, 0xe2, 0x49, 0x40, 0x36, 0x96, 0x51, 0xb6, 0x12, 0x3e,
	0xc4, 0xd2, 0x3f, 0x1b, 0x33, 0xd7, 0xa5, 0xd8, 0x06, 0xdc, 0xba, 0xe4, 0xee, 0x61, 0x60, 0x03,
	0xee, 0x37, 0xc5, 0x06, 0x4c, 0x57, 0xe4, 0x42, 0x49, 0x86, 0x6e, 0x44, 0x6e, 0x2c, 0x19, 0x52,
	0xdb, 0xe1, 0x41, 0xe4, 0x1e, 0x21, 0x63, 0x97, 0xe9, 0x18, 0x06, 0xcf, 0x3c, 0xc7, 0x0c, 0xbe,
	0x16, 0x07, 0x5f, 0xa4, 0xea, 0xe0, 0x0b, 0x63, 0x95, 0xa3, 0x30, 0x97, 0xd8, 0xe0, 0xb1, 0x52,
	0x20, 0x4c, 0x25, 0xe4, 0x78, 0xe6, 0x8a, 0x36, 0xf5, 0x78, 0x6a, 0x3d, 0x2f, 0xe1, 0x01, 0xd6,
	0xb3, 0x5c, 0xcd, 0x16, 0x77, 0x5d, 0x42, 0x64, 0x42, 0x42, 0xbe, 0xcc, 0xd0, 0xb3, 0xcd, 0x09,
	0x09, 0x91, 0xb5, 0x26, 0x4c, 0x1a, 0x72, 0x1c, 0xea, 0xda, 0x91, 0x49, 0x83, 0x82, 0xa1, 0x36,
	0x44, 0x15, 0x8d, 0xea, 0x48, 0x94, 0x69, 0x15, 0x58, 0x9e, 0x16, 0xcc, 0xba, 0xc1, 0x96, 0xa7,
	0xb9, 0x5d, 0xdd, 0x3f, 0x5f, 0x12, 0x8d, 0xc2, 0xaf, 0x43, 0x16, 0x59, 0xd9, 0x1f, 0x49, 0xf7,
	0xc0, 0x2f, 0x7b, 0xbf, 0x71, 0xfd, 0x4f, 0x4e, 0x6e, 0xd3, 0xbf, 0xc6, 0x63, 0x85, 0xef, 0x16,
	0x33, 0x8a, 0xf2, 0xf5, 0x8f, 0xf9, 0x8c, 0x6c, 0xe3, 0x5b, 0x62, 0xc7, 0x19, 0x03, 0xe6, 0x99,
	0x3f, 0x42, 0xe7, 0x30, 0x99, 0x9a, 0x54, 0x7a, 0x5b, 0x06, 0xfb, 0xb1, 0x96, 0xeb, 0x9e, 0x88,
	0xaa, 0xb6, 0x03, 0x1f, 0x09, 0x1c, 0xec, 0x3e, 0x3a, 0xd9, 0x7d, 0x68, 0x7f, 0xba, 0x7b, 0xf7,
	0xe4, 0x04, 0x9f, 0x13, 0xb4, 0x44, 0x6d, 0xf7, 0xe4, 0xf8, 0xb1, 0x22, 0x94, 0xf0, 0x55, 0xae,
	0xc4, 0xec, 0x3e, 0xda, 0x7d, 0xf8, 0x83, 0xcf, 0xef, 0xb5, 0x97, 0xac, 0xb6, 0xa8, 0x13, 0x48,
	0x51, 0xca, 0xdd, 0x5f, 0x17, 0xdb, 0xb3, 0x7f, 0xbf, 0xb3, 0xc8, 0x50, 0x02, 0xe4, 0x02, 0xaf,
	0x0a, 0xdd, 0x82, 0x9b, 0xa8, 0x31, 0x2d, 0xbf, 0xee, 0xc8, 0xfd, 0x48, 0x79, 0xc2, 0x8f, 0x74,
	0xff, 0x7d, 0x49, 0xb4, 0x27, 0x7f, 0x8e, 0x83, 0xf1, 0x4a, 0xfe, 0xa4, 0x27, 0x4f, 0xe7, 0xf8,
	0x17, 0x3a, 0xfc, 0xcd, 0x82, 0x59, 0x4b, 0xd3, 0x66, 0x19, 0x5e, 0xbc, 0x5c, 0xf4, 0xe2, 0x5a,
	0x73, 0x1e, 0x01, 0x58, 0x33, 0x3a, 0xff, 0xfb, 0x53, 0x31, 0x62, 0xc1, 0x67, 0xbe, 0x13, 0x41,
	0x04, 0xcb, 0xd6, 0xc4, 0x86, 0xa2, 0x6c, 0xe4, 0x40, 0x45, 0x25, 0x7f, 0x50, 0xe1, 0x27, 0x87,
	0x4c, 0x20, 0x1b, 0x12, 0x3b, 0x0b, 0x7d, 0xc8, 0x50, 0xe5, 0x05, 0x7c, 0xc5, 0x4f, 0x4e, 0xa8,
	0x4d, 0xae, 0x31, 0xe1, 0xdf, 0x3e, 0xa8, 0x74, 0xc4, 0x4f, 0xe8, 0xb7, 0x0c, 0x13, 0x99, 0x4c,
	0x75, 0x2a, 0x93, 0xd1, 0xd5, 0x32, 0xad, 0x6e, 0x61, 0x54, 0xcb, 0x14, 0x09, 0x7e, 0x5a, 0x92,
	0x35, 0x7a, 0xa1, 0x4a, 0xbb, 0x7a, 0x9c, 0xaf, 0x0f, 0x00, 0xda, 0x87, 0x97, 0x8b, 0x3e, 0x5c,
	0xfa, 0x93, 0xc9, 0x00, 0xc0, 0x2e, 0x5c, 0xed, 0xed, 0x6b, 0xbd, 0xfc, 0x94, 0xe7, 0x5a, 0xbb,
	0xde, 0x73, 0x55, 0x26, 0x3d, 0x57, 0x37, 0x15, 0x1b, 0x33, 0x7e, 0x41, 0x75, 0xed, 0x0a, 0xfb,
	0x19, 0x57, 0xf5, 0xef, 0x95, 0xc5, 0xc6, 0x8c, 0x1f, 0x56, 0xa1, 0xe6, 0xfc, 0x27, 0x5a, 0xf9,
	0x96, 0xd2, 0x3f, 0xb7, 0xe2, 0x9f, 0x85, 0x04, 0x4e, 0x38, 0xcc, 0x9c, 0xa1, 0x4e, 0xd5, 0x54,
	0x9b, 0xde, 0x8b, 0xf0, 0x13, 0x72, 0xf5, 0x5e, 0x84, 0x5f, 0x88, 0xa3, 0x35, 0xfc, 0xbe, 0xfb,
	0xd4, 0x0f, 0xe5, 0x39, 0x55, 0x95, 0x29, 0x77, 0xa0, 0x3a, 0xca, 0x9f, 0xc6, 0xae, 0x16, 0x7e,
	0xff, 0x42, 0xcf, 0x5b, 0x12, 0x48, 0xe1, 0x64, 0xb2, 0x21, 0x5b, 0x74, 0xb0, 0x31, 0x1c, 0xc6,
	0xde, 0x50, 0x3d, 0xe0, 0x80, 0xe5, 0xab, 0x09, 0x28, 0x25, 0xdf, 0x3b, 0x70, 0x62, 0x2b, 0x5b,
	0x98, 0x93, 0x27, 0x1e, 0x78, 0x2b, 0x7c, 0x2d, 0x42, 0x35, 0x88, 0x17, 0xcb, 0xd7, 0x18, 0x2d,
	0x45, 0xdf, 0x63, 0x32, 0x7e, 0x20, 0xf0, 0x9c, 0x27, 0xe0, 0xe5, 0xe8, 0x87, 0x37, 0xf4, 0x01,
	0x4d, 0xe0, 0x57, 0x31, 0xb1, 0xdf, 0x4f, 0x29, 0x3c, 0x56, 0x7a, 0xb2, 0x85, 0x75, 0x5c, 0xec,
	0xa5, 0x59, 0x1c, 0x26, 0x76, 0xe2, 0xa5, 0x54, 0x65, 0x56, 0xf0, 0x85, 0x3d, 0x91, 0x8e, 0xbc,
	0x14, 0x87, 0xee, 0x3c, 0x42, 0x2f, 0x10, 0x70, 0x6d, 0x09, 0x43, 0xa7, 0xda, 0xdd, 0xdf, 0x31,
	0xce, 0x8a, 0x0a, 0x2e, 0xee, 0xba, 0xf9, 0xf8, 0x3f, 0x1d, 0x56, 0xe0, 0x6d, 0x1a, 0xbe, 0x66,
	0x23, 0xee, 0xb2, 0xbc, 0x4d, 0x03, 0x02, 0x32, 0x4f, 0x57, 0x29, 0x40, 0xbc, 0xf7, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0xde, 0xf7, 0xca, 0x4a, 0x41, 0x00, 0x00,
}
