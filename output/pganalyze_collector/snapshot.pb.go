// Code generated by protoc-gen-go.
// source: snapshot.proto
// DO NOT EDIT!

/*
Package pganalyze_collector is a generated protocol buffer package.

It is generated from these files:
	snapshot.proto

It has these top-level messages:
	Snapshot
	NullString
	RelationReference
	IndexReference
	FunctionReference
	QueryReference
	QueryInformation
	QueryStatistic
	QueryExplain
	RelationInformation
	RelationStatistic
	RelationEvent
	RelationBloatStatistic
	IndexInformation
	IndexStatistic
	IndexBloatStatistic
	FunctionInformation
	FunctionStatistic
	PostgresVersion
	LogLine
	Setting
	Backend
	System
*/
package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RelationEvent_EventType int32

const (
	RelationEvent_MANUAL_VACUUM  RelationEvent_EventType = 0
	RelationEvent_AUTO_VACUUM    RelationEvent_EventType = 1
	RelationEvent_MANUAL_ANALYZE RelationEvent_EventType = 2
	RelationEvent_AUTO_ANALYZE   RelationEvent_EventType = 3
)

var RelationEvent_EventType_name = map[int32]string{
	0: "MANUAL_VACUUM",
	1: "AUTO_VACUUM",
	2: "MANUAL_ANALYZE",
	3: "AUTO_ANALYZE",
}
var RelationEvent_EventType_value = map[string]int32{
	"MANUAL_VACUUM":  0,
	"AUTO_VACUUM":    1,
	"MANUAL_ANALYZE": 2,
	"AUTO_ANALYZE":   3,
}

func (x RelationEvent_EventType) String() string {
	return proto.EnumName(RelationEvent_EventType_name, int32(x))
}
func (RelationEvent_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type LogLine_SourceType int32

const (
	LogLine_PostgresSource  LogLine_SourceType = 0
	LogLine_AmazonRdsSource LogLine_SourceType = 1
)

var LogLine_SourceType_name = map[int32]string{
	0: "PostgresSource",
	1: "AmazonRdsSource",
}
var LogLine_SourceType_value = map[string]int32{
	"PostgresSource":  0,
	"AmazonRdsSource": 1,
}

func (x LogLine_SourceType) String() string {
	return proto.EnumName(LogLine_SourceType_name, int32(x))
}
func (LogLine_SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type Snapshot struct {
	// Basic information about this snapshot
	CollectorVersion string                     `protobuf:"bytes,1,opt,name=collector_version,json=collectorVersion" json:"collector_version,omitempty"`
	CollectedAt      *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=collected_at,json=collectedAt" json:"collected_at,omitempty"`
	// Per server (and hence snapshot)
	PostgresVersion    *PostgresVersion `protobuf:"bytes,101,opt,name=postgres_version,json=postgresVersion" json:"postgres_version,omitempty"`
	Logs               []*LogLine       `protobuf:"bytes,102,rep,name=logs" json:"logs,omitempty"`
	Backends           []*Backend       `protobuf:"bytes,103,rep,name=backends" json:"backends,omitempty"`
	Settings           []*Setting       `protobuf:"bytes,104,rep,name=settings" json:"settings,omitempty"`
	DatabaseReferences []string         `protobuf:"bytes,105,rep,name=database_references,json=databaseReferences" json:"database_references,omitempty"`
	UserReferences     []string         `protobuf:"bytes,106,rep,name=user_references,json=userReferences" json:"user_references,omitempty"`
	// Per database
	QueryReferences         []*QueryReference         `protobuf:"bytes,200,rep,name=query_references,json=queryReferences" json:"query_references,omitempty"`
	RelationReferences      []*RelationReference      `protobuf:"bytes,201,rep,name=relation_references,json=relationReferences" json:"relation_references,omitempty"`
	IndexReferences         []*IndexReference         `protobuf:"bytes,202,rep,name=index_references,json=indexReferences" json:"index_references,omitempty"`
	FunctionReferences      []*FunctionReference      `protobuf:"bytes,203,rep,name=function_references,json=functionReferences" json:"function_references,omitempty"`
	QueryInformations       []*QueryInformation       `protobuf:"bytes,210,rep,name=query_informations,json=queryInformations" json:"query_informations,omitempty"`
	QueryStatistics         []*QueryStatistic         `protobuf:"bytes,211,rep,name=query_statistics,json=queryStatistics" json:"query_statistics,omitempty"`
	QueryExplains           []*QueryExplain           `protobuf:"bytes,212,rep,name=query_explains,json=queryExplains" json:"query_explains,omitempty"`
	RelationInformations    []*RelationInformation    `protobuf:"bytes,220,rep,name=relation_informations,json=relationInformations" json:"relation_informations,omitempty"`
	RelationStatistics      []*RelationStatistic      `protobuf:"bytes,221,rep,name=relation_statistics,json=relationStatistics" json:"relation_statistics,omitempty"`
	RelationBloatStatistics []*RelationBloatStatistic `protobuf:"bytes,222,rep,name=relation_bloat_statistics,json=relationBloatStatistics" json:"relation_bloat_statistics,omitempty"`
	RelationEvents          []*RelationEvent          `protobuf:"bytes,223,rep,name=relation_events,json=relationEvents" json:"relation_events,omitempty"`
	IndexInformations       []*IndexInformation       `protobuf:"bytes,224,rep,name=index_informations,json=indexInformations" json:"index_informations,omitempty"`
	IndexStatistics         []*IndexStatistic         `protobuf:"bytes,225,rep,name=index_statistics,json=indexStatistics" json:"index_statistics,omitempty"`
	IndexBloatStatistics    []*IndexBloatStatistic    `protobuf:"bytes,226,rep,name=index_bloat_statistics,json=indexBloatStatistics" json:"index_bloat_statistics,omitempty"`
	FunctionInformations    []*FunctionInformation    `protobuf:"bytes,227,rep,name=function_informations,json=functionInformations" json:"function_informations,omitempty"`
	FunctionStatistics      []*FunctionStatistic      `protobuf:"bytes,228,rep,name=function_statistics,json=functionStatistics" json:"function_statistics,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Snapshot) GetCollectedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CollectedAt
	}
	return nil
}

func (m *Snapshot) GetPostgresVersion() *PostgresVersion {
	if m != nil {
		return m.PostgresVersion
	}
	return nil
}

func (m *Snapshot) GetLogs() []*LogLine {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Snapshot) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *Snapshot) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Snapshot) GetQueryReferences() []*QueryReference {
	if m != nil {
		return m.QueryReferences
	}
	return nil
}

func (m *Snapshot) GetRelationReferences() []*RelationReference {
	if m != nil {
		return m.RelationReferences
	}
	return nil
}

func (m *Snapshot) GetIndexReferences() []*IndexReference {
	if m != nil {
		return m.IndexReferences
	}
	return nil
}

func (m *Snapshot) GetFunctionReferences() []*FunctionReference {
	if m != nil {
		return m.FunctionReferences
	}
	return nil
}

func (m *Snapshot) GetQueryInformations() []*QueryInformation {
	if m != nil {
		return m.QueryInformations
	}
	return nil
}

func (m *Snapshot) GetQueryStatistics() []*QueryStatistic {
	if m != nil {
		return m.QueryStatistics
	}
	return nil
}

func (m *Snapshot) GetQueryExplains() []*QueryExplain {
	if m != nil {
		return m.QueryExplains
	}
	return nil
}

func (m *Snapshot) GetRelationInformations() []*RelationInformation {
	if m != nil {
		return m.RelationInformations
	}
	return nil
}

func (m *Snapshot) GetRelationStatistics() []*RelationStatistic {
	if m != nil {
		return m.RelationStatistics
	}
	return nil
}

func (m *Snapshot) GetRelationBloatStatistics() []*RelationBloatStatistic {
	if m != nil {
		return m.RelationBloatStatistics
	}
	return nil
}

func (m *Snapshot) GetRelationEvents() []*RelationEvent {
	if m != nil {
		return m.RelationEvents
	}
	return nil
}

func (m *Snapshot) GetIndexInformations() []*IndexInformation {
	if m != nil {
		return m.IndexInformations
	}
	return nil
}

func (m *Snapshot) GetIndexStatistics() []*IndexStatistic {
	if m != nil {
		return m.IndexStatistics
	}
	return nil
}

func (m *Snapshot) GetIndexBloatStatistics() []*IndexBloatStatistic {
	if m != nil {
		return m.IndexBloatStatistics
	}
	return nil
}

func (m *Snapshot) GetFunctionInformations() []*FunctionInformation {
	if m != nil {
		return m.FunctionInformations
	}
	return nil
}

func (m *Snapshot) GetFunctionStatistics() []*FunctionStatistic {
	if m != nil {
		return m.FunctionStatistics
	}
	return nil
}

type NullString struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullString) Reset()                    { *m = NullString{} }
func (m *NullString) String() string            { return proto.CompactTextString(m) }
func (*NullString) ProtoMessage()               {}
func (*NullString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RelationReference struct {
	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	RelationName string `protobuf:"bytes,3,opt,name=relation_name,json=relationName" json:"relation_name,omitempty"`
}

func (m *RelationReference) Reset()                    { *m = RelationReference{} }
func (m *RelationReference) String() string            { return proto.CompactTextString(m) }
func (*RelationReference) ProtoMessage()               {}
func (*RelationReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type IndexReference struct {
	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName  string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	IndexName   string `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *IndexReference) Reset()                    { *m = IndexReference{} }
func (m *IndexReference) String() string            { return proto.CompactTextString(m) }
func (*IndexReference) ProtoMessage()               {}
func (*IndexReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FunctionReference struct {
	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Arguments    string `protobuf:"bytes,4,opt,name=arguments" json:"arguments,omitempty"`
}

func (m *FunctionReference) Reset()                    { *m = FunctionReference{} }
func (m *FunctionReference) String() string            { return proto.CompactTextString(m) }
func (*FunctionReference) ProtoMessage()               {}
func (*FunctionReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type QueryReference struct {
	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	UserIdx     int32  `protobuf:"varint,2,opt,name=user_idx,json=userIdx" json:"user_idx,omitempty"`
	Fingerprint []byte `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (m *QueryReference) Reset()                    { *m = QueryReference{} }
func (m *QueryReference) String() string            { return proto.CompactTextString(m) }
func (*QueryReference) ProtoMessage()               {}
func (*QueryReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type QueryInformation struct {
	QueryRef        int32   `protobuf:"varint,1,opt,name=query_ref,json=queryRef" json:"query_ref,omitempty"`
	NormalizedQuery string  `protobuf:"bytes,2,opt,name=normalized_query,json=normalizedQuery" json:"normalized_query,omitempty"`
	QueryIds        []int64 `protobuf:"varint,3,rep,name=query_ids,json=queryIds" json:"query_ids,omitempty"`
}

func (m *QueryInformation) Reset()                    { *m = QueryInformation{} }
func (m *QueryInformation) String() string            { return proto.CompactTextString(m) }
func (*QueryInformation) ProtoMessage()               {}
func (*QueryInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type QueryStatistic struct {
	QueryRef          int32   `protobuf:"varint,1,opt,name=query_ref,json=queryRef" json:"query_ref,omitempty"`
	Calls             int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime         float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	Rows              int64   `protobuf:"varint,4,opt,name=rows" json:"rows,omitempty"`
	SharedBlksHit     int64   `protobuf:"varint,5,opt,name=shared_blks_hit,json=sharedBlksHit" json:"shared_blks_hit,omitempty"`
	SharedBlksRead    int64   `protobuf:"varint,6,opt,name=shared_blks_read,json=sharedBlksRead" json:"shared_blks_read,omitempty"`
	SharedBlksDirtied int64   `protobuf:"varint,7,opt,name=shared_blks_dirtied,json=sharedBlksDirtied" json:"shared_blks_dirtied,omitempty"`
	SharedBlksWritten int64   `protobuf:"varint,8,opt,name=shared_blks_written,json=sharedBlksWritten" json:"shared_blks_written,omitempty"`
	LocalBlksHit      int64   `protobuf:"varint,9,opt,name=local_blks_hit,json=localBlksHit" json:"local_blks_hit,omitempty"`
	LocalBlksRead     int64   `protobuf:"varint,10,opt,name=local_blks_read,json=localBlksRead" json:"local_blks_read,omitempty"`
	LocalBlksDirtied  int64   `protobuf:"varint,11,opt,name=local_blks_dirtied,json=localBlksDirtied" json:"local_blks_dirtied,omitempty"`
	LocalBlksWritten  int64   `protobuf:"varint,12,opt,name=local_blks_written,json=localBlksWritten" json:"local_blks_written,omitempty"`
	TempBlksRead      int64   `protobuf:"varint,13,opt,name=temp_blks_read,json=tempBlksRead" json:"temp_blks_read,omitempty"`
	TempBlksWritten   int64   `protobuf:"varint,14,opt,name=temp_blks_written,json=tempBlksWritten" json:"temp_blks_written,omitempty"`
	BlkReadTime       float64 `protobuf:"fixed64,15,opt,name=blk_read_time,json=blkReadTime" json:"blk_read_time,omitempty"`
	BlkWriteTime      float64 `protobuf:"fixed64,16,opt,name=blk_write_time,json=blkWriteTime" json:"blk_write_time,omitempty"`
}

func (m *QueryStatistic) Reset()                    { *m = QueryStatistic{} }
func (m *QueryStatistic) String() string            { return proto.CompactTextString(m) }
func (*QueryStatistic) ProtoMessage()               {}
func (*QueryStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type QueryExplain struct {
	QueryRef      int32   `protobuf:"varint,1,opt,name=query_ref,json=queryRef" json:"query_ref,omitempty"`
	OccurredAt    int64   `protobuf:"varint,4,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Runtime       float64 `protobuf:"fixed64,5,opt,name=runtime" json:"runtime,omitempty"`
	ExplainOutput string  `protobuf:"bytes,6,opt,name=explain_output,json=explainOutput" json:"explain_output,omitempty"`
	ExplainError  string  `protobuf:"bytes,7,opt,name=explain_error,json=explainError" json:"explain_error,omitempty"`
}

func (m *QueryExplain) Reset()                    { *m = QueryExplain{} }
func (m *QueryExplain) String() string            { return proto.CompactTextString(m) }
func (*QueryExplain) ProtoMessage()               {}
func (*QueryExplain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type RelationInformation struct {
	RelationRef    int32                             `protobuf:"varint,1,opt,name=relation_ref,json=relationRef" json:"relation_ref,omitempty"`
	RelationType   string                            `protobuf:"bytes,2,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	ViewDefinition *NullString                       `protobuf:"bytes,3,opt,name=view_definition,json=viewDefinition" json:"view_definition,omitempty"`
	Columns        []*RelationInformation_Column     `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`
	Constraints    []*RelationInformation_Constraint `protobuf:"bytes,5,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *RelationInformation) Reset()                    { *m = RelationInformation{} }
func (m *RelationInformation) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation) ProtoMessage()               {}
func (*RelationInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RelationInformation) GetViewDefinition() *NullString {
	if m != nil {
		return m.ViewDefinition
	}
	return nil
}

func (m *RelationInformation) GetColumns() []*RelationInformation_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *RelationInformation) GetConstraints() []*RelationInformation_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type RelationInformation_Column struct {
	Name         string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DataType     string      `protobuf:"bytes,3,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	DefaultValue *NullString `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	NotNull      bool        `protobuf:"varint,5,opt,name=not_null,json=notNull" json:"not_null,omitempty"`
	Position     int32       `protobuf:"varint,6,opt,name=position" json:"position,omitempty"`
}

func (m *RelationInformation_Column) Reset()                    { *m = RelationInformation_Column{} }
func (m *RelationInformation_Column) String() string            { return proto.CompactTextString(m) }
func (*RelationInformation_Column) ProtoMessage()               {}
func (*RelationInformation_Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *RelationInformation_Column) GetDefaultValue() *NullString {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type RelationInformation_Constraint struct {
	ForeignRelationRef int32   `protobuf:"varint,1,opt,name=foreign_relation_ref,json=foreignRelationRef" json:"foreign_relation_ref,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ConstraintDef      string  `protobuf:"bytes,4,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	Columns            []int32 `protobuf:"varint,5,rep,name=columns" json:"columns,omitempty"`
	ForeignColumns     []int32 `protobuf:"varint,6,rep,name=foreign_columns,json=foreignColumns" json:"foreign_columns,omitempty"`
	ForeignUpdateType  string  `protobuf:"bytes,7,opt,name=foreign_update_type,json=foreignUpdateType" json:"foreign_update_type,omitempty"`
	ForeignDeleteType  string  `protobuf:"bytes,8,opt,name=foreign_delete_type,json=foreignDeleteType" json:"foreign_delete_type,omitempty"`
	ForeignMatchType   string  `protobuf:"bytes,9,opt,name=foreign_match_type,json=foreignMatchType" json:"foreign_match_type,omitempty"`
}

func (m *RelationInformation_Constraint) Reset()         { *m = RelationInformation_Constraint{} }
func (m *RelationInformation_Constraint) String() string { return proto.CompactTextString(m) }
func (*RelationInformation_Constraint) ProtoMessage()    {}
func (*RelationInformation_Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 1}
}

type RelationStatistic struct {
	RelationRef      int32 `protobuf:"varint,1,opt,name=relation_ref,json=relationRef" json:"relation_ref,omitempty"`
	SizeBytes        int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	SeqScan          int64 `protobuf:"varint,3,opt,name=seq_scan,json=seqScan" json:"seq_scan,omitempty"`
	SeqTupRead       int64 `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead" json:"seq_tup_read,omitempty"`
	IdxScan          int64 `protobuf:"varint,5,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupFetch      int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	NTupIns          int64 `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns" json:"n_tup_ins,omitempty"`
	NTupUpd          int64 `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd" json:"n_tup_upd,omitempty"`
	NTupDel          int64 `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel" json:"n_tup_del,omitempty"`
	NTupHotUpd       int64 `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd" json:"n_tup_hot_upd,omitempty"`
	NLiveTup         int64 `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup" json:"n_live_tup,omitempty"`
	NDeadTup         int64 `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup" json:"n_dead_tup,omitempty"`
	NModSinceAnalyze int64 `protobuf:"varint,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze" json:"n_mod_since_analyze,omitempty"`
	HeapBlksRead     int64 `protobuf:"varint,18,opt,name=heap_blks_read,json=heapBlksRead" json:"heap_blks_read,omitempty"`
	HeapBlksHit      int64 `protobuf:"varint,19,opt,name=heap_blks_hit,json=heapBlksHit" json:"heap_blks_hit,omitempty"`
	IdxBlksRead      int64 `protobuf:"varint,20,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit       int64 `protobuf:"varint,21,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
	ToastBlksRead    int64 `protobuf:"varint,22,opt,name=toast_blks_read,json=toastBlksRead" json:"toast_blks_read,omitempty"`
	ToastBlksHit     int64 `protobuf:"varint,23,opt,name=toast_blks_hit,json=toastBlksHit" json:"toast_blks_hit,omitempty"`
	TidxBlksRead     int64 `protobuf:"varint,24,opt,name=tidx_blks_read,json=tidxBlksRead" json:"tidx_blks_read,omitempty"`
	TidxBlksHit      int64 `protobuf:"varint,25,opt,name=tidx_blks_hit,json=tidxBlksHit" json:"tidx_blks_hit,omitempty"`
}

func (m *RelationStatistic) Reset()                    { *m = RelationStatistic{} }
func (m *RelationStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationStatistic) ProtoMessage()               {}
func (*RelationStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type RelationEvent struct {
	RelationRef           int32                      `protobuf:"varint,1,opt,name=relation_ref,json=relationRef" json:"relation_ref,omitempty"`
	Type                  RelationEvent_EventType    `protobuf:"varint,2,opt,name=type,enum=pganalyze.collector.RelationEvent_EventType" json:"type,omitempty"`
	OccurredAt            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	ApproximateOccurredAt bool                       `protobuf:"varint,4,opt,name=approximate_occurred_at,json=approximateOccurredAt" json:"approximate_occurred_at,omitempty"`
}

func (m *RelationEvent) Reset()                    { *m = RelationEvent{} }
func (m *RelationEvent) String() string            { return proto.CompactTextString(m) }
func (*RelationEvent) ProtoMessage()               {}
func (*RelationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RelationEvent) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

type RelationBloatStatistic struct {
	RelationRef int32 `protobuf:"varint,1,opt,name=relation_ref,json=relationRef" json:"relation_ref,omitempty"`
	WastedBytes int64 `protobuf:"varint,2,opt,name=wasted_bytes,json=wastedBytes" json:"wasted_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *RelationBloatStatistic) Reset()                    { *m = RelationBloatStatistic{} }
func (m *RelationBloatStatistic) String() string            { return proto.CompactTextString(m) }
func (*RelationBloatStatistic) ProtoMessage()               {}
func (*RelationBloatStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type IndexInformation struct {
	IndexRef      int32       `protobuf:"varint,1,opt,name=index_ref,json=indexRef" json:"index_ref,omitempty"`
	RelationRef   int32       `protobuf:"varint,2,opt,name=relation_ref,json=relationRef" json:"relation_ref,omitempty"`
	Columns       []int32     `protobuf:"varint,3,rep,name=columns" json:"columns,omitempty"`
	IndexDef      string      `protobuf:"bytes,4,opt,name=index_def,json=indexDef" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,5,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	IsPrimary     bool        `protobuf:"varint,6,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,7,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,8,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
}

func (m *IndexInformation) Reset()                    { *m = IndexInformation{} }
func (m *IndexInformation) String() string            { return proto.CompactTextString(m) }
func (*IndexInformation) ProtoMessage()               {}
func (*IndexInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IndexInformation) GetConstraintDef() *NullString {
	if m != nil {
		return m.ConstraintDef
	}
	return nil
}

type IndexStatistic struct {
	IndexRef    int32 `protobuf:"varint,1,opt,name=index_ref,json=indexRef" json:"index_ref,omitempty"`
	SizeBytes   int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IdxScan     int64 `protobuf:"varint,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupRead  int64 `protobuf:"varint,4,opt,name=idx_tup_read,json=idxTupRead" json:"idx_tup_read,omitempty"`
	IdxTupFetch int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead int64 `protobuf:"varint,7,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit  int64 `protobuf:"varint,8,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
}

func (m *IndexStatistic) Reset()                    { *m = IndexStatistic{} }
func (m *IndexStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexStatistic) ProtoMessage()               {}
func (*IndexStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type IndexBloatStatistic struct {
	IndexRef    int32 `protobuf:"varint,1,opt,name=index_ref,json=indexRef" json:"index_ref,omitempty"`
	WastedBytes int64 `protobuf:"varint,2,opt,name=wasted_bytes,json=wastedBytes" json:"wasted_bytes,omitempty"`
	SizeBytes   int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
}

func (m *IndexBloatStatistic) Reset()                    { *m = IndexBloatStatistic{} }
func (m *IndexBloatStatistic) String() string            { return proto.CompactTextString(m) }
func (*IndexBloatStatistic) ProtoMessage()               {}
func (*IndexBloatStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type FunctionInformation struct {
	FunctionRef     int32       `protobuf:"varint,1,opt,name=function_ref,json=functionRef" json:"function_ref,omitempty"`
	Language        string      `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Source          string      `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	SourceBin       string      `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin" json:"source_bin,omitempty"`
	Config          *NullString `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
	Result          string      `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Aggregate       bool        `protobuf:"varint,9,opt,name=aggregate" json:"aggregate,omitempty"`
	Window          bool        `protobuf:"varint,10,opt,name=window" json:"window,omitempty"`
	SecurityDefiner bool        `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner" json:"security_definer,omitempty"`
	Leakproof       bool        `protobuf:"varint,12,opt,name=leakproof" json:"leakproof,omitempty"`
	Strict          bool        `protobuf:"varint,13,opt,name=strict" json:"strict,omitempty"`
	ReturnsSet      bool        `protobuf:"varint,14,opt,name=returns_set,json=returnsSet" json:"returns_set,omitempty"`
	Volatile        string      `protobuf:"bytes,15,opt,name=volatile" json:"volatile,omitempty"`
}

func (m *FunctionInformation) Reset()                    { *m = FunctionInformation{} }
func (m *FunctionInformation) String() string            { return proto.CompactTextString(m) }
func (*FunctionInformation) ProtoMessage()               {}
func (*FunctionInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FunctionInformation) GetConfig() *NullString {
	if m != nil {
		return m.Config
	}
	return nil
}

type FunctionStatistic struct {
	FunctionRef int32   `protobuf:"varint,1,opt,name=function_ref,json=functionRef" json:"function_ref,omitempty"`
	Calls       int64   `protobuf:"varint,2,opt,name=calls" json:"calls,omitempty"`
	TotalTime   float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	SelfTime    float64 `protobuf:"fixed64,4,opt,name=self_time,json=selfTime" json:"self_time,omitempty"`
}

func (m *FunctionStatistic) Reset()                    { *m = FunctionStatistic{} }
func (m *FunctionStatistic) String() string            { return proto.CompactTextString(m) }
func (*FunctionStatistic) ProtoMessage()               {}
func (*FunctionStatistic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type LogLine struct {
	OccurredAt      int64              `protobuf:"varint,1,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Source          LogLine_SourceType `protobuf:"varint,2,opt,name=source,enum=pganalyze.collector.LogLine_SourceType" json:"source,omitempty"`
	ClientIp        *NullString        `protobuf:"bytes,3,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	LogLevel        string             `protobuf:"bytes,4,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	BackendPid      int32              `protobuf:"varint,5,opt,name=backend_pid,json=backendPid" json:"backend_pid,omitempty"`
	Content         string             `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	AdditionalLines []*LogLine         `protobuf:"bytes,7,rep,name=additional_lines,json=additionalLines" json:"additional_lines,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LogLine) GetClientIp() *NullString {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *LogLine) GetAdditionalLines() []*LogLine {
	if m != nil {
		return m.AdditionalLines
	}
	return nil
}

type Setting struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Setting) GetUnit() *NullString {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Setting) GetBootValue() *NullString {
	if m != nil {
		return m.BootValue
	}
	return nil
}

func (m *Setting) GetResetValue() *NullString {
	if m != nil {
		return m.ResetValue
	}
	return nil
}

func (m *Setting) GetSource() *NullString {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Setting) GetSourceFile() *NullString {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Setting) GetSourceLine() *NullString {
	if m != nil {
		return m.SourceLine
	}
	return nil
}

type Backend struct {
	Pid             int64                      `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Username        string                     `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	ApplicationName string                     `protobuf:"bytes,3,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientAddr      string                     `protobuf:"bytes,4,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	BackendStart    *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	XactStart       *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=xact_start,json=xactStart" json:"xact_start,omitempty"`
	QueryStart      *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=query_start,json=queryStart" json:"query_start,omitempty"`
	StateChange     *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=state_change,json=stateChange" json:"state_change,omitempty"`
	Waiting         bool                       `protobuf:"varint,9,opt,name=waiting" json:"waiting,omitempty"`
	State           string                     `protobuf:"bytes,10,opt,name=state" json:"state,omitempty"`
	NormalizedQuery string                     `protobuf:"bytes,11,opt,name=normalized_query,json=normalizedQuery" json:"normalized_query,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Backend) GetBackendStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *Backend) GetXactStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.XactStart
	}
	return nil
}

func (m *Backend) GetQueryStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.QueryStart
	}
	return nil
}

func (m *Backend) GetStateChange() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateChange
	}
	return nil
}

type System struct {
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func init() {
	proto.RegisterType((*Snapshot)(nil), "pganalyze.collector.Snapshot")
	proto.RegisterType((*NullString)(nil), "pganalyze.collector.NullString")
	proto.RegisterType((*RelationReference)(nil), "pganalyze.collector.RelationReference")
	proto.RegisterType((*IndexReference)(nil), "pganalyze.collector.IndexReference")
	proto.RegisterType((*FunctionReference)(nil), "pganalyze.collector.FunctionReference")
	proto.RegisterType((*QueryReference)(nil), "pganalyze.collector.QueryReference")
	proto.RegisterType((*QueryInformation)(nil), "pganalyze.collector.QueryInformation")
	proto.RegisterType((*QueryStatistic)(nil), "pganalyze.collector.QueryStatistic")
	proto.RegisterType((*QueryExplain)(nil), "pganalyze.collector.QueryExplain")
	proto.RegisterType((*RelationInformation)(nil), "pganalyze.collector.RelationInformation")
	proto.RegisterType((*RelationInformation_Column)(nil), "pganalyze.collector.RelationInformation.Column")
	proto.RegisterType((*RelationInformation_Constraint)(nil), "pganalyze.collector.RelationInformation.Constraint")
	proto.RegisterType((*RelationStatistic)(nil), "pganalyze.collector.RelationStatistic")
	proto.RegisterType((*RelationEvent)(nil), "pganalyze.collector.RelationEvent")
	proto.RegisterType((*RelationBloatStatistic)(nil), "pganalyze.collector.RelationBloatStatistic")
	proto.RegisterType((*IndexInformation)(nil), "pganalyze.collector.IndexInformation")
	proto.RegisterType((*IndexStatistic)(nil), "pganalyze.collector.IndexStatistic")
	proto.RegisterType((*IndexBloatStatistic)(nil), "pganalyze.collector.IndexBloatStatistic")
	proto.RegisterType((*FunctionInformation)(nil), "pganalyze.collector.FunctionInformation")
	proto.RegisterType((*FunctionStatistic)(nil), "pganalyze.collector.FunctionStatistic")
	proto.RegisterType((*PostgresVersion)(nil), "pganalyze.collector.PostgresVersion")
	proto.RegisterType((*LogLine)(nil), "pganalyze.collector.LogLine")
	proto.RegisterType((*Setting)(nil), "pganalyze.collector.Setting")
	proto.RegisterType((*Backend)(nil), "pganalyze.collector.Backend")
	proto.RegisterType((*System)(nil), "pganalyze.collector.System")
	proto.RegisterEnum("pganalyze.collector.RelationEvent_EventType", RelationEvent_EventType_name, RelationEvent_EventType_value)
	proto.RegisterEnum("pganalyze.collector.LogLine_SourceType", LogLine_SourceType_name, LogLine_SourceType_value)
}

var fileDescriptor0 = []byte{
	// 2714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x59, 0x4b, 0x93, 0x23, 0x47,
	0xf1, 0xff, 0x6b, 0x34, 0x33, 0x92, 0x4a, 0xcf, 0xe9, 0x59, 0xaf, 0xe5, 0xfd, 0x9b, 0xb0, 0xdd,
	0x7e, 0x82, 0xcd, 0x2c, 0xb1, 0x1b, 0x60, 0x13, 0x60, 0xf0, 0xec, 0xce, 0x2e, 0x3b, 0x11, 0xb3,
	0x0f, 0x7a, 0x76, 0x96, 0xc7, 0x81, 0x8e, 0x1e, 0xa9, 0xa4, 0x69, 0xb6, 0xd5, 0xad, 0xed, 0x2a,
	0xcd, 0x63, 0x03, 0x0e, 0xdc, 0xf8, 0x0c, 0x7c, 0x02, 0x8e, 0x04, 0x07, 0x9f, 0xb9, 0x10, 0xc1,
	0xe3, 0x06, 0x04, 0x17, 0xc0, 0x3c, 0xcc, 0x99, 0x0b, 0x5f, 0x80, 0xcc, 0xac, 0xaa, 0xee, 0x6a,
	0x49, 0x2b, 0xc9, 0xe0, 0xcb, 0xc4, 0xd4, 0xaf, 0x7e, 0x99, 0x95, 0x95, 0x95, 0x95, 0x59, 0xd9,
	0x62, 0x2d, 0x11, 0x07, 0x63, 0x71, 0x92, 0xc8, 0x9d, 0x71, 0x9a, 0xc8, 0xc4, 0xd9, 0x1e, 0x0f,
	0x83, 0x38, 0x88, 0x2e, 0x9e, 0xf2, 0x9d, 0x5e, 0x12, 0x45, 0xbc, 0x27, 0x93, 0xf4, 0xca, 0x4b,
	0xc3, 0x24, 0x19, 0x46, 0xfc, 0x2a, 0x51, 0x8e, 0x27, 0x83, 0xab, 0x32, 0x1c, 0x71, 0x21, 0x83,
	0xd1, 0x58, 0x49, 0xb9, 0xbf, 0x6c, 0xb1, 0xea, 0xa1, 0x56, 0xe4, 0xbc, 0xcd, 0xb6, 0x32, 0x51,
	0xff, 0x94, 0xa7, 0x22, 0x4c, 0xe2, 0x6e, 0xe9, 0xe5, 0xd2, 0x5b, 0x35, 0xaf, 0x93, 0x4d, 0x3c,
	0x52, 0xb8, 0xf3, 0x3e, 0x6b, 0x68, 0x8c, 0xf7, 0xfd, 0x40, 0x76, 0xd7, 0x80, 0x57, 0xbf, 0x76,
	0x65, 0x47, 0xad, 0xb8, 0x63, 0x56, 0xdc, 0x79, 0x68, 0x56, 0xf4, 0xea, 0x19, 0x7f, 0x57, 0x3a,
	0xf7, 0x59, 0x67, 0x9c, 0x08, 0x39, 0x4c, 0xb9, 0xc8, 0x96, 0xe2, 0xa4, 0xe2, 0xb5, 0x9d, 0x39,
	0x3b, 0xd9, 0x79, 0xa0, 0xc9, 0x7a, 0x79, 0xaf, 0x3d, 0x2e, 0x02, 0xce, 0x17, 0xd8, 0x7a, 0x94,
	0x0c, 0x45, 0x77, 0xf0, 0x72, 0x19, 0x94, 0xbc, 0x38, 0x57, 0xc9, 0x41, 0x32, 0x3c, 0x08, 0x63,
	0xee, 0x11, 0xd3, 0x79, 0x8f, 0x55, 0x8f, 0x83, 0xde, 0x63, 0x1e, 0xf7, 0x45, 0x77, 0xb8, 0x40,
	0xea, 0x86, 0x22, 0x79, 0x19, 0x1b, 0x25, 0x05, 0x97, 0x32, 0x8c, 0x61, 0xbd, 0x93, 0x05, 0x92,
	0x87, 0x8a, 0xe4, 0x65, 0x6c, 0xe7, 0x2a, 0xdb, 0xee, 0x07, 0x32, 0x38, 0x0e, 0x04, 0xf7, 0x53,
	0x3e, 0xe0, 0x29, 0x8f, 0x7b, 0x5c, 0x74, 0x43, 0x50, 0x52, 0xf3, 0x1c, 0x33, 0xe5, 0x65, 0x33,
	0xce, 0x9b, 0xac, 0x3d, 0x11, 0x3c, 0xb5, 0xc9, 0xdf, 0x27, 0x72, 0x0b, 0x61, 0x8b, 0x08, 0x0e,
	0x7d, 0x32, 0xe1, 0xe9, 0x85, 0xcd, 0xfc, 0x55, 0x89, 0x8c, 0x7b, 0x75, 0xae, 0x71, 0xdf, 0x44,
	0x76, 0xa6, 0xc0, 0x6b, 0x3f, 0x29, 0x8c, 0x85, 0xf3, 0x6d, 0xb6, 0x9d, 0xf2, 0x28, 0x90, 0xe0,
	0x5c, 0x5b, 0xe7, 0xaf, 0x95, 0xce, 0x37, 0xe6, 0xea, 0xf4, 0xb4, 0x40, 0xae, 0xd6, 0x49, 0xa7,
	0x21, 0x32, 0x35, 0x8c, 0xfb, 0xfc, 0xdc, 0x56, 0xfb, 0x9b, 0x45, 0xa6, 0xee, 0x23, 0xdb, 0x32,
	0x35, 0x2c, 0x8c, 0xc9, 0xd4, 0xc1, 0x24, 0xee, 0x4d, 0x9b, 0xfa, 0xdb, 0x45, 0xa6, 0xde, 0xd6,
	0x02, 0x96, 0xa9, 0x83, 0x69, 0x48, 0x38, 0x47, 0xcc, 0x51, 0x5e, 0x0d, 0xe3, 0x41, 0x92, 0x8e,
	0x68, 0x27, 0xa2, 0xfb, 0x3b, 0xa5, 0xf8, 0xf5, 0x67, 0xfb, 0x75, 0x3f, 0xa7, 0x7b, 0x5b, 0x4f,
	0xa6, 0x10, 0xeb, 0xb0, 0xe0, 0x66, 0xc8, 0x50, 0xc8, 0xb0, 0x27, 0xba, 0xbf, 0x5f, 0x7a, 0x58,
	0x87, 0x86, 0xac, 0x0f, 0x2b, 0x1b, 0x0b, 0x67, 0x9f, 0xb5, 0x94, 0x42, 0x7e, 0x3e, 0x8e, 0x82,
	0x10, 0x6c, 0xfc, 0x83, 0x52, 0xf7, 0xca, 0xb3, 0xd5, 0xdd, 0x52, 0x54, 0xaf, 0xf9, 0xc4, 0x1a,
	0x09, 0xe7, 0x7b, 0xec, 0xb9, 0xec, 0xdc, 0x0b, 0xbb, 0xfe, 0xb3, 0xd2, 0xf8, 0xd6, 0xc2, 0x93,
	0xb7, 0x37, 0x7e, 0x29, 0x9d, 0x05, 0x8b, 0x71, 0x65, 0x6d, 0xff, 0x2f, 0xab, 0xc4, 0x55, 0xee,
	0x81, 0x2c, 0xae, 0x2c, 0x27, 0x9c, 0xb0, 0x17, 0x32, 0xcd, 0xc7, 0x51, 0x12, 0x48, 0x5b, 0xff,
	0x47, 0x4a, 0xff, 0xdb, 0x0b, 0xf5, 0xdf, 0x40, 0xa9, 0x7c, 0x91, 0xe7, 0xd3, 0xb9, 0xb8, 0x70,
	0x0e, 0x58, 0x3b, 0x5b, 0x89, 0x9f, 0xf2, 0x58, 0x8a, 0xee, 0x5f, 0x95, 0x7e, 0x77, 0xa1, 0xfe,
	0x5b, 0xc8, 0xf5, 0x5a, 0xa9, 0x3d, 0xa4, 0x20, 0x53, 0xf7, 0xa1, 0xe0, 0xee, 0xbf, 0x2d, 0x0a,
	0x32, 0xba, 0x11, 0x85, 0x20, 0x0b, 0xa7, 0x10, 0xeb, 0x9a, 0x59, 0x5e, 0xf8, 0xfb, 0xd2, 0x6b,
	0x66, 0x05, 0x59, 0x58, 0x18, 0x0b, 0xc7, 0x67, 0x97, 0x95, 0xc2, 0x19, 0xe7, 0xfe, 0x63, 0x51,
	0x68, 0x90, 0xda, 0x29, 0xcf, 0x5e, 0x0a, 0x67, 0x41, 0x0a, 0xbd, 0xec, 0x1e, 0x17, 0x7c, 0xf1,
	0xf1, 0x22, 0xfd, 0xe6, 0x26, 0x17, 0x42, 0x6f, 0x30, 0x0b, 0x16, 0xf3, 0x84, 0x65, 0xfd, 0x3f,
	0x57, 0xc9, 0x13, 0x56, 0xe8, 0x0d, 0xa6, 0x21, 0xe1, 0xbe, 0xc7, 0xd8, 0xbd, 0x49, 0x14, 0x1d,
	0xca, 0x14, 0xd2, 0xbc, 0x73, 0x89, 0x6d, 0x9c, 0x06, 0x51, 0xd8, 0xa7, 0xe2, 0x59, 0xf5, 0xd4,
	0x40, 0xa3, 0x13, 0x4e, 0xa5, 0xb2, 0xe6, 0xa9, 0x81, 0xfb, 0x03, 0xb6, 0x35, 0x93, 0x35, 0x9d,
	0x57, 0x58, 0x23, 0x2b, 0x13, 0x61, 0xff, 0x9c, 0xf4, 0x6c, 0x78, 0x75, 0x83, 0xed, 0xf7, 0xcf,
	0x9d, 0x97, 0x58, 0x5d, 0xf4, 0x4e, 0xf8, 0x28, 0xf0, 0xe3, 0x60, 0x64, 0x74, 0x32, 0x05, 0xdd,
	0x03, 0xc4, 0x79, 0x95, 0x35, 0xb3, 0x18, 0x25, 0x4a, 0x99, 0x28, 0x0d, 0x03, 0x22, 0xc9, 0x15,
	0xac, 0x55, 0x4c, 0xae, 0x9f, 0xca, 0xd2, 0x9f, 0x61, 0x4c, 0x05, 0x8a, 0xb5, 0x6e, 0x8d, 0x10,
	0x5a, 0xf4, 0x27, 0x25, 0xb6, 0x35, 0x93, 0x7e, 0x3f, 0xad, 0x3d, 0x67, 0x07, 0x6c, 0xef, 0xd9,
	0x80, 0x44, 0x7a, 0x91, 0xd5, 0x82, 0x74, 0x38, 0x19, 0xd1, 0xb5, 0x5d, 0x57, 0xc6, 0x65, 0x80,
	0x3b, 0x66, 0xad, 0x62, 0x65, 0x5c, 0xc5, 0xb0, 0x17, 0x58, 0x95, 0xaa, 0x34, 0x4e, 0xaf, 0xd1,
	0x74, 0x05, 0xc7, 0x38, 0xf5, 0x32, 0xab, 0x0f, 0x20, 0x26, 0x78, 0x3a, 0x86, 0xd0, 0x90, 0x64,
	0x50, 0xc3, 0xb3, 0x21, 0xf7, 0x8c, 0x75, 0xa6, 0x6b, 0x86, 0xf3, 0xff, 0xac, 0x96, 0x55, 0x73,
	0xbd, 0x60, 0xd5, 0x14, 0x68, 0xe7, 0xb3, 0xac, 0x13, 0x23, 0x33, 0x0a, 0x9f, 0xc2, 0xdb, 0x8b,
	0x60, 0xed, 0x8b, 0x76, 0x8e, 0x93, 0xca, 0x5c, 0x4f, 0x08, 0x8f, 0x9c, 0x32, 0x84, 0x79, 0x59,
	0xeb, 0xd9, 0xef, 0x0b, 0xf7, 0x5f, 0xeb, 0x7a, 0xaf, 0x59, 0x20, 0x2f, 0x5e, 0x17, 0x02, 0xb8,
	0x17, 0x44, 0x91, 0xa0, 0xc5, 0xca, 0x9e, 0x1a, 0xe0, 0x61, 0xcb, 0x44, 0x06, 0x91, 0x8f, 0x6f,
	0x4b, 0xda, 0x5f, 0xc9, 0xab, 0x11, 0x82, 0x4f, 0x3f, 0xc7, 0x61, 0xeb, 0x69, 0x72, 0xa6, 0x1c,
	0x5d, 0xf6, 0xe8, 0x7f, 0xe7, 0x0d, 0xd6, 0x16, 0x27, 0x41, 0x0a, 0xc6, 0x1f, 0x47, 0x8f, 0x85,
	0x7f, 0x12, 0xca, 0xee, 0x06, 0x4d, 0x37, 0x15, 0x7c, 0x03, 0xd0, 0x3b, 0xa1, 0x74, 0xde, 0x62,
	0x1d, 0x9b, 0x97, 0xf2, 0xa0, 0xdf, 0xdd, 0x24, 0x62, 0x2b, 0x27, 0x7a, 0x80, 0x3a, 0x3b, 0x6c,
	0xdb, 0x66, 0xf6, 0xc3, 0x54, 0x86, 0xbc, 0xdf, 0xad, 0x10, 0x79, 0x2b, 0x27, 0xef, 0xa9, 0x89,
	0x69, 0xfe, 0x59, 0x1a, 0x4a, 0xc9, 0xe3, 0x6e, 0x75, 0x9a, 0xff, 0x2d, 0x35, 0xe1, 0xbc, 0xc6,
	0x5a, 0x51, 0x02, 0xfb, 0xcd, 0x0d, 0xae, 0x11, 0xb5, 0x41, 0xa8, 0xb1, 0x17, 0xf6, 0x65, 0xb1,
	0xc8, 0x5c, 0xa6, 0xf6, 0x95, 0xd1, 0xc8, 0xda, 0x77, 0x98, 0x63, 0xf1, 0x8c, 0xb1, 0x75, 0xa2,
	0x76, 0x32, 0xaa, 0xb1, 0xb5, 0xc8, 0x36, 0xa6, 0x36, 0xa6, 0xd8, 0x96, 0xa5, 0x92, 0x8f, 0xc6,
	0x96, 0x09, 0x4d, 0x65, 0x29, 0xa2, 0x99, 0x05, 0x9f, 0x63, 0x5b, 0x39, 0xcb, 0xa8, 0x6c, 0x11,
	0xb1, 0x6d, 0x88, 0x46, 0xa3, 0xcb, 0x9a, 0x40, 0x23, 0x5d, 0xea, 0x8c, 0xdb, 0x74, 0xc6, 0x75,
	0x00, 0x51, 0x17, 0x9d, 0x32, 0xac, 0x8a, 0x1c, 0xd4, 0xc4, 0x15, 0xa9, 0x43, 0xa4, 0x06, 0xa0,
	0xa8, 0x87, 0x23, 0xcb, 0xfd, 0x79, 0x89, 0x35, 0xec, 0xa7, 0xc7, 0xe2, 0x70, 0x83, 0xdb, 0x9e,
	0xf4, 0x7a, 0x93, 0x34, 0x55, 0x0d, 0x86, 0x0a, 0x20, 0x66, 0x20, 0xe8, 0x21, 0xba, 0xac, 0x92,
	0x4e, 0x62, 0x5a, 0x6d, 0x83, 0x56, 0x33, 0x43, 0xe7, 0x75, 0xd6, 0xd2, 0x0f, 0x21, 0x3f, 0x99,
	0xc8, 0xf1, 0x44, 0x52, 0xd8, 0xd4, 0xbc, 0xa6, 0x46, 0xef, 0x13, 0x88, 0xe9, 0xc2, 0xd0, 0x78,
	0x9a, 0x26, 0x29, 0xc5, 0x0b, 0xa4, 0x0b, 0x0d, 0xde, 0x42, 0xcc, 0xfd, 0x78, 0x93, 0x6d, 0xcf,
	0x79, 0xdd, 0x60, 0x5a, 0xb0, 0xdf, 0xc7, 0x26, 0x2d, 0x58, 0xef, 0xdd, 0x42, 0x0a, 0x96, 0x17,
	0x63, 0x93, 0xb1, 0x32, 0xb9, 0x87, 0x80, 0x39, 0x77, 0x58, 0xfb, 0x34, 0xe4, 0x67, 0x7e, 0x9f,
	0x43, 0x52, 0x08, 0x11, 0xa6, 0x4b, 0x54, 0xbf, 0xf6, 0xd2, 0xdc, 0x7a, 0x94, 0x97, 0x19, 0xaf,
	0x85, 0x72, 0x7b, 0x99, 0x18, 0x3c, 0x02, 0x2b, 0xc0, 0x9b, 0x8c, 0x62, 0xbc, 0x6d, 0x58, 0xd1,
	0xae, 0xae, 0xfa, 0x54, 0xdb, 0xb9, 0x49, 0x72, 0x9e, 0x91, 0x87, 0x27, 0x09, 0x74, 0x6b, 0xb1,
	0x90, 0x29, 0xb8, 0x01, 0xb2, 0xe4, 0x06, 0xa9, 0xbb, 0xfe, 0x09, 0xd4, 0x19, 0x59, 0xcf, 0xd6,
	0x73, 0xe5, 0xc3, 0x12, 0xdb, 0x54, 0x4b, 0x61, 0x5e, 0xb0, 0x92, 0x38, 0xfd, 0x8f, 0xe1, 0x80,
	0x59, 0x55, 0xf9, 0x4a, 0xa5, 0xee, 0x2a, 0x02, 0xe4, 0xa7, 0x3d, 0xd6, 0x04, 0x17, 0x05, 0x93,
	0x48, 0xfa, 0xaa, 0x8c, 0xae, 0xaf, 0xe6, 0xa5, 0x86, 0x96, 0x7a, 0x84, 0x42, 0x98, 0xa9, 0xe3,
	0x44, 0xfa, 0x31, 0xcc, 0x53, 0xd0, 0x54, 0xbd, 0x0a, 0x8c, 0x91, 0xee, 0x5c, 0x61, 0x55, 0x68,
	0x2a, 0xd5, 0x09, 0x6c, 0xaa, 0x58, 0x34, 0xe3, 0x2b, 0x1f, 0xad, 0x31, 0x96, 0x6f, 0x0a, 0x9a,
	0xcd, 0x4b, 0xb0, 0x59, 0x1e, 0x0e, 0xf1, 0xe8, 0x67, 0x62, 0xc0, 0xd1, 0x73, 0x56, 0x5d, 0x9f,
	0xbb, 0x5d, 0xc0, 0xac, 0x9d, 0xd2, 0xff, 0x18, 0xb9, 0xb9, 0xc3, 0x30, 0x26, 0x74, 0x85, 0x6a,
	0xe6, 0x28, 0x9c, 0x38, 0x86, 0xbe, 0x39, 0x6a, 0x3c, 0x9b, 0x8d, 0xfc, 0xe4, 0xa0, 0x61, 0x34,
	0xa6, 0x19, 0xc6, 0x26, 0x31, 0x5a, 0x1a, 0xbe, 0xa9, 0x89, 0x90, 0x02, 0x0d, 0x71, 0x32, 0x06,
	0x2f, 0x73, 0xe5, 0x76, 0x75, 0x05, 0xb6, 0xf4, 0xd4, 0x11, 0xcd, 0x90, 0xff, 0x2d, 0x7e, 0x9f,
	0x47, 0xdc, 0xf0, 0xab, 0x05, 0xfe, 0x1e, 0xcd, 0x10, 0x1f, 0xd2, 0x96, 0xe1, 0x43, 0x54, 0xf4,
	0x4e, 0x14, 0xbd, 0xa6, 0x3e, 0x27, 0xe8, 0x99, 0xbb, 0x38, 0x81, 0x6c, 0xf7, 0x4f, 0x1b, 0xf9,
	0x3b, 0x28, 0x2f, 0x47, 0x2b, 0xdc, 0x31, 0x28, 0x3f, 0x02, 0xea, 0x9d, 0x7f, 0x7c, 0x21, 0xb9,
	0xa9, 0x4c, 0x35, 0x44, 0x6e, 0x20, 0x80, 0xe7, 0x2d, 0xf8, 0x13, 0x5f, 0xf4, 0x02, 0x75, 0xad,
	0xca, 0x5e, 0x05, 0xc6, 0x87, 0x30, 0x84, 0xca, 0xdc, 0xc0, 0x29, 0x39, 0x19, 0xab, 0x3c, 0xa9,
	0x13, 0x0c, 0x60, 0x0f, 0x27, 0x63, 0xca, 0x92, 0x20, 0x0c, 0x15, 0x5d, 0x09, 0xab, 0x02, 0x55,
	0x81, 0x31, 0x09, 0x43, 0x52, 0xc4, 0x29, 0x14, 0x1e, 0x70, 0xd8, 0x84, 0xae, 0x4b, 0x75, 0x00,
	0x41, 0xfa, 0x36, 0x42, 0x10, 0x50, 0xb5, 0x98, 0x18, 0xd8, 0x8f, 0xa9, 0x52, 0x54, 0x89, 0x61,
	0x76, 0x1f, 0xbc, 0x9f, 0xcd, 0x81, 0xef, 0x75, 0xd9, 0xa1, 0x39, 0x70, 0x78, 0x3e, 0x07, 0x7e,
	0xd6, 0x75, 0x86, 0xe6, 0xc0, 0xb9, 0xe0, 0x91, 0xa6, 0x9a, 0x3b, 0x81, 0x28, 0x46, 0x59, 0x55,
	0x60, 0x18, 0xce, 0xdf, 0x49, 0x24, 0x8a, 0xbf, 0xc8, 0x58, 0xec, 0x47, 0xe1, 0x29, 0x47, 0x9e,
	0xae, 0x2a, 0xd5, 0xf8, 0x00, 0x00, 0xe0, 0xa8, 0xd9, 0x3e, 0xe5, 0x72, 0x98, 0x6d, 0xe8, 0xd9,
	0x3d, 0x4c, 0xe4, 0x30, 0xfb, 0x79, 0xb6, 0x0d, 0xc7, 0x95, 0xf4, 0x7d, 0x11, 0xc2, 0xd3, 0xc7,
	0xd7, 0x17, 0x4b, 0x97, 0x90, 0x4e, 0x7c, 0x37, 0xe9, 0x1f, 0xe2, 0xc4, 0xae, 0xc2, 0x31, 0xed,
	0x9f, 0xf0, 0xc0, 0x2e, 0x36, 0x8e, 0x2a, 0x36, 0x88, 0x66, 0xc5, 0x06, 0x7c, 0x95, 0xb3, 0xb0,
	0x76, 0x6e, 0x2b, 0x5f, 0x19, 0x12, 0x96, 0x4e, 0xed, 0xcf, 0x5c, 0xd1, 0xa5, 0xcc, 0x9f, 0x99,
	0x1e, 0x38, 0xb0, 0x8c, 0x83, 0x6a, 0x9e, 0x53, 0x5b, 0xd7, 0x14, 0x5d, 0x80, 0x65, 0x12, 0x08,
	0x69, 0xe9, 0xb9, 0xac, 0x0a, 0x30, 0xc1, 0x99, 0x26, 0x2c, 0x92, 0x39, 0x0f, 0x75, 0x3d, 0xaf,
	0x8b, 0xa4, 0xa1, 0xa1, 0x36, 0x64, 0x15, 0x8d, 0xea, 0x6a, 0x96, 0x6d, 0x15, 0x58, 0x2e, 0x0b,
	0x66, 0xbd, 0xa0, 0x2c, 0x97, 0xb9, 0x5d, 0xee, 0x2f, 0xd6, 0x58, 0xb3, 0xd0, 0x03, 0xae, 0x12,
	0xd9, 0x1f, 0xe8, 0xf4, 0x80, 0x31, 0xdd, 0xba, 0xf6, 0xce, 0xf2, 0xc6, 0x72, 0x87, 0xfe, 0xe2,
	0x75, 0xd2, 0xc9, 0xe4, 0x2b, 0xc5, 0x0a, 0x5a, 0x5e, 0xfa, 0x89, 0xce, 0xae, 0xae, 0x5f, 0x62,
	0xcf, 0x07, 0x63, 0xe0, 0x9c, 0x87, 0x23, 0x4c, 0x0e, 0xd3, 0xa5, 0xb8, 0xea, 0x3d, 0x67, 0x4d,
	0xdf, 0xcf, 0xe4, 0xdc, 0x23, 0x56, 0xcb, 0xec, 0x70, 0xb6, 0x58, 0xf3, 0xee, 0xee, 0xbd, 0xa3,
	0xdd, 0x03, 0xff, 0xd1, 0xee, 0xcd, 0xa3, 0xa3, 0xbb, 0x9d, 0xff, 0x73, 0xda, 0xac, 0xbe, 0x7b,
	0xf4, 0xf0, 0xbe, 0x01, 0x4a, 0x90, 0x06, 0x5b, 0x9a, 0xb3, 0x7b, 0x6f, 0xf7, 0xe0, 0x3b, 0xdf,
	0xbd, 0xd5, 0x59, 0x73, 0x3a, 0xac, 0x41, 0x24, 0x83, 0x94, 0xdd, 0x1f, 0xb2, 0xcb, 0xf3, 0xbb,
	0xf4, 0x55, 0x5c, 0x09, 0x94, 0x33, 0x38, 0x58, 0x7c, 0xee, 0x59, 0x69, 0xa2, 0xae, 0x30, 0x95,
	0x28, 0x8a, 0x79, 0xa4, 0x3c, 0x95, 0x47, 0xdc, 0x9f, 0xae, 0xb1, 0xce, 0x74, 0xd3, 0x8d, 0xf5,
	0x2a, 0xfb, 0x90, 0x65, 0x9e, 0x2f, 0xe6, 0xdb, 0xd4, 0x8c, 0x59, 0x6b, 0xb3, 0x66, 0x59, 0x59,
	0xbc, 0x5c, 0xcc, 0xe2, 0x99, 0xe6, 0xbc, 0x02, 0x28, 0xcd, 0x98, 0xfc, 0x6f, 0xcf, 0xd4, 0x88,
	0x8d, 0xd5, 0x4a, 0xe1, 0x54, 0x11, 0xc1, 0x36, 0x4d, 0xf8, 0xd0, 0x84, 0x8c, 0x02, 0xe8, 0x20,
	0x36, 0xe9, 0x50, 0x6b, 0xa1, 0x78, 0xa0, 0x00, 0xb2, 0x41, 0xf8, 0x93, 0x38, 0x84, 0x17, 0x19,
	0xa5, 0xaf, 0x2a, 0xd8, 0x20, 0x8e, 0x68, 0x4c, 0xa9, 0x51, 0xf8, 0xaa, 0xcb, 0xad, 0xaa, 0x3a,
	0x1a, 0x8a, 0x47, 0x38, 0x74, 0xff, 0x5d, 0xd2, 0x4d, 0x65, 0xa1, 0xad, 0x78, 0xb6, 0xa3, 0x96,
	0x67, 0xf0, 0x2c, 0x09, 0x97, 0x8b, 0x49, 0x58, 0x27, 0x84, 0xe9, 0x0c, 0xae, 0x72, 0xb0, 0xb9,
	0x9c, 0x4b, 0xd3, 0xf4, 0x4c, 0xea, 0xa9, 0x2c, 0x4f, 0x3d, 0xd5, 0xe9, 0xd4, 0xe3, 0x4a, 0xb6,
	0x3d, 0xe7, 0x43, 0xc7, 0xd2, 0x10, 0xf9, 0x1f, 0xc3, 0xf2, 0x67, 0x65, 0xb6, 0x3d, 0xe7, 0xfb,
	0x07, 0x6a, 0xb6, 0xbf, 0x88, 0x9a, 0x3b, 0x61, 0x7d, 0xe1, 0xc4, 0xe7, 0x4e, 0x14, 0xc4, 0xc3,
	0x49, 0x30, 0xcc, 0xde, 0x5a, 0x66, 0xec, 0x5c, 0x66, 0x9b, 0x22, 0x99, 0xa4, 0x3d, 0xae, 0x63,
	0x4f, 0x8f, 0xc8, 0x1a, 0xfa, 0xcf, 0x3f, 0x0e, 0x55, 0x49, 0x84, 0xde, 0x59, 0x21, 0x37, 0xe0,
	0x39, 0xff, 0x2e, 0xdb, 0x84, 0x08, 0x1b, 0x84, 0x43, 0x72, 0xf3, 0x0a, 0x01, 0xa9, 0xe9, 0xb8,
	0x5e, 0xca, 0x05, 0x3c, 0xd2, 0xf4, 0x73, 0x42, 0x8f, 0xa8, 0x55, 0x1f, 0x0e, 0x53, 0x3e, 0x84,
	0x14, 0x43, 0x95, 0x10, 0x02, 0x34, 0x03, 0x50, 0xea, 0x0c, 0x7c, 0x99, 0x9c, 0x51, 0x11, 0xac,
	0x7a, 0x7a, 0x84, 0xfd, 0xb1, 0xe0, 0x90, 0x8f, 0x42, 0x79, 0xa1, 0x5e, 0xd5, 0x3c, 0xa5, 0x32,
	0x58, 0xf5, 0xda, 0x06, 0xdf, 0x53, 0x30, 0x2e, 0x10, 0xf1, 0xe0, 0x31, 0xe4, 0xb1, 0x64, 0x40,
	0xc5, 0x10, 0x16, 0xc8, 0x00, 0x72, 0x03, 0x18, 0xda, 0x93, 0x54, 0x00, 0x61, 0x01, 0x35, 0xc2,
	0xce, 0x24, 0xe5, 0x72, 0x92, 0xc6, 0xc2, 0x17, 0x5c, 0x52, 0xdf, 0x54, 0xf5, 0x98, 0x86, 0x0e,
	0xb9, 0x44, 0xdf, 0x9e, 0x26, 0x78, 0xcf, 0x23, 0xd5, 0x2d, 0x81, 0x6f, 0xcd, 0xd8, 0xfd, 0xb1,
	0xf5, 0xf5, 0xa3, 0x90, 0xc4, 0x96, 0x1d, 0xd8, 0x7f, 0xd5, 0x7e, 0x43, 0xfc, 0x09, 0x1e, 0x0d,
	0xd4, 0xec, 0x3a, 0xcd, 0x56, 0x11, 0xa0, 0x7e, 0xec, 0x88, 0xb5, 0xa7, 0x7e, 0x57, 0xc1, 0x37,
	0xe9, 0x00, 0xdf, 0xc6, 0xea, 0x67, 0x1f, 0xfa, 0x1f, 0x17, 0x16, 0x27, 0x49, 0x2a, 0xcd, 0x87,
	0x2b, 0x1a, 0x60, 0xf2, 0x8a, 0x27, 0x23, 0x0e, 0x0e, 0x31, 0xd7, 0x52, 0x0f, 0xdd, 0x1f, 0x95,
	0x59, 0x45, 0xff, 0xd4, 0x32, 0xdd, 0xc4, 0x95, 0x66, 0x9a, 0xb8, 0xaf, 0x67, 0xa1, 0xa6, 0xea,
	0xdc, 0x9b, 0x8b, 0x7e, 0xb9, 0xd9, 0x39, 0x24, 0x2a, 0x95, 0x38, 0x13, 0x93, 0x5f, 0x65, 0xb5,
	0x5e, 0x14, 0x42, 0xc1, 0xf1, 0xc3, 0xf1, 0xaa, 0x9d, 0x53, 0x55, 0x49, 0xec, 0x8f, 0xd1, 0x3f,
	0x51, 0x32, 0xf4, 0x23, 0x7e, 0x0a, 0x6f, 0x2d, 0x9d, 0x68, 0x01, 0x38, 0xc0, 0x31, 0x1a, 0xaf,
	0x7f, 0xf3, 0xf1, 0xc7, 0x90, 0xe7, 0x36, 0xe8, 0x4c, 0x98, 0x86, 0x1e, 0x84, 0x7d, 0x95, 0xc0,
	0x63, 0x68, 0x92, 0x4d, 0x83, 0x69, 0x86, 0xce, 0x37, 0x58, 0x27, 0xe8, 0xf7, 0xa9, 0x79, 0x80,
	0xb3, 0x89, 0xc0, 0x76, 0x7c, 0x02, 0x2e, 0xff, 0x69, 0xaa, 0x9d, 0x4b, 0xe1, 0x58, 0xb8, 0x5f,
	0x64, 0x2c, 0xdf, 0x34, 0xd6, 0x4a, 0x73, 0x62, 0x0a, 0x85, 0x82, 0xba, 0xcd, 0xda, 0xbb, 0xa3,
	0xe0, 0x29, 0x04, 0x49, 0xdf, 0x80, 0x25, 0xf7, 0x43, 0x38, 0x03, 0xfd, 0xf3, 0x53, 0xd6, 0x7b,
	0x94, 0xac, 0xde, 0x03, 0x5a, 0x53, 0x3a, 0x82, 0xd8, 0x74, 0x53, 0xba, 0x35, 0xd5, 0xa0, 0x6a,
	0x96, 0xae, 0xb3, 0x75, 0x48, 0xff, 0x72, 0x55, 0xaf, 0x12, 0xd9, 0xf9, 0x1a, 0x63, 0xc7, 0x49,
	0xf2, 0x09, 0x9b, 0xb4, 0x1a, 0x8a, 0xa8, 0x45, 0x3f, 0xc0, 0xcb, 0x05, 0xd7, 0x4a, 0x2b, 0x58,
	0xb1, 0xb4, 0x31, 0x92, 0x51, 0x1a, 0xde, 0xcd, 0x42, 0x6a, 0xd5, 0x34, 0xa4, 0x43, 0x09, 0x96,
	0xd6, 0xe9, 0x6d, 0x80, 0x37, 0xb7, 0xb2, 0xe2, 0xd2, 0x4a, 0xe6, 0x36, 0x88, 0x58, 0x1a, 0xf0,
	0xc8, 0x29, 0x9b, 0xad, 0xae, 0x01, 0x0f, 0xdc, 0xfd, 0x23, 0x1c, 0x9c, 0xfe, 0xc5, 0x11, 0x5e,
	0x41, 0xe5, 0xb1, 0xfe, 0x8a, 0x5c, 0xf6, 0xf0, 0x5f, 0x4c, 0x2c, 0xf8, 0x61, 0xd1, 0x6a, 0x25,
	0xb3, 0x31, 0xa6, 0x3d, 0x78, 0x91, 0x45, 0x61, 0x6f, 0xe6, 0x9b, 0x6f, 0xdb, 0xc2, 0xe9, 0x13,
	0x28, 0x04, 0xb6, 0xbe, 0x33, 0x10, 0x6e, 0xa9, 0x8e, 0x7b, 0xa6, 0xa0, 0x5d, 0x40, 0xe0, 0x56,
	0x36, 0x4d, 0xe4, 0xc3, 0xcb, 0x30, 0x95, 0xfa, 0x18, 0x16, 0xbd, 0x1d, 0x1b, 0x5a, 0xe0, 0x10,
	0xf9, 0xce, 0x97, 0x19, 0x3b, 0x0f, 0x7a, 0x52, 0x4b, 0x6f, 0x2e, 0x95, 0xae, 0x21, 0x5b, 0x89,
	0xc2, 0xab, 0x35, 0xfb, 0x71, 0x0c, 0x64, 0x2b, 0xcb, 0x5f, 0xad, 0xe6, 0xd7, 0x30, 0x10, 0x7e,
	0x1f, 0x9a, 0x3a, 0x89, 0xef, 0xd5, 0xde, 0x09, 0x14, 0x33, 0x73, 0x02, 0x0b, 0x7f, 0x96, 0x26,
	0xfe, 0x4d, 0xa2, 0xe3, 0x85, 0x3e, 0x0b, 0x42, 0xbc, 0x35, 0xba, 0xdc, 0x98, 0x21, 0x25, 0x41,
	0x24, 0x52, 0xad, 0xc1, 0x24, 0x88, 0x83, 0xb9, 0x9f, 0x62, 0xeb, 0x73, 0x3f, 0xc5, 0xba, 0x55,
	0xb6, 0x79, 0x78, 0x01, 0x85, 0x7d, 0x74, 0xbc, 0x49, 0x56, 0x5c, 0xff, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x10, 0x58, 0xa1, 0x32, 0xc3, 0x1f, 0x00, 0x00,
}
