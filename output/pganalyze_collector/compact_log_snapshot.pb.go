// Code generated by protoc-gen-go.
// source: compact_log_snapshot.proto
// DO NOT EDIT!

package pganalyze_collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogLineInformation_LogLevel int32

const (
	LogLineInformation_UNKNOWN LogLineInformation_LogLevel = 0
	// Postgres log levels https://www.postgresql.org/docs/9.6/static/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS
	LogLineInformation_DEBUG   LogLineInformation_LogLevel = 1
	LogLineInformation_INFO    LogLineInformation_LogLevel = 2
	LogLineInformation_NOTICE  LogLineInformation_LogLevel = 3
	LogLineInformation_WARNING LogLineInformation_LogLevel = 4
	LogLineInformation_ERROR   LogLineInformation_LogLevel = 5
	LogLineInformation_LOG     LogLineInformation_LogLevel = 6
	LogLineInformation_FATAL   LogLineInformation_LogLevel = 7
	LogLineInformation_PANIC   LogLineInformation_LogLevel = 8
	// These levels are typically only used in additional lines for context
	LogLineInformation_DETAIL    LogLineInformation_LogLevel = 9
	LogLineInformation_HINT      LogLineInformation_LogLevel = 10
	LogLineInformation_CONTEXT   LogLineInformation_LogLevel = 11
	LogLineInformation_STATEMENT LogLineInformation_LogLevel = 12
	LogLineInformation_QUERY     LogLineInformation_LogLevel = 13
)

var LogLineInformation_LogLevel_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "DEBUG",
	2:  "INFO",
	3:  "NOTICE",
	4:  "WARNING",
	5:  "ERROR",
	6:  "LOG",
	7:  "FATAL",
	8:  "PANIC",
	9:  "DETAIL",
	10: "HINT",
	11: "CONTEXT",
	12: "STATEMENT",
	13: "QUERY",
}
var LogLineInformation_LogLevel_value = map[string]int32{
	"UNKNOWN":   0,
	"DEBUG":     1,
	"INFO":      2,
	"NOTICE":    3,
	"WARNING":   4,
	"ERROR":     5,
	"LOG":       6,
	"FATAL":     7,
	"PANIC":     8,
	"DETAIL":    9,
	"HINT":      10,
	"CONTEXT":   11,
	"STATEMENT": 12,
	"QUERY":     13,
}

func (x LogLineInformation_LogLevel) String() string {
	return proto.EnumName(LogLineInformation_LogLevel_name, int32(x))
}
func (LogLineInformation_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{2, 0}
}

type LogLineInformation_LogClassification int32

const (
	LogLineInformation_UNKNOWN_LOG_CLASSIFICATION LogLineInformation_LogClassification = 0
	// Server events
	LogLineInformation_SERVER_CRASHED           LogLineInformation_LogClassification = 1
	LogLineInformation_SERVER_START             LogLineInformation_LogClassification = 2
	LogLineInformation_SERVER_START_RECOVERING  LogLineInformation_LogClassification = 3
	LogLineInformation_SERVER_SHUTDOWN          LogLineInformation_LogClassification = 4
	LogLineInformation_SERVER_OUT_OF_MEMORY     LogLineInformation_LogClassification = 5
	LogLineInformation_SERVER_INVALID_CHECKSUM  LogLineInformation_LogClassification = 6
	LogLineInformation_SERVER_TEMP_FILE_CREATED LogLineInformation_LogClassification = 7
	LogLineInformation_SERVER_MISC              LogLineInformation_LogClassification = 8
	LogLineInformation_SERVER_RELOAD            LogLineInformation_LogClassification = 9
	// Connection-related
	LogLineInformation_CONNECTION_RECEIVED                 LogLineInformation_LogClassification = 20
	LogLineInformation_CONNECTION_AUTHORIZED               LogLineInformation_LogClassification = 21
	LogLineInformation_CONNECTION_REJECTED                 LogLineInformation_LogClassification = 22
	LogLineInformation_CONNECTION_DISCONNECTED             LogLineInformation_LogClassification = 23
	LogLineInformation_CONNECTION_CLIENT_FAILED_TO_CONNECT LogLineInformation_LogClassification = 24
	LogLineInformation_CONNECTION_LOST                     LogLineInformation_LogClassification = 25
	LogLineInformation_CONNECTION_LOST_OPEN_TX             LogLineInformation_LogClassification = 26
	LogLineInformation_CONNECTION_TERMINATED               LogLineInformation_LogClassification = 27
	LogLineInformation_OUT_OF_CONNECTIONS                  LogLineInformation_LogClassification = 28
	LogLineInformation_TOO_MANY_CONNECTIONS_ROLE           LogLineInformation_LogClassification = 29
	LogLineInformation_COULD_NOT_ACCEPT_SSL_CONNECTION     LogLineInformation_LogClassification = 30
	LogLineInformation_PROTOCOL_ERROR_UNSUPPORTED_VERSION  LogLineInformation_LogClassification = 31
	LogLineInformation_PROTOCOL_ERROR_INCOMPLETE_MESSAGE   LogLineInformation_LogClassification = 32
	// Checkpointer related
	LogLineInformation_CHECKPOINT_STARTING     LogLineInformation_LogClassification = 40
	LogLineInformation_CHECKPOINT_COMPLETE     LogLineInformation_LogClassification = 41
	LogLineInformation_CHECKPOINT_TOO_FREQUENT LogLineInformation_LogClassification = 42
	LogLineInformation_RESTARTPOINT_STARTING   LogLineInformation_LogClassification = 43
	LogLineInformation_RESTARTPOINT_COMPLETE   LogLineInformation_LogClassification = 44
	LogLineInformation_RESTARTPOINT_AT         LogLineInformation_LogClassification = 45
	// WAL/Archiving
	LogLineInformation_WAL_INVALID_RECORD_LENGTH LogLineInformation_LogClassification = 50
	LogLineInformation_WAL_REDO                  LogLineInformation_LogClassification = 51
	// Autovacuum
	LogLineInformation_AUTOVACUUM_CANCEL                 LogLineInformation_LogClassification = 60
	LogLineInformation_TXID_WRAPAROUND_WARNING           LogLineInformation_LogClassification = 61
	LogLineInformation_TXID_WRAPAROUND_ERROR             LogLineInformation_LogClassification = 62
	LogLineInformation_AUTOVACUUM_LAUNCHER_STARTED       LogLineInformation_LogClassification = 63
	LogLineInformation_AUTOVACUUM_LAUNCHER_SHUTTING_DOWN LogLineInformation_LogClassification = 64
	LogLineInformation_AUTOVACUUM_COMPLETED              LogLineInformation_LogClassification = 65
	LogLineInformation_AUTOANALYZE_COMPLETED             LogLineInformation_LogClassification = 66
	// Locks
	LogLineInformation_LOCK_ACQUIRED          LogLineInformation_LogClassification = 70
	LogLineInformation_LOCK_WAITING           LogLineInformation_LogClassification = 71
	LogLineInformation_LOCK_TIMEOUT           LogLineInformation_LogClassification = 72
	LogLineInformation_LOCK_DEADLOCK_DETECTED LogLineInformation_LogClassification = 73
	LogLineInformation_LOCK_DEADLOCK_AVOIDED  LogLineInformation_LogClassification = 74
	// Notices about statement execution
	LogLineInformation_STATEMENT_DURATION         LogLineInformation_LogClassification = 80
	LogLineInformation_STATEMENT_CANCELED_TIMEOUT LogLineInformation_LogClassification = 81
	LogLineInformation_STATEMENT_CANCELED_USER    LogLineInformation_LogClassification = 82
	LogLineInformation_STATEMENT_LOG              LogLineInformation_LogClassification = 83
	LogLineInformation_STATEMENT_AUTO_EXPLAIN     LogLineInformation_LogClassification = 84
	// Standby
	LogLineInformation_STANDBY_RESTORED_WAL_FROM_ARCHIVE LogLineInformation_LogClassification = 90
	LogLineInformation_STANDBY_STARTED_STREAMING         LogLineInformation_LogClassification = 91
	LogLineInformation_STANDBY_STREAMING_INTERRUPTED     LogLineInformation_LogClassification = 92
	LogLineInformation_STANDBY_STOPPED_STREAMING         LogLineInformation_LogClassification = 93
	LogLineInformation_STANDBY_CONSISTENT_RECOVERY_STATE LogLineInformation_LogClassification = 94
	LogLineInformation_STANDBY_STATEMENT_CANCELED        LogLineInformation_LogClassification = 95
	LogLineInformation_STANDBY_INVALID_TIMELINE          LogLineInformation_LogClassification = 96
	// Constraint violations
	LogLineInformation_UNIQUE_CONSTRAINT_VIOLATION      LogLineInformation_LogClassification = 100
	LogLineInformation_FOREIGN_KEY_CONSTRAINT_VIOLATION LogLineInformation_LogClassification = 101
	LogLineInformation_NOT_NULL_CONSTRAINT_VIOLATION    LogLineInformation_LogClassification = 102
	LogLineInformation_CHECK_CONSTRAINT_VIOLATION       LogLineInformation_LogClassification = 103
	LogLineInformation_EXCLUSION_CONSTRAINT_VIOLATION   LogLineInformation_LogClassification = 104
	// Application errors
	LogLineInformation_SYNTAX_ERROR                    LogLineInformation_LogClassification = 110
	LogLineInformation_INVALID_INPUT_SYNTAX            LogLineInformation_LogClassification = 111
	LogLineInformation_VALUE_TOO_LONG_FOR_TYPE         LogLineInformation_LogClassification = 112
	LogLineInformation_INVALID_VALUE                   LogLineInformation_LogClassification = 113
	LogLineInformation_MALFORMED_ARRAY_LITERAL         LogLineInformation_LogClassification = 114
	LogLineInformation_SUBQUERY_MISSING_ALIAS          LogLineInformation_LogClassification = 115
	LogLineInformation_INSERT_TARGET_COLUMN_MISMATCH   LogLineInformation_LogClassification = 116
	LogLineInformation_ANY_ALL_REQUIRES_ARRAY          LogLineInformation_LogClassification = 117
	LogLineInformation_COLUMN_MISSING_FROM_GROUP_BY    LogLineInformation_LogClassification = 118
	LogLineInformation_RELATION_DOES_NOT_EXIST         LogLineInformation_LogClassification = 119
	LogLineInformation_COLUMN_DOES_NOT_EXIST           LogLineInformation_LogClassification = 120
	LogLineInformation_OPERATOR_DOES_NOT_EXIST         LogLineInformation_LogClassification = 121
	LogLineInformation_COLUMN_REFERENCE_AMBIGUOUS      LogLineInformation_LogClassification = 122
	LogLineInformation_PERMISSION_DENIED               LogLineInformation_LogClassification = 123
	LogLineInformation_TRANSACTION_IS_ABORTED          LogLineInformation_LogClassification = 124
	LogLineInformation_ON_CONFLICT_NO_CONSTRAINT_MATCH LogLineInformation_LogClassification = 125
	LogLineInformation_ON_CONFLICT_ROW_AFFECTED_TWICE  LogLineInformation_LogClassification = 126
	LogLineInformation_COLUMN_CANNOT_BE_CAST           LogLineInformation_LogClassification = 127
	LogLineInformation_DIVISION_BY_ZERO                LogLineInformation_LogClassification = 128
	LogLineInformation_CANNOT_DROP                     LogLineInformation_LogClassification = 129
	LogLineInformation_INTEGER_OUT_OF_RANGE            LogLineInformation_LogClassification = 130
	LogLineInformation_INVALID_REGEXP                  LogLineInformation_LogClassification = 131
	LogLineInformation_PARAM_MISSING                   LogLineInformation_LogClassification = 132
	LogLineInformation_FUNCTION_DOES_NOT_EXIST         LogLineInformation_LogClassification = 133
	LogLineInformation_NO_SUCH_SAVEPOINT               LogLineInformation_LogClassification = 134
	LogLineInformation_UNTERMINATED_QUOTED_STRING      LogLineInformation_LogClassification = 135
	LogLineInformation_UNTERMINATED_QUOTED_IDENTIFIER  LogLineInformation_LogClassification = 136
)

var LogLineInformation_LogClassification_name = map[int32]string{
	0:   "UNKNOWN_LOG_CLASSIFICATION",
	1:   "SERVER_CRASHED",
	2:   "SERVER_START",
	3:   "SERVER_START_RECOVERING",
	4:   "SERVER_SHUTDOWN",
	5:   "SERVER_OUT_OF_MEMORY",
	6:   "SERVER_INVALID_CHECKSUM",
	7:   "SERVER_TEMP_FILE_CREATED",
	8:   "SERVER_MISC",
	9:   "SERVER_RELOAD",
	20:  "CONNECTION_RECEIVED",
	21:  "CONNECTION_AUTHORIZED",
	22:  "CONNECTION_REJECTED",
	23:  "CONNECTION_DISCONNECTED",
	24:  "CONNECTION_CLIENT_FAILED_TO_CONNECT",
	25:  "CONNECTION_LOST",
	26:  "CONNECTION_LOST_OPEN_TX",
	27:  "CONNECTION_TERMINATED",
	28:  "OUT_OF_CONNECTIONS",
	29:  "TOO_MANY_CONNECTIONS_ROLE",
	30:  "COULD_NOT_ACCEPT_SSL_CONNECTION",
	31:  "PROTOCOL_ERROR_UNSUPPORTED_VERSION",
	32:  "PROTOCOL_ERROR_INCOMPLETE_MESSAGE",
	40:  "CHECKPOINT_STARTING",
	41:  "CHECKPOINT_COMPLETE",
	42:  "CHECKPOINT_TOO_FREQUENT",
	43:  "RESTARTPOINT_STARTING",
	44:  "RESTARTPOINT_COMPLETE",
	45:  "RESTARTPOINT_AT",
	50:  "WAL_INVALID_RECORD_LENGTH",
	51:  "WAL_REDO",
	60:  "AUTOVACUUM_CANCEL",
	61:  "TXID_WRAPAROUND_WARNING",
	62:  "TXID_WRAPAROUND_ERROR",
	63:  "AUTOVACUUM_LAUNCHER_STARTED",
	64:  "AUTOVACUUM_LAUNCHER_SHUTTING_DOWN",
	65:  "AUTOVACUUM_COMPLETED",
	66:  "AUTOANALYZE_COMPLETED",
	70:  "LOCK_ACQUIRED",
	71:  "LOCK_WAITING",
	72:  "LOCK_TIMEOUT",
	73:  "LOCK_DEADLOCK_DETECTED",
	74:  "LOCK_DEADLOCK_AVOIDED",
	80:  "STATEMENT_DURATION",
	81:  "STATEMENT_CANCELED_TIMEOUT",
	82:  "STATEMENT_CANCELED_USER",
	83:  "STATEMENT_LOG",
	84:  "STATEMENT_AUTO_EXPLAIN",
	90:  "STANDBY_RESTORED_WAL_FROM_ARCHIVE",
	91:  "STANDBY_STARTED_STREAMING",
	92:  "STANDBY_STREAMING_INTERRUPTED",
	93:  "STANDBY_STOPPED_STREAMING",
	94:  "STANDBY_CONSISTENT_RECOVERY_STATE",
	95:  "STANDBY_STATEMENT_CANCELED",
	96:  "STANDBY_INVALID_TIMELINE",
	100: "UNIQUE_CONSTRAINT_VIOLATION",
	101: "FOREIGN_KEY_CONSTRAINT_VIOLATION",
	102: "NOT_NULL_CONSTRAINT_VIOLATION",
	103: "CHECK_CONSTRAINT_VIOLATION",
	104: "EXCLUSION_CONSTRAINT_VIOLATION",
	110: "SYNTAX_ERROR",
	111: "INVALID_INPUT_SYNTAX",
	112: "VALUE_TOO_LONG_FOR_TYPE",
	113: "INVALID_VALUE",
	114: "MALFORMED_ARRAY_LITERAL",
	115: "SUBQUERY_MISSING_ALIAS",
	116: "INSERT_TARGET_COLUMN_MISMATCH",
	117: "ANY_ALL_REQUIRES_ARRAY",
	118: "COLUMN_MISSING_FROM_GROUP_BY",
	119: "RELATION_DOES_NOT_EXIST",
	120: "COLUMN_DOES_NOT_EXIST",
	121: "OPERATOR_DOES_NOT_EXIST",
	122: "COLUMN_REFERENCE_AMBIGUOUS",
	123: "PERMISSION_DENIED",
	124: "TRANSACTION_IS_ABORTED",
	125: "ON_CONFLICT_NO_CONSTRAINT_MATCH",
	126: "ON_CONFLICT_ROW_AFFECTED_TWICE",
	127: "COLUMN_CANNOT_BE_CAST",
	128: "DIVISION_BY_ZERO",
	129: "CANNOT_DROP",
	130: "INTEGER_OUT_OF_RANGE",
	131: "INVALID_REGEXP",
	132: "PARAM_MISSING",
	133: "FUNCTION_DOES_NOT_EXIST",
	134: "NO_SUCH_SAVEPOINT",
	135: "UNTERMINATED_QUOTED_STRING",
	136: "UNTERMINATED_QUOTED_IDENTIFIER",
}
var LogLineInformation_LogClassification_value = map[string]int32{
	"UNKNOWN_LOG_CLASSIFICATION":          0,
	"SERVER_CRASHED":                      1,
	"SERVER_START":                        2,
	"SERVER_START_RECOVERING":             3,
	"SERVER_SHUTDOWN":                     4,
	"SERVER_OUT_OF_MEMORY":                5,
	"SERVER_INVALID_CHECKSUM":             6,
	"SERVER_TEMP_FILE_CREATED":            7,
	"SERVER_MISC":                         8,
	"SERVER_RELOAD":                       9,
	"CONNECTION_RECEIVED":                 20,
	"CONNECTION_AUTHORIZED":               21,
	"CONNECTION_REJECTED":                 22,
	"CONNECTION_DISCONNECTED":             23,
	"CONNECTION_CLIENT_FAILED_TO_CONNECT": 24,
	"CONNECTION_LOST":                     25,
	"CONNECTION_LOST_OPEN_TX":             26,
	"CONNECTION_TERMINATED":               27,
	"OUT_OF_CONNECTIONS":                  28,
	"TOO_MANY_CONNECTIONS_ROLE":           29,
	"COULD_NOT_ACCEPT_SSL_CONNECTION":     30,
	"PROTOCOL_ERROR_UNSUPPORTED_VERSION":  31,
	"PROTOCOL_ERROR_INCOMPLETE_MESSAGE":   32,
	"CHECKPOINT_STARTING":                 40,
	"CHECKPOINT_COMPLETE":                 41,
	"CHECKPOINT_TOO_FREQUENT":             42,
	"RESTARTPOINT_STARTING":               43,
	"RESTARTPOINT_COMPLETE":               44,
	"RESTARTPOINT_AT":                     45,
	"WAL_INVALID_RECORD_LENGTH":           50,
	"WAL_REDO":                            51,
	"AUTOVACUUM_CANCEL":                   60,
	"TXID_WRAPAROUND_WARNING":             61,
	"TXID_WRAPAROUND_ERROR":               62,
	"AUTOVACUUM_LAUNCHER_STARTED":         63,
	"AUTOVACUUM_LAUNCHER_SHUTTING_DOWN":   64,
	"AUTOVACUUM_COMPLETED":                65,
	"AUTOANALYZE_COMPLETED":               66,
	"LOCK_ACQUIRED":                       70,
	"LOCK_WAITING":                        71,
	"LOCK_TIMEOUT":                        72,
	"LOCK_DEADLOCK_DETECTED":              73,
	"LOCK_DEADLOCK_AVOIDED":               74,
	"STATEMENT_DURATION":                  80,
	"STATEMENT_CANCELED_TIMEOUT":          81,
	"STATEMENT_CANCELED_USER":             82,
	"STATEMENT_LOG":                       83,
	"STATEMENT_AUTO_EXPLAIN":              84,
	"STANDBY_RESTORED_WAL_FROM_ARCHIVE":   90,
	"STANDBY_STARTED_STREAMING":           91,
	"STANDBY_STREAMING_INTERRUPTED":       92,
	"STANDBY_STOPPED_STREAMING":           93,
	"STANDBY_CONSISTENT_RECOVERY_STATE":   94,
	"STANDBY_STATEMENT_CANCELED":          95,
	"STANDBY_INVALID_TIMELINE":            96,
	"UNIQUE_CONSTRAINT_VIOLATION":         100,
	"FOREIGN_KEY_CONSTRAINT_VIOLATION":    101,
	"NOT_NULL_CONSTRAINT_VIOLATION":       102,
	"CHECK_CONSTRAINT_VIOLATION":          103,
	"EXCLUSION_CONSTRAINT_VIOLATION":      104,
	"SYNTAX_ERROR":                        110,
	"INVALID_INPUT_SYNTAX":                111,
	"VALUE_TOO_LONG_FOR_TYPE":             112,
	"INVALID_VALUE":                       113,
	"MALFORMED_ARRAY_LITERAL":             114,
	"SUBQUERY_MISSING_ALIAS":              115,
	"INSERT_TARGET_COLUMN_MISMATCH":       116,
	"ANY_ALL_REQUIRES_ARRAY":              117,
	"COLUMN_MISSING_FROM_GROUP_BY":        118,
	"RELATION_DOES_NOT_EXIST":             119,
	"COLUMN_DOES_NOT_EXIST":               120,
	"OPERATOR_DOES_NOT_EXIST":             121,
	"COLUMN_REFERENCE_AMBIGUOUS":          122,
	"PERMISSION_DENIED":                   123,
	"TRANSACTION_IS_ABORTED":              124,
	"ON_CONFLICT_NO_CONSTRAINT_MATCH":     125,
	"ON_CONFLICT_ROW_AFFECTED_TWICE":      126,
	"COLUMN_CANNOT_BE_CAST":               127,
	"DIVISION_BY_ZERO":                    128,
	"CANNOT_DROP":                         129,
	"INTEGER_OUT_OF_RANGE":                130,
	"INVALID_REGEXP":                      131,
	"PARAM_MISSING":                       132,
	"FUNCTION_DOES_NOT_EXIST":             133,
	"NO_SUCH_SAVEPOINT":                   134,
	"UNTERMINATED_QUOTED_STRING":          135,
	"UNTERMINATED_QUOTED_IDENTIFIER":      136,
}

func (x LogLineInformation_LogClassification) String() string {
	return proto.EnumName(LogLineInformation_LogClassification_name, int32(x))
}
func (LogLineInformation_LogClassification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{2, 1}
}

type QuerySample_ExplainFormat int32

const (
	QuerySample_TEXT_EXPLAIN_FORMAT QuerySample_ExplainFormat = 0
	QuerySample_JSON_EXPLAIN_FORMAT QuerySample_ExplainFormat = 1
)

var QuerySample_ExplainFormat_name = map[int32]string{
	0: "TEXT_EXPLAIN_FORMAT",
	1: "JSON_EXPLAIN_FORMAT",
}
var QuerySample_ExplainFormat_value = map[string]int32{
	"TEXT_EXPLAIN_FORMAT": 0,
	"JSON_EXPLAIN_FORMAT": 1,
}

func (x QuerySample_ExplainFormat) String() string {
	return proto.EnumName(QuerySample_ExplainFormat_name, int32(x))
}
func (QuerySample_ExplainFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3, 0} }

type QuerySample_ExplainSource int32

const (
	QuerySample_STATEMENT_LOG_EXPLAIN_SOURCE QuerySample_ExplainSource = 0
	QuerySample_AUTO_EXPLAIN_EXPLAIN_SOURCE  QuerySample_ExplainSource = 1
	QuerySample_EXTERNAL_EXPLAIN_SOURCE      QuerySample_ExplainSource = 2
)

var QuerySample_ExplainSource_name = map[int32]string{
	0: "STATEMENT_LOG_EXPLAIN_SOURCE",
	1: "AUTO_EXPLAIN_EXPLAIN_SOURCE",
	2: "EXTERNAL_EXPLAIN_SOURCE",
}
var QuerySample_ExplainSource_value = map[string]int32{
	"STATEMENT_LOG_EXPLAIN_SOURCE": 0,
	"AUTO_EXPLAIN_EXPLAIN_SOURCE":  1,
	"EXTERNAL_EXPLAIN_SOURCE":      2,
}

func (x QuerySample_ExplainSource) String() string {
	return proto.EnumName(QuerySample_ExplainSource_name, int32(x))
}
func (QuerySample_ExplainSource) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{3, 1} }

type CompactLogSnapshot struct {
	LogFileReferences   []*LogFileReference   `protobuf:"bytes,1,rep,name=log_file_references,json=logFileReferences" json:"log_file_references,omitempty"`
	LogLineInformations []*LogLineInformation `protobuf:"bytes,2,rep,name=log_line_informations,json=logLineInformations" json:"log_line_informations,omitempty"`
	QuerySamples        []*QuerySample        `protobuf:"bytes,3,rep,name=query_samples,json=querySamples" json:"query_samples,omitempty"`
}

func (m *CompactLogSnapshot) Reset()                    { *m = CompactLogSnapshot{} }
func (m *CompactLogSnapshot) String() string            { return proto.CompactTextString(m) }
func (*CompactLogSnapshot) ProtoMessage()               {}
func (*CompactLogSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CompactLogSnapshot) GetLogFileReferences() []*LogFileReference {
	if m != nil {
		return m.LogFileReferences
	}
	return nil
}

func (m *CompactLogSnapshot) GetLogLineInformations() []*LogLineInformation {
	if m != nil {
		return m.LogLineInformations
	}
	return nil
}

func (m *CompactLogSnapshot) GetQuerySamples() []*QuerySample {
	if m != nil {
		return m.QuerySamples
	}
	return nil
}

type LogFileReference struct {
	Uuid         string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	S3Location   string `protobuf:"bytes,2,opt,name=s3_location,json=s3Location" json:"s3_location,omitempty"`
	S3CekAlgo    string `protobuf:"bytes,3,opt,name=s3_cek_algo,json=s3CekAlgo" json:"s3_cek_algo,omitempty"`
	S3CmkKeyId   string `protobuf:"bytes,4,opt,name=s3_cmk_key_id,json=s3CmkKeyId" json:"s3_cmk_key_id,omitempty"`
	ByteSize     int64  `protobuf:"varint,5,opt,name=byte_size,json=byteSize" json:"byte_size,omitempty"`
	OriginalName string `protobuf:"bytes,6,opt,name=original_name,json=originalName" json:"original_name,omitempty"`
}

func (m *LogFileReference) Reset()                    { *m = LogFileReference{} }
func (m *LogFileReference) String() string            { return proto.CompactTextString(m) }
func (*LogFileReference) ProtoMessage()               {}
func (*LogFileReference) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *LogFileReference) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LogFileReference) GetS3Location() string {
	if m != nil {
		return m.S3Location
	}
	return ""
}

func (m *LogFileReference) GetS3CekAlgo() string {
	if m != nil {
		return m.S3CekAlgo
	}
	return ""
}

func (m *LogFileReference) GetS3CmkKeyId() string {
	if m != nil {
		return m.S3CmkKeyId
	}
	return ""
}

func (m *LogFileReference) GetByteSize() int64 {
	if m != nil {
		return m.ByteSize
	}
	return 0
}

func (m *LogFileReference) GetOriginalName() string {
	if m != nil {
		return m.OriginalName
	}
	return ""
}

type LogLineInformation struct {
	LogFileIdx       int32                                `protobuf:"varint,1,opt,name=log_file_idx,json=logFileIdx" json:"log_file_idx,omitempty"`
	Uuid             string                               `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	ParentUuid       string                               `protobuf:"bytes,3,opt,name=parent_uuid,json=parentUuid" json:"parent_uuid,omitempty"`
	ByteStart        int64                                `protobuf:"varint,4,opt,name=byte_start,json=byteStart" json:"byte_start,omitempty"`
	ByteContentStart int64                                `protobuf:"varint,5,opt,name=byte_content_start,json=byteContentStart" json:"byte_content_start,omitempty"`
	ByteEnd          int64                                `protobuf:"varint,6,opt,name=byte_end,json=byteEnd" json:"byte_end,omitempty"`
	HasRoleIdx       bool                                 `protobuf:"varint,7,opt,name=has_role_idx,json=hasRoleIdx" json:"has_role_idx,omitempty"`
	RoleIdx          int32                                `protobuf:"varint,8,opt,name=role_idx,json=roleIdx" json:"role_idx,omitempty"`
	HasDatabaseIdx   bool                                 `protobuf:"varint,9,opt,name=has_database_idx,json=hasDatabaseIdx" json:"has_database_idx,omitempty"`
	DatabaseIdx      int32                                `protobuf:"varint,10,opt,name=database_idx,json=databaseIdx" json:"database_idx,omitempty"`
	HasQueryIdx      bool                                 `protobuf:"varint,11,opt,name=has_query_idx,json=hasQueryIdx" json:"has_query_idx,omitempty"`
	QueryIdx         int32                                `protobuf:"varint,12,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	OccurredAt       *google_protobuf.Timestamp           `protobuf:"bytes,13,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	BackendPid       int32                                `protobuf:"varint,14,opt,name=backend_pid,json=backendPid" json:"backend_pid,omitempty"`
	Level            LogLineInformation_LogLevel          `protobuf:"varint,15,opt,name=level,enum=pganalyze.collector.LogLineInformation_LogLevel" json:"level,omitempty"`
	Classification   LogLineInformation_LogClassification `protobuf:"varint,16,opt,name=classification,enum=pganalyze.collector.LogLineInformation_LogClassification" json:"classification,omitempty"`
	DetailsJson      string                               `protobuf:"bytes,17,opt,name=details_json,json=detailsJson" json:"details_json,omitempty"`
	HasRelationIdx   bool                                 `protobuf:"varint,18,opt,name=has_relation_idx,json=hasRelationIdx" json:"has_relation_idx,omitempty"`
	RelationIdx      int32                                `protobuf:"varint,19,opt,name=relation_idx,json=relationIdx" json:"relation_idx,omitempty"`
}

func (m *LogLineInformation) Reset()                    { *m = LogLineInformation{} }
func (m *LogLineInformation) String() string            { return proto.CompactTextString(m) }
func (*LogLineInformation) ProtoMessage()               {}
func (*LogLineInformation) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *LogLineInformation) GetLogFileIdx() int32 {
	if m != nil {
		return m.LogFileIdx
	}
	return 0
}

func (m *LogLineInformation) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LogLineInformation) GetParentUuid() string {
	if m != nil {
		return m.ParentUuid
	}
	return ""
}

func (m *LogLineInformation) GetByteStart() int64 {
	if m != nil {
		return m.ByteStart
	}
	return 0
}

func (m *LogLineInformation) GetByteContentStart() int64 {
	if m != nil {
		return m.ByteContentStart
	}
	return 0
}

func (m *LogLineInformation) GetByteEnd() int64 {
	if m != nil {
		return m.ByteEnd
	}
	return 0
}

func (m *LogLineInformation) GetHasRoleIdx() bool {
	if m != nil {
		return m.HasRoleIdx
	}
	return false
}

func (m *LogLineInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *LogLineInformation) GetHasDatabaseIdx() bool {
	if m != nil {
		return m.HasDatabaseIdx
	}
	return false
}

func (m *LogLineInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *LogLineInformation) GetHasQueryIdx() bool {
	if m != nil {
		return m.HasQueryIdx
	}
	return false
}

func (m *LogLineInformation) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *LogLineInformation) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *LogLineInformation) GetBackendPid() int32 {
	if m != nil {
		return m.BackendPid
	}
	return 0
}

func (m *LogLineInformation) GetLevel() LogLineInformation_LogLevel {
	if m != nil {
		return m.Level
	}
	return LogLineInformation_UNKNOWN
}

func (m *LogLineInformation) GetClassification() LogLineInformation_LogClassification {
	if m != nil {
		return m.Classification
	}
	return LogLineInformation_UNKNOWN_LOG_CLASSIFICATION
}

func (m *LogLineInformation) GetDetailsJson() string {
	if m != nil {
		return m.DetailsJson
	}
	return ""
}

func (m *LogLineInformation) GetHasRelationIdx() bool {
	if m != nil {
		return m.HasRelationIdx
	}
	return false
}

func (m *LogLineInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

type QuerySample struct {
	QueryIdx      int32                      `protobuf:"varint,1,opt,name=query_idx,json=queryIdx" json:"query_idx,omitempty"`
	OccurredAt    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	RuntimeMs     float64                    `protobuf:"fixed64,3,opt,name=runtime_ms,json=runtimeMs" json:"runtime_ms,omitempty"`
	QueryText     string                     `protobuf:"bytes,4,opt,name=query_text,json=queryText" json:"query_text,omitempty"`
	Parameters    []string                   `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty"`
	LogLineUuid   string                     `protobuf:"bytes,10,opt,name=log_line_uuid,json=logLineUuid" json:"log_line_uuid,omitempty"`
	HasExplain    bool                       `protobuf:"varint,20,opt,name=has_explain,json=hasExplain" json:"has_explain,omitempty"`
	ExplainOutput string                     `protobuf:"bytes,21,opt,name=explain_output,json=explainOutput" json:"explain_output,omitempty"`
	ExplainError  string                     `protobuf:"bytes,22,opt,name=explain_error,json=explainError" json:"explain_error,omitempty"`
	ExplainFormat QuerySample_ExplainFormat  `protobuf:"varint,23,opt,name=explain_format,json=explainFormat,enum=pganalyze.collector.QuerySample_ExplainFormat" json:"explain_format,omitempty"`
	ExplainSource QuerySample_ExplainSource  `protobuf:"varint,24,opt,name=explain_source,json=explainSource,enum=pganalyze.collector.QuerySample_ExplainSource" json:"explain_source,omitempty"`
}

func (m *QuerySample) Reset()                    { *m = QuerySample{} }
func (m *QuerySample) String() string            { return proto.CompactTextString(m) }
func (*QuerySample) ProtoMessage()               {}
func (*QuerySample) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *QuerySample) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *QuerySample) GetOccurredAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.OccurredAt
	}
	return nil
}

func (m *QuerySample) GetRuntimeMs() float64 {
	if m != nil {
		return m.RuntimeMs
	}
	return 0
}

func (m *QuerySample) GetQueryText() string {
	if m != nil {
		return m.QueryText
	}
	return ""
}

func (m *QuerySample) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *QuerySample) GetLogLineUuid() string {
	if m != nil {
		return m.LogLineUuid
	}
	return ""
}

func (m *QuerySample) GetHasExplain() bool {
	if m != nil {
		return m.HasExplain
	}
	return false
}

func (m *QuerySample) GetExplainOutput() string {
	if m != nil {
		return m.ExplainOutput
	}
	return ""
}

func (m *QuerySample) GetExplainError() string {
	if m != nil {
		return m.ExplainError
	}
	return ""
}

func (m *QuerySample) GetExplainFormat() QuerySample_ExplainFormat {
	if m != nil {
		return m.ExplainFormat
	}
	return QuerySample_TEXT_EXPLAIN_FORMAT
}

func (m *QuerySample) GetExplainSource() QuerySample_ExplainSource {
	if m != nil {
		return m.ExplainSource
	}
	return QuerySample_STATEMENT_LOG_EXPLAIN_SOURCE
}

func init() {
	proto.RegisterType((*CompactLogSnapshot)(nil), "pganalyze.collector.CompactLogSnapshot")
	proto.RegisterType((*LogFileReference)(nil), "pganalyze.collector.LogFileReference")
	proto.RegisterType((*LogLineInformation)(nil), "pganalyze.collector.LogLineInformation")
	proto.RegisterType((*QuerySample)(nil), "pganalyze.collector.QuerySample")
	proto.RegisterEnum("pganalyze.collector.LogLineInformation_LogLevel", LogLineInformation_LogLevel_name, LogLineInformation_LogLevel_value)
	proto.RegisterEnum("pganalyze.collector.LogLineInformation_LogClassification", LogLineInformation_LogClassification_name, LogLineInformation_LogClassification_value)
	proto.RegisterEnum("pganalyze.collector.QuerySample_ExplainFormat", QuerySample_ExplainFormat_name, QuerySample_ExplainFormat_value)
	proto.RegisterEnum("pganalyze.collector.QuerySample_ExplainSource", QuerySample_ExplainSource_name, QuerySample_ExplainSource_value)
}

func init() { proto.RegisterFile("compact_log_snapshot.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 2269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0xeb, 0x5e, 0x1b, 0xb9,
	0xf9, 0x5e, 0x43, 0x08, 0x20, 0x03, 0x2b, 0xc4, 0x12, 0x0c, 0x49, 0xc0, 0x21, 0xff, 0xfd, 0x2f,
	0x6d, 0xb7, 0x6c, 0x7f, 0xc9, 0xa7, 0xfe, 0x7a, 0x14, 0x33, 0xb2, 0xad, 0x64, 0x2c, 0x0d, 0x1a,
	0x8d, 0x81, 0x6c, 0x5b, 0x75, 0x62, 0x0f, 0xe0, 0x62, 0x3c, 0xc4, 0x33, 0x6c, 0x43, 0x7a, 0x3e,
	0xf7, 0x5b, 0xbf, 0xf7, 0x1a, 0x7a, 0x01, 0xbd, 0x88, 0xde, 0x45, 0x6f, 0xa4, 0xbf, 0x57, 0x33,
	0x3e, 0xe0, 0xd0, 0xc3, 0x7e, 0xb3, 0xdf, 0xe7, 0xd1, 0xa3, 0xf7, 0xa4, 0x77, 0x24, 0xb4, 0xd5,
	0x4e, 0x2e, 0xaf, 0xa2, 0x76, 0x66, 0x7a, 0xc9, 0x99, 0x49, 0xfb, 0xd1, 0x55, 0x7a, 0x9e, 0x64,
	0xfb, 0x57, 0x83, 0x24, 0x4b, 0xc8, 0xda, 0xd5, 0x59, 0xd4, 0x8f, 0x7a, 0x37, 0xef, 0xe2, 0xfd,
	0x76, 0xd2, 0xeb, 0xc5, 0xed, 0x2c, 0x19, 0x6c, 0xed, 0x9c, 0x25, 0xc9, 0x59, 0x2f, 0xfe, 0xcc,
	0x52, 0x5e, 0x5f, 0x9f, 0x7e, 0x96, 0x75, 0x2f, 0xe3, 0x34, 0x8b, 0x2e, 0xaf, 0xf2, 0x55, 0xbb,
	0x7f, 0x99, 0x41, 0xc4, 0xc9, 0x45, 0xbd, 0xe4, 0x2c, 0x28, 0x24, 0x49, 0x88, 0xd6, 0x60, 0x8b,
	0xd3, 0x6e, 0x2f, 0x36, 0x83, 0xf8, 0x34, 0x1e, 0xc4, 0xfd, 0x76, 0x9c, 0x56, 0x4a, 0xd5, 0xd9,
	0xbd, 0xf2, 0xb3, 0x8f, 0xf7, 0xef, 0xd8, 0x6a, 0xdf, 0x4b, 0xce, 0x6a, 0xdd, 0x5e, 0xac, 0x86,
	0x6c, 0xb5, 0xda, 0x9b, 0xb2, 0xa4, 0xe4, 0x73, 0xb4, 0x0e, 0xb2, 0xbd, 0x6e, 0x3f, 0x36, 0xdd,
	0xfe, 0x69, 0x32, 0xb8, 0x8c, 0xb2, 0x6e, 0xd2, 0x4f, 0x2b, 0x33, 0x56, 0xf8, 0x93, 0x7f, 0x27,
	0xec, 0x75, 0xfb, 0x31, 0x1f, 0xf3, 0x15, 0x38, 0x37, 0x65, 0x4b, 0x09, 0x43, 0xcb, 0x6f, 0xae,
	0xe3, 0xc1, 0x8d, 0x49, 0xa3, 0xcb, 0xab, 0x5e, 0x9c, 0x56, 0x66, 0xad, 0x68, 0xf5, 0x4e, 0xd1,
	0x43, 0x60, 0x06, 0x96, 0xa8, 0x96, 0xde, 0x8c, 0xff, 0xa4, 0xbb, 0xff, 0x28, 0x21, 0x3c, 0x1d,
	0x0b, 0x21, 0xe8, 0xde, 0xf5, 0x75, 0xb7, 0x53, 0x29, 0x55, 0x4b, 0x7b, 0x8b, 0xca, 0xfe, 0x26,
	0x3b, 0xa8, 0x9c, 0x3e, 0x37, 0xbd, 0xa4, 0x6d, 0xf7, 0xaf, 0xcc, 0x58, 0x08, 0xa5, 0xcf, 0xbd,
	0xc2, 0x42, 0xb6, 0x2d, 0xa1, 0x1d, 0x5f, 0x98, 0xa8, 0x77, 0x96, 0x54, 0x66, 0x2d, 0x61, 0x31,
	0x7d, 0xee, 0xc4, 0x17, 0xb4, 0x77, 0x96, 0x90, 0x27, 0x68, 0x19, 0xf0, 0xcb, 0x0b, 0x73, 0x11,
	0xdf, 0x98, 0x6e, 0xa7, 0x72, 0x6f, 0x28, 0xe1, 0x5c, 0x5e, 0xbc, 0x8c, 0x6f, 0x78, 0x87, 0x3c,
	0x44, 0x8b, 0xaf, 0x6f, 0xb2, 0xd8, 0xa4, 0xdd, 0x77, 0x71, 0x65, 0xae, 0x5a, 0xda, 0x9b, 0x55,
	0x0b, 0x60, 0x08, 0xba, 0xef, 0x62, 0xf2, 0x14, 0x2d, 0x27, 0x83, 0xee, 0x59, 0xb7, 0x1f, 0xf5,
	0x4c, 0x3f, 0xba, 0x8c, 0x2b, 0xf7, 0xed, 0xfa, 0xa5, 0xa1, 0x51, 0x44, 0x97, 0xf1, 0xee, 0x3f,
	0xb7, 0x10, 0x79, 0x3f, 0x83, 0xa4, 0x8a, 0x96, 0x46, 0x05, 0xee, 0x76, 0xde, 0xda, 0xc0, 0xe6,
	0x14, 0x2a, 0x4a, 0xc6, 0x3b, 0x6f, 0x47, 0x21, 0xcf, 0xdc, 0x0e, 0xf9, 0x2a, 0x1a, 0xc4, 0xfd,
	0xcc, 0x58, 0x28, 0x8f, 0x08, 0xe5, 0xa6, 0x10, 0x08, 0x8f, 0x11, 0xca, 0xfd, 0xcd, 0xa2, 0x41,
	0x66, 0xe3, 0x99, 0x55, 0x36, 0x82, 0x00, 0x0c, 0xe4, 0x53, 0x44, 0x2c, 0xdc, 0x4e, 0xfa, 0x19,
	0xa8, 0xe4, 0xb4, 0x3c, 0x2e, 0x0c, 0x88, 0x93, 0x03, 0x39, 0x7b, 0x13, 0xd9, 0x58, 0x4d, 0xdc,
	0xef, 0xd8, 0xd0, 0x66, 0xd5, 0x3c, 0xfc, 0x67, 0xfd, 0x0e, 0xb8, 0x7f, 0x1e, 0xa5, 0x66, 0x90,
	0x14, 0xee, 0xcf, 0x57, 0x4b, 0x7b, 0x0b, 0x0a, 0x9d, 0x47, 0xa9, 0x4a, 0x72, 0xf7, 0x37, 0xd1,
	0xc2, 0x08, 0x5d, 0xb0, 0xc1, 0xcd, 0x0f, 0x0a, 0x68, 0x0f, 0x61, 0x58, 0xdc, 0x89, 0xb2, 0xe8,
	0x75, 0x94, 0xe6, 0x94, 0x45, 0x2b, 0xb0, 0x72, 0x1e, 0xa5, 0x6e, 0x61, 0x06, 0xe6, 0x13, 0xb4,
	0x74, 0x8b, 0x85, 0xac, 0x50, 0xb9, 0x33, 0x41, 0xd9, 0x45, 0xcb, 0x20, 0x96, 0x77, 0x1e, 0x70,
	0xca, 0x56, 0xa9, 0x7c, 0x1e, 0xa5, 0xb6, 0xc7, 0x80, 0xf3, 0x10, 0x2d, 0x8e, 0xf1, 0x25, 0xab,
	0xb1, 0xf0, 0x66, 0x08, 0x7e, 0x0b, 0x95, 0x93, 0x76, 0xfb, 0x7a, 0x30, 0x88, 0x3b, 0x26, 0xca,
	0x2a, 0xcb, 0xd5, 0xd2, 0x5e, 0xf9, 0xd9, 0xd6, 0x7e, 0x7e, 0x70, 0xf7, 0x87, 0x07, 0x77, 0x5f,
	0x0f, 0x0f, 0xae, 0x42, 0x43, 0x3a, 0xcd, 0xa0, 0x20, 0xaf, 0xa3, 0xf6, 0x45, 0xdc, 0xef, 0x98,
	0xab, 0x6e, 0xa7, 0xb2, 0x92, 0x57, 0xb1, 0x30, 0xf9, 0xdd, 0x0e, 0xa9, 0xa1, 0xb9, 0x5e, 0xfc,
	0x45, 0xdc, 0xab, 0x7c, 0x58, 0x2d, 0xed, 0xad, 0x3c, 0xfb, 0xc6, 0xff, 0x78, 0xc2, 0xac, 0x09,
	0xd6, 0xa9, 0x7c, 0x39, 0x89, 0xd0, 0x4a, 0xbb, 0x17, 0xa5, 0x69, 0xf7, 0xb4, 0x5b, 0xf4, 0x3b,
	0xb6, 0x82, 0xdf, 0xfc, 0x12, 0x82, 0xce, 0x2d, 0x01, 0x35, 0x25, 0x68, 0x93, 0x1d, 0x67, 0x51,
	0xb7, 0x97, 0x9a, 0x9f, 0xa4, 0x49, 0xbf, 0xb2, 0x6a, 0xbb, 0xab, 0x5c, 0xd8, 0x5e, 0xa4, 0x49,
	0x7f, 0x58, 0xb9, 0x41, 0xdc, 0xb3, 0x4b, 0x6c, 0x3e, 0xc9, 0xa8, 0x72, 0xaa, 0x30, 0x17, 0x95,
	0xbb, 0xc5, 0x5a, 0xcb, 0x2b, 0x37, 0x18, 0x53, 0x76, 0xff, 0x56, 0x42, 0x0b, 0xc3, 0x30, 0x49,
	0x19, 0xcd, 0x87, 0xe2, 0xa5, 0x90, 0x47, 0x02, 0x7f, 0x40, 0x16, 0xd1, 0x9c, 0xcb, 0x0e, 0xc2,
	0x3a, 0x2e, 0x91, 0x05, 0x74, 0x8f, 0x8b, 0x9a, 0xc4, 0x33, 0x04, 0xa1, 0xfb, 0x42, 0x6a, 0xee,
	0x30, 0x3c, 0x0b, 0xec, 0x23, 0xaa, 0x04, 0x17, 0x75, 0x7c, 0x0f, 0xd8, 0x4c, 0x29, 0xa9, 0xf0,
	0x1c, 0x99, 0x47, 0xb3, 0x9e, 0xac, 0xe3, 0xfb, 0x60, 0xab, 0x51, 0x4d, 0x3d, 0x3c, 0x0f, 0x3f,
	0x7d, 0x2a, 0xb8, 0x83, 0x17, 0x40, 0xc2, 0x65, 0x9a, 0x72, 0x0f, 0x2f, 0x82, 0x70, 0x83, 0x0b,
	0x8d, 0x11, 0x88, 0x39, 0x52, 0x68, 0x76, 0xac, 0x71, 0x99, 0x2c, 0xa3, 0xc5, 0x40, 0x53, 0xcd,
	0x9a, 0x4c, 0x68, 0xbc, 0x04, 0x8b, 0x0f, 0x43, 0xa6, 0x4e, 0xf0, 0xf2, 0xee, 0x5f, 0xd7, 0xd0,
	0xea, 0x7b, 0x49, 0x24, 0xdb, 0x68, 0xab, 0xf0, 0xdb, 0x78, 0xb2, 0x6e, 0x1c, 0x8f, 0x06, 0x01,
	0xaf, 0x71, 0x87, 0x6a, 0x2e, 0x21, 0x14, 0x82, 0x56, 0x02, 0xa6, 0x5a, 0x4c, 0x19, 0x47, 0xd1,
	0xa0, 0xc1, 0x5c, 0x5c, 0x22, 0x18, 0x2d, 0x15, 0xb6, 0x40, 0x53, 0xa5, 0xf1, 0x0c, 0x79, 0x88,
	0x36, 0x26, 0x2d, 0x46, 0x31, 0x47, 0xb6, 0x98, 0x82, 0xf8, 0x66, 0xc9, 0x1a, 0xfa, 0x70, 0x08,
	0x36, 0x42, 0xed, 0x42, 0x8a, 0xee, 0x91, 0x0a, 0xfa, 0xa8, 0x30, 0xca, 0x50, 0x1b, 0x59, 0x33,
	0x4d, 0xd6, 0x94, 0xea, 0x04, 0xcf, 0x4d, 0x68, 0x71, 0xd1, 0xa2, 0x1e, 0x77, 0x8d, 0xd3, 0x60,
	0xce, 0xcb, 0x20, 0x6c, 0xe2, 0xfb, 0xe4, 0x11, 0xaa, 0x14, 0xa0, 0x66, 0x4d, 0xdf, 0xd4, 0xb8,
	0xc7, 0x8c, 0xa3, 0x18, 0xd5, 0xcc, 0xc5, 0xf3, 0xe4, 0x43, 0x54, 0x2e, 0xd0, 0x26, 0x0f, 0x20,
	0x61, 0xab, 0x68, 0xb9, 0x30, 0x28, 0xe6, 0x49, 0xea, 0xe2, 0x45, 0xb2, 0x81, 0xd6, 0x1c, 0x29,
	0x04, 0x73, 0x20, 0x40, 0x70, 0x94, 0xf1, 0x16, 0x73, 0xf1, 0x47, 0x64, 0x13, 0xad, 0x4f, 0x00,
	0x34, 0xd4, 0x0d, 0xa9, 0xf8, 0x2b, 0xe6, 0xe2, 0xf5, 0xf7, 0xd6, 0xbc, 0x60, 0x0e, 0x6c, 0xf8,
	0x00, 0x7c, 0x9d, 0x00, 0x5c, 0x1e, 0x14, 0xff, 0x98, 0x8b, 0x37, 0xc8, 0x27, 0xe8, 0xe9, 0x04,
	0xe8, 0x78, 0x9c, 0x09, 0x6d, 0x6a, 0x94, 0x7b, 0xcc, 0x35, 0x5a, 0x9a, 0x02, 0xc3, 0x15, 0x48,
	0xd0, 0x04, 0xd1, 0x93, 0x81, 0xc6, 0x9b, 0x53, 0xd2, 0x60, 0x34, 0xd2, 0x67, 0xc2, 0xe8, 0x63,
	0xbc, 0x35, 0xe5, 0xab, 0x66, 0xaa, 0xc9, 0x85, 0xcd, 0xc1, 0x43, 0xf2, 0x00, 0x91, 0x22, 0xa3,
	0x63, 0x46, 0x80, 0x1f, 0x91, 0xc7, 0x68, 0x53, 0x4b, 0x69, 0x9a, 0x54, 0x9c, 0x4c, 0x22, 0x46,
	0x49, 0x8f, 0xe1, 0xc7, 0xe4, 0x29, 0xda, 0x71, 0x64, 0xe8, 0xb9, 0x46, 0x48, 0x6d, 0xa8, 0xe3,
	0x30, 0x5f, 0x9b, 0x20, 0xf0, 0x26, 0xa8, 0x78, 0x9b, 0xfc, 0x3f, 0xda, 0xf5, 0x95, 0xd4, 0xd2,
	0x91, 0x9e, 0xb1, 0x2d, 0x6b, 0x42, 0x11, 0x84, 0xbe, 0x2f, 0x95, 0x66, 0xae, 0x69, 0x31, 0x15,
	0x00, 0x6f, 0x87, 0x7c, 0x8c, 0x9e, 0x4c, 0xf1, 0xb8, 0x70, 0x64, 0xd3, 0xf7, 0x98, 0x66, 0xa6,
	0xc9, 0x82, 0x80, 0xd6, 0x19, 0xae, 0xda, 0xb4, 0x42, 0x69, 0x7d, 0xc9, 0x85, 0xce, 0x3b, 0x07,
	0x3a, 0x66, 0x6f, 0x0a, 0x18, 0xae, 0xc4, 0x5f, 0xb1, 0x49, 0x19, 0x03, 0x10, 0x4f, 0x4d, 0xb1,
	0xc3, 0x10, 0x7a, 0xfd, 0xab, 0x90, 0x14, 0xc5, 0xac, 0xca, 0x94, 0xe0, 0xd7, 0xde, 0x83, 0x46,
	0x92, 0x9f, 0x42, 0xf2, 0x6f, 0x41, 0x54, 0xe3, 0xaf, 0x43, 0xb2, 0x8e, 0xa8, 0x37, 0x6a, 0x40,
	0x68, 0x67, 0xe5, 0x1a, 0x8f, 0x89, 0xba, 0x6e, 0xe0, 0x67, 0x64, 0x09, 0x2d, 0x00, 0xac, 0x98,
	0x2b, 0xf1, 0x73, 0xb2, 0x8e, 0x56, 0x69, 0xa8, 0x65, 0x8b, 0x3a, 0x61, 0xd8, 0x34, 0x0e, 0x15,
	0x0e, 0xf3, 0xf0, 0xb7, 0xc1, 0x57, 0x7d, 0xcc, 0x5d, 0x73, 0xa4, 0xa8, 0x4f, 0x95, 0x0c, 0x85,
	0x6b, 0x86, 0x67, 0xfe, 0x3b, 0xe0, 0xd0, 0x34, 0x98, 0xcf, 0x80, 0xef, 0x92, 0x1d, 0xf4, 0x70,
	0x42, 0xce, 0xa3, 0xa1, 0x70, 0x1a, 0xc3, 0x83, 0xc5, 0x5c, 0xfc, 0x3d, 0xc8, 0xee, 0x9d, 0x84,
	0x46, 0xa8, 0x21, 0x5c, 0x63, 0x4f, 0xd8, 0xf7, 0xe1, 0x84, 0x4d, 0xba, 0x55, 0x44, 0xec, 0x62,
	0x0a, 0x9b, 0x03, 0x42, 0x05, 0xf5, 0x4e, 0x5e, 0xb1, 0x09, 0xe8, 0x00, 0x0e, 0x8c, 0x27, 0x9d,
	0x97, 0x86, 0x3a, 0x87, 0x21, 0x57, 0xcc, 0xc5, 0x35, 0x38, 0xed, 0xd6, 0x74, 0x44, 0xb9, 0xcd,
	0x66, 0x7d, 0x64, 0xd1, 0xbc, 0xc9, 0x64, 0xa8, 0x71, 0x83, 0x6c, 0xa1, 0x07, 0xd6, 0xe2, 0x32,
	0xea, 0x16, 0x3f, 0x74, 0x7e, 0x0c, 0x38, 0xec, 0x76, 0x1b, 0xa3, 0x2d, 0xc9, 0x5d, 0xe6, 0xe2,
	0x17, 0xd0, 0xab, 0xa3, 0x61, 0x65, 0xdc, 0x50, 0xe5, 0x43, 0xc7, 0x87, 0xa1, 0x34, 0xb6, 0xe7,
	0x09, 0x85, 0x33, 0x53, 0x6c, 0x77, 0x68, 0x47, 0xc4, 0xfb, 0x78, 0x18, 0x30, 0x85, 0x95, 0x3d,
	0xf3, 0x23, 0x10, 0xa6, 0x69, 0x00, 0xee, 0x8d, 0x4d, 0x10, 0xba, 0x61, 0xc7, 0xbe, 0x47, 0xb9,
	0xc0, 0x1a, 0xb2, 0x19, 0x68, 0x2a, 0xdc, 0x83, 0x13, 0x03, 0x7d, 0x20, 0x15, 0x83, 0x3a, 0x79,
	0xa6, 0xa6, 0x64, 0xd3, 0x50, 0xe5, 0x34, 0x78, 0x8b, 0xe1, 0x57, 0xd0, 0x11, 0x43, 0x5a, 0x51,
	0x09, 0x13, 0x68, 0xc5, 0x68, 0x13, 0x52, 0xf2, 0x39, 0x79, 0x82, 0x1e, 0x8f, 0xe1, 0xc2, 0x6c,
	0xb8, 0xd0, 0x4c, 0xa9, 0xd0, 0x87, 0x3c, 0xfc, 0xe0, 0xb6, 0x82, 0xf4, 0xfd, 0x5b, 0x0a, 0x3f,
	0x9c, 0xf4, 0xc3, 0x91, 0x22, 0xe0, 0x81, 0x06, 0x67, 0x8b, 0x41, 0x6a, 0x37, 0xd5, 0x0c, 0xff,
	0xa8, 0x48, 0xcd, 0xd0, 0x8f, 0xa9, 0x14, 0x60, 0x63, 0x07, 0x64, 0x81, 0x0f, 0xbb, 0x17, 0xf2,
	0xe6, 0x71, 0xc1, 0xf0, 0x8f, 0xa1, 0xb7, 0x42, 0xc1, 0x0f, 0x43, 0x66, 0xf7, 0xd0, 0x8a, 0x42,
	0xc7, 0xb7, 0xb8, 0xf4, 0xf2, 0xcc, 0x77, 0xc8, 0xff, 0xa1, 0x6a, 0x4d, 0x2a, 0xc6, 0xeb, 0xc2,
	0xbc, 0x64, 0x27, 0x77, 0xb3, 0x62, 0x88, 0x16, 0xc6, 0x84, 0x08, 0x3d, 0xef, 0x6e, 0xca, 0x29,
	0xf8, 0x69, 0x4f, 0xea, 0xdd, 0xf8, 0x19, 0xd9, 0x45, 0xdb, 0xec, 0xd8, 0xf1, 0xc2, 0xc0, 0xce,
	0xc6, 0xbb, 0x38, 0xe7, 0xf6, 0x3b, 0x73, 0x22, 0x34, 0x3d, 0x2e, 0xce, 0x46, 0x1f, 0x7a, 0x7a,
	0x18, 0x15, 0x17, 0x7e, 0xa8, 0x4d, 0x8e, 0xe3, 0x04, 0x5a, 0xa2, 0x45, 0xbd, 0x90, 0xd9, 0xa1,
	0xe0, 0x49, 0x51, 0x37, 0x35, 0xa9, 0x8c, 0x3e, 0xf1, 0x19, 0xbe, 0x82, 0x96, 0x18, 0x2e, 0xb3,
	0x24, 0xfc, 0x06, 0xf8, 0x4d, 0xea, 0xd5, 0xa4, 0x6a, 0x32, 0xd7, 0x50, 0xa5, 0xe8, 0x89, 0xf1,
	0xb8, 0x66, 0x8a, 0x7a, 0x78, 0x60, 0xfb, 0x25, 0x3c, 0xb0, 0x1f, 0x4e, 0xf8, 0x92, 0x04, 0x50,
	0x4c, 0xea, 0x71, 0x1a, 0xe0, 0x14, 0x62, 0xe7, 0x22, 0x60, 0x4a, 0x1b, 0x4d, 0x55, 0x9d, 0xc1,
	0x2c, 0xf1, 0xc2, 0xa6, 0x00, 0x5e, 0x93, 0x6a, 0xa7, 0x81, 0x33, 0x58, 0x0e, 0x53, 0x96, 0x7a,
	0x30, 0x22, 0xec, 0x39, 0x0a, 0xf2, 0x2d, 0xf0, 0x35, 0xa9, 0xa2, 0x47, 0xe3, 0x05, 0x56, 0xd8,
	0x36, 0x5a, 0x5d, 0xc9, 0xd0, 0x37, 0x07, 0x27, 0xf8, 0x0b, 0xf0, 0x4c, 0xb1, 0x3c, 0x07, 0xc6,
	0x95, 0x2c, 0xb0, 0x13, 0x99, 0x1d, 0xf3, 0x40, 0xe3, 0x9f, 0xe6, 0x83, 0xdf, 0x2e, 0x9f, 0x82,
	0xe0, 0x92, 0xb8, 0x21, 0x7d, 0xa6, 0xa8, 0x96, 0x6a, 0x1a, 0xbc, 0xb1, 0xe5, 0xc8, 0xd7, 0x29,
	0x56, 0x63, 0x8a, 0x09, 0x87, 0x19, 0xda, 0x3c, 0xe0, 0xf5, 0x50, 0x86, 0x01, 0x7e, 0x07, 0x33,
	0xcc, 0x87, 0xaf, 0x48, 0x60, 0xeb, 0xe1, 0x32, 0xc1, 0x99, 0x8b, 0x7f, 0x06, 0x91, 0x68, 0x45,
	0x45, 0x40, 0xf3, 0x0f, 0x0d, 0x0f, 0x0c, 0x3d, 0xb0, 0xc3, 0x1e, 0xff, 0x1c, 0xbe, 0x18, 0x79,
	0xe9, 0x6a, 0x1e, 0x77, 0xb4, 0x11, 0x72, 0xb2, 0x8c, 0x79, 0x2a, 0x7e, 0x01, 0x65, 0x9e, 0x24,
	0x29, 0x79, 0x64, 0x68, 0xad, 0x66, 0x47, 0x83, 0xd1, 0x47, 0x70, 0x19, 0xfa, 0xe5, 0x44, 0x4c,
	0x0e, 0x15, 0xe0, 0xf4, 0x01, 0x33, 0x0e, 0x0d, 0x34, 0xfe, 0x15, 0x59, 0x47, 0xd8, 0xe5, 0x2d,
	0x6e, 0x9d, 0x3a, 0x38, 0x31, 0xaf, 0x98, 0x92, 0xf8, 0xd7, 0x70, 0x01, 0x29, 0x17, 0x54, 0x57,
	0x49, 0x1f, 0xff, 0xa6, 0x44, 0x36, 0xa1, 0x31, 0x34, 0xab, 0x8f, 0xef, 0x13, 0x8a, 0x8a, 0x3a,
	0xc3, 0xbf, 0x2d, 0x91, 0x35, 0xb4, 0x32, 0x9e, 0xe3, 0x75, 0x76, 0xec, 0xe3, 0xdf, 0x95, 0x08,
	0x41, 0xcb, 0x3e, 0x55, 0xb4, 0x39, 0xac, 0x02, 0xfe, 0x7d, 0x89, 0x3c, 0x42, 0x1b, 0xb5, 0x50,
	0x38, 0x77, 0x25, 0xfe, 0x0f, 0x25, 0xf2, 0x00, 0xad, 0x0a, 0x69, 0x82, 0xd0, 0x69, 0x98, 0x80,
	0xb6, 0x98, 0xfd, 0x58, 0xe0, 0x3f, 0x96, 0xc8, 0x0e, 0x5c, 0xa0, 0xc6, 0x5f, 0x60, 0x73, 0x18,
	0xca, 0x62, 0x38, 0x80, 0xec, 0x9f, 0x4a, 0xe4, 0x29, 0xda, 0xbe, 0x8b, 0xc0, 0x5d, 0x26, 0x34,
	0xaf, 0x71, 0xa6, 0xf0, 0x9f, 0x4b, 0xbb, 0x7f, 0x9f, 0x43, 0xe5, 0x89, 0x27, 0xe5, 0xed, 0x1b,
	0x7f, 0xe9, 0x3f, 0xdf, 0xf8, 0x67, 0xbe, 0xd4, 0x8d, 0xff, 0x31, 0x42, 0x83, 0xeb, 0x3e, 0x3c,
	0xe3, 0xcd, 0x65, 0x6a, 0x5f, 0x60, 0x25, 0xb5, 0x58, 0x58, 0x9a, 0x29, 0xc0, 0xf9, 0xc6, 0x59,
	0xfc, 0x36, 0x2b, 0x1e, 0x94, 0xb9, 0x2b, 0x3a, 0x7e, 0x9b, 0x91, 0x6d, 0x04, 0xaf, 0xb5, 0xe8,
	0x32, 0xce, 0xe2, 0x41, 0x5a, 0x99, 0xab, 0xce, 0x16, 0xef, 0xb7, 0xc2, 0x02, 0xaf, 0x99, 0xd1,
	0x03, 0xdd, 0x3e, 0xf1, 0x50, 0x7e, 0x09, 0x2f, 0xde, 0xdb, 0x61, 0xf1, 0x08, 0x84, 0x4b, 0x78,
	0xfc, 0xf6, 0xaa, 0x17, 0x75, 0xfb, 0x95, 0x8f, 0x46, 0x4f, 0x2f, 0x96, 0x5b, 0xc8, 0xc7, 0x68,
	0xa5, 0x00, 0x4d, 0x72, 0x9d, 0x5d, 0x5d, 0x67, 0x95, 0x75, 0xab, 0xb2, 0x5c, 0x58, 0xa5, 0x35,
	0xc2, 0xf3, 0x75, 0x48, 0x8b, 0x07, 0x83, 0x64, 0x50, 0x79, 0x90, 0x3f, 0x5f, 0x0b, 0x23, 0x03,
	0x1b, 0x09, 0xc7, 0x5a, 0xf9, 0x5b, 0xa2, 0xb2, 0x61, 0xdf, 0x1d, 0xfb, 0xff, 0xed, 0x55, 0xbf,
	0x5f, 0x78, 0x53, 0xb3, 0xab, 0x46, 0x7b, 0xe7, 0x7f, 0x27, 0x65, 0xd3, 0xe4, 0x7a, 0xd0, 0x8e,
	0x2b, 0x95, 0x2f, 0x27, 0x1b, 0xd8, 0x55, 0x23, 0xd9, 0xfc, 0xef, 0x2e, 0x45, 0xcb, 0xb7, 0xb6,
	0x85, 0x9b, 0x10, 0x5c, 0xec, 0x87, 0xdf, 0x2b, 0x18, 0x6a, 0x4d, 0xaa, 0xf1, 0x07, 0x00, 0xbc,
	0x08, 0xa4, 0x98, 0x06, 0x4a, 0xbb, 0xc9, 0x48, 0x22, 0xd7, 0x84, 0x89, 0x73, 0xeb, 0x7b, 0x38,
	0x5a, 0x12, 0xc8, 0x50, 0x39, 0x0c, 0x7f, 0x30, 0xbc, 0x71, 0x8c, 0x80, 0x29, 0x42, 0x09, 0x46,
	0x0b, 0x3b, 0xd6, 0x4c, 0x09, 0xea, 0x4d, 0x83, 0x33, 0xaf, 0xef, 0xdb, 0x86, 0x7b, 0xfe, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x34, 0xeb, 0x36, 0x5c, 0x12, 0x00, 0x00,
}
